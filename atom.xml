<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://less1.top</id>
    <title>lessone</title>
    <subtitle>此去应多羡</subtitle>
    <icon>https://less1.top/images/favicon.ico</icon>
    <link href="https://less1.top" />
    <author>
      <name>lessone</name>
    </author>
    <updated>2024-10-30T10:42:10.000Z</updated>
    <entry>
        <id>https://less1.top/PPT-auto-nav/</id>
        <title>[实用脚本]组会必备！PPT自动导航栏生成工具</title>
        <link rel="alternate" href="https://less1.top/PPT-auto-nav/"/>
        <content type="html">&lt;h1 id=&#34;实际效果&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实际效果&#34;&gt;#&lt;/a&gt; 实际效果&lt;/h1&gt;
&lt;p&gt;添加导航栏前的 PPT：&lt;br /&gt;
&lt;img data-src=&#34;image.png&#34; alt=&#34;PPT before&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;before.gif&#34; alt=&#34;demo&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自动&lt;/strong&gt;添加导航栏后的 PPT：&lt;br /&gt;
&lt;img data-src=&#34;after.gif&#34; alt=&#34;demo&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍&#34;&gt;#&lt;/a&gt; 介绍&lt;/h1&gt;
&lt;p&gt;在现代学术研究中，清晰且专业的演示文稿对于有效传达研究成果至关重要。这款&lt;strong&gt; PPT 自动导航栏生成工具&lt;/strong&gt;旨在帮助研究生在组会中自动生成美观的 PPT 导航栏，从而&lt;s&gt;在老师提问时快速翻页&lt;/s&gt;使逻辑更加清晰，方便理解。&lt;/p&gt;
&lt;h1 id=&#34;功能特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#功能特点&#34;&gt;#&lt;/a&gt; 功能特点&lt;/h1&gt;
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li class=&#34;task-list-item&#34;&gt;
&lt;p&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_0&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_0&#34;&gt; &lt;strong&gt;自动提取标题&lt;/strong&gt;：工具会自动扫描每张幻灯片，提取 * 第一个文本框（有点不合理但是不知道怎么改了）* 中的内容作为该页的标题，确保导航栏的准确性。&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;
&lt;p&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_1&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_1&#34;&gt; &lt;strong&gt;自定义分段&lt;/strong&gt;：支持&lt;strong&gt;多篇论文、多段任务&lt;/strong&gt;的汇报，用户可以灵活指定导航栏的分段方式，例如通过输入 “2-5,7-12” 来设定具体的幻灯片范围。&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;
&lt;p&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_2&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_2&#34;&gt; &lt;strong&gt;动态导航栏&lt;/strong&gt;：导航栏会提示当前处于那个页面，方便展示。&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;
&lt;p&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_3&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_3&#34;&gt; &lt;strong&gt;超链接支持&lt;/strong&gt;：每个导航项都设置了超链接，点击后将直接跳转到对应的幻灯片。&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;
&lt;p&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_4&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_4&#34;&gt; &lt;strong&gt;可自定义的外观&lt;/strong&gt;：&lt;s&gt;个人审美有限，自己修改样式参数吧&lt;/s&gt;&lt;/label&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;使用教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用教程&#34;&gt;#&lt;/a&gt; 使用教程&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;安装 python 环境&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;s&gt;网上教程很多，此处省略了～～&lt;/s&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;安装 python-pptx&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在命令行运行下面的命令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pip &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; python-pptx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;修改文件名称&lt;em&gt;&lt;strong&gt;或&lt;/strong&gt;&lt;/em&gt;脚本内的文件名称&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;将  &lt;code&gt;需要添加导航栏的ppt&lt;/code&gt;  的文件名称修改为  &lt;code&gt;input.pptx&lt;/code&gt; ，&lt;em&gt;&lt;strong&gt;或&lt;/strong&gt;&lt;/em&gt;将脚本中的  &lt;code&gt;input.pptx&lt;/code&gt;  修改为 &lt;code&gt;需要添加导航栏的ppt&lt;/code&gt;  的名称&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;运行脚本程序&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;再使用下面的命令运行脚本程序：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;python auto_nav.py&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;image-1.png&#34; alt=&#34;程序提示&#34; /&gt;&lt;/p&gt;
&lt;p&gt;根据提示输入导航栏分段的范围，以下面的 PPT 为例：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image.png&#34; alt=&#34;PPT before&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 1 页是开头页&lt;/li&gt;
&lt;li&gt;第 2 页是第一篇 paper 的标题&lt;/li&gt;
&lt;li&gt;第 3-9 页是第一篇 paper 的主体展示&lt;/li&gt;
&lt;li&gt;第 10 页是第二篇 paper 的标题&lt;/li&gt;
&lt;li&gt;第 11-13 页是第二篇 paper 的主体展示&lt;/li&gt;
&lt;li&gt;第 14 页是结尾页&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只需要分段输入主体部分的页码，因此选择输入 &lt;code&gt;3-9,11-13&lt;/code&gt; &lt;em&gt;(&lt;strong&gt;英文&lt;/strong&gt;的逗号)&lt;/em&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;查看运行结果并根据实际情况调整&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;image-2.png&#34; alt=&#34;PPT after&#34; /&gt;&lt;/p&gt;
&lt;p&gt;生成导航栏后的 PPT 已经输出到了同目录下的 &lt;code&gt;output.pptx&lt;/code&gt;  中，可以看到，导航栏已经分段生成，可以根据实际情况进行进一步修改。&lt;/p&gt;
&lt;h1 id=&#34;源码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#源码&#34;&gt;#&lt;/a&gt; 源码&lt;/h1&gt;
&lt;p&gt;源码获取：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2xlc3NvbmUxL1BQVC1hdXRvLW5hdg==&#34;&gt;PPT 导航栏自动生成源码&lt;/span&gt;。&lt;/p&gt;
</content>
        <category term="实用脚本" scheme="https://less1.top/categories/%E5%AE%9E%E7%94%A8%E8%84%9A%E6%9C%AC/" />
        <category term="研究生组会" scheme="https://less1.top/tags/%E7%A0%94%E7%A9%B6%E7%94%9F%E7%BB%84%E4%BC%9A/" />
        <category term="实用脚本" scheme="https://less1.top/tags/%E5%AE%9E%E7%94%A8%E8%84%9A%E6%9C%AC/" />
        <category term="PPT美化" scheme="https://less1.top/tags/PPT%E7%BE%8E%E5%8C%96/" />
        <category term="导航栏" scheme="https://less1.top/tags/%E5%AF%BC%E8%88%AA%E6%A0%8F/" />
        <updated>2024-10-30T10:42:10.000Z</updated>
    </entry>
    <entry>
        <id>https://less1.top/Mobile-Security/</id>
        <title>[移动应用安全]华中科技大学移动应用安全静态动态分析作业</title>
        <link rel="alternate" href="https://less1.top/Mobile-Security/"/>
        <content type="html">&lt;h1 id=&#34;动态分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态分析&#34;&gt;#&lt;/a&gt; 动态分析&lt;/h1&gt;
&lt;h2 id=&#34;实验目的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实验目的&#34;&gt;#&lt;/a&gt; 实验目的&lt;/h2&gt;
&lt;p&gt;本实验的目的是通过动态测试工具 Droidbot 对 Android 应用进行自动化测试，验证应用在不同虚拟环境中的功能、稳定性和兼容性。实验将结合使用 Android Studio、Genymotion 虚拟机、Oracle VM VirtualBox 等工具，模拟真实设备上的操作，进行样例测试和具体应用的测试分析，从而探索应用的行为流程、控制流，并发现应用可能存在的安全问题。&lt;/p&gt;
&lt;h2 id=&#34;实验环境&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实验环境&#34;&gt;#&lt;/a&gt; 实验环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Droidbot version1.0.2b1&lt;/li&gt;
&lt;li&gt;Android Studio Koala Feature Drop | 2024.1.2&lt;/li&gt;
&lt;li&gt;Oracle VM VirtualBox 版本 7.0.8 r156879 (Qt5.15.2)&lt;/li&gt;
&lt;li&gt;Genymotion Version 3.7.1
&lt;ul&gt;
&lt;li&gt;虚拟机版本：Huawei P30 Pro (Android 11.0 API 30)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实验过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实验过程&#34;&gt;#&lt;/a&gt; 实验过程&lt;/h2&gt;
&lt;h3 id=&#34;样例测试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#样例测试&#34;&gt;#&lt;/a&gt; 样例测试&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Step 1 环境搭建&lt;/strong&gt;&lt;br /&gt;
环境搭建步骤参考《APP 动态测试实验.pdf》。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装 Python 和 Java&lt;/strong&gt;&lt;br /&gt;
 确保已安装 Python 和 Java，可以通过命令行（cmd）输入 &lt;code&gt;python&lt;/code&gt;  和 &lt;code&gt;java -version&lt;/code&gt;  来验证。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;配置 Android SDK&lt;/strong&gt;&lt;br /&gt;
 从 Android 开发者官网下载 Android Studio（无需安装 Android Virtual Device）。&lt;br /&gt;
将 &lt;code&gt;C:\Users\Administrator\AppData\Local\Android\Sdk\platform-tools&lt;/code&gt;  目录添加到系统的 PATH 环境变量中。&lt;br /&gt;
通过命令行（cmd）运行 &lt;code&gt;adb&lt;/code&gt;  命令验证配置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装 Genymotion&lt;/strong&gt;&lt;br /&gt;
 在 Genymotion 官网注册账户，下载并安装 Genymotion 和 VirtualBox。&lt;br /&gt;
在 Genymotion 中选择手机机型（例如 Nexus 4），并配置 Android 版本（例如 Android 11.0）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;验证 ADB 连接&lt;/strong&gt;&lt;br /&gt;
确保虚拟机启动后 &lt;code&gt;adb&lt;/code&gt;  能够识别设备。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装 Droidbot&lt;/strong&gt;&lt;br /&gt;
 从 Droidbot 的 GitHub 页面下载并解压 Droidbot。&lt;br /&gt;
在 &lt;code&gt;setup.py&lt;/code&gt;  所在的文件夹中运行 &lt;code&gt;pip install -e .&lt;/code&gt;  安装 Droidbot，完成后可通过 &lt;code&gt;droidbot -h&lt;/code&gt;  验证。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Step 2 启动 Huawei P30 Pro 虚拟机&lt;/strong&gt;&lt;br /&gt;
在 Genymotion 中点击启动按钮，启动 Huawei P30 Pro 虚拟机。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3 启动动态测试&lt;/strong&gt;&lt;br /&gt;
运行以下命令开始测试：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ droidbot &lt;span class=&#34;token parameter variable&#34;&gt;-a&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;path_to_apk&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-o&lt;/span&gt; output_dir&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;测试结果如图 1 所示。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;1.png&#34; alt=&#34;图1 启动动态测试结果&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4 测试结果分析&lt;/strong&gt;&lt;br /&gt;
测试结果存储在 &lt;code&gt;output_dir&lt;/code&gt;  中，直接打开 &lt;code&gt;index.html&lt;/code&gt;  即可查看测试结果，打开结果如图 2 所示。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;2.png&#34; alt=&#34;图2 测试结果分析页面&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在该页面可以查看 app 信息、设备信息、测试结果（测试时间、覆盖率等）。&lt;/p&gt;
&lt;h3 id=&#34;opera浏览器测试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#opera浏览器测试&#34;&gt;#&lt;/a&gt; Opera 浏览器测试&lt;/h3&gt;
&lt;p&gt;从网上下载 x86 版本的 Opera 浏览器进行动态测试。&lt;br /&gt;
Opera 是一个强大而复杂的浏览器，此时使用 &lt;code&gt;Opera-65.2.3381.61420x86.apk&lt;/code&gt;  版本进行测试，该 apk 可以从&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tb2JpbGUuc29mdHBlZGlhLmNvbS9hcGs=&#34;&gt; https://mobile.softpedia.com/apk&lt;/span&gt; 下载获取。&lt;br /&gt;
运行测试界面如图 3 所示。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;3.png&#34; alt=&#34;图3 Opera浏览器测试界面&#34; /&gt;&lt;/p&gt;
&lt;p&gt;查看 Opera 浏览器的测试结果，可以得到控制流如图 4 所示。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;4.png&#34; alt=&#34;图4 Opera测试流图&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;chrome浏览器测试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#chrome浏览器测试&#34;&gt;#&lt;/a&gt; Chrome 浏览器测试&lt;/h3&gt;
&lt;p&gt;同样从&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tb2JpbGUuc29mdHBlZGlhLmNvbS9hcGs=&#34;&gt; https://mobile.softpedia.com/apk&lt;/span&gt; 下载获取 x86 架构下的 Chrome 浏览器，名称为 &lt;code&gt;Chrome-91.0.4472.134 x86 + x86_64.apk&lt;/code&gt; 。&lt;br /&gt;
Chrome 浏览器的测试结果如图 5 所示。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;5.png&#34; alt=&#34;图5 Chrome浏览器测试结果&#34; /&gt;&lt;/p&gt;
&lt;p&gt;似乎是因为 API 版本的问题，只正常安装了 Chrome 浏览器的搜索栏，而没有完整安装整个浏览器，导致测试只显示了搜索栏，背景还是系统主界面。&lt;/p&gt;
&lt;h2 id=&#34;心得与体会&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#心得与体会&#34;&gt;#&lt;/a&gt; 心得与体会&lt;/h2&gt;
&lt;p&gt;通过本次实验，对 Android 应用的动态分析和自动化测试有了更深入的理解。整个测试过程让我体验到了 Droidbot 工具的便捷性及其在自动化测试中的重要作用。以下是我从实验中得到的主要体会：&lt;/p&gt;
&lt;p&gt;实验中 Droidbot 结合 Android Studio、Genymotion 虚拟机和 VirtualBox 等多种工具，通过模拟真实设备环境来完成对应用的动态测试。这种组合在实际测试应用场景中表现出了高效的兼容性，尤其在调试和测试不同 Android 版本的应用时，减少了许多配置与环境兼容的困扰，使整个测试过程更加流畅。&lt;/p&gt;
&lt;p&gt;Droidbot 能够自动模拟用户操作并覆盖应用的各个功能模块，不仅提高了测试的覆盖率，还降低了手动测试的工作量。在应用测试中，Droidbot 有效地捕获了应用的控制流和行为流程，为分析应用的稳定性和潜在的安全问题提供了较全面的数据支持。&lt;/p&gt;
&lt;p&gt;由于 Android 设备种类繁多，操作系统版本各异，兼容性测试始终是一个复杂而重要的环节。本次实验通过多样化的虚拟设备配置，如 Huawei P30 Pro 和不同架构的应用测试，显著帮助我了解了如何在模拟环境中解决兼容性问题。然而，在配置虚拟设备与实际设备时，仍然存在一定的兼容性差异，因此在实践中还需注意不同虚拟设备的性能差异和 API 的适配性。&lt;/p&gt;
&lt;p&gt;Droidbot 输出的详细报告为我们提供了应用的功能覆盖情况、测试时间和用户交互等信息，有助于分析应用的稳定性、性能和行为模式。在实际应用中，通过测试报告数据，能够快速识别出应用的潜在风险点，并为优化应用提供可靠的依据。实验让我意识到测试分析结果的重要性以及自动化工具在数据收集和分析上的优势。&lt;/p&gt;
&lt;p&gt;综上所述，本次实验加深了我对 Android 应用动态测试的理解，提升了在虚拟环境中进行自动化测试的技能，同时认识到在应用测试中合理选择和搭配工具的重要性。&lt;/p&gt;
&lt;h1 id=&#34;静态分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态分析&#34;&gt;#&lt;/a&gt; 静态分析&lt;/h1&gt;
&lt;h2 id=&#34;实验目的-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实验目的-2&#34;&gt;#&lt;/a&gt; 实验目的&lt;/h2&gt;
&lt;p&gt;本实验的主要目的是通过静态分析工具 Soot 对 Java 程序和 APK 文件进行深入分析，掌握 Soot 的基本操作与配置流程。实验将演示如何利用 Soot 获取 Java 类的继承关系、方法调用链及其 Jimple 中间表示，从而为后续的静态污点分析和代码审计等安全分析奠定基础。同时，实验包含对 APK 文件的分析过程，识别应用程序中可能的安全隐患。&lt;/p&gt;
&lt;h2 id=&#34;实验环境-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实验环境-2&#34;&gt;#&lt;/a&gt; 实验环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IntelliJ IDEA 2023.3.8 (Community Edition)&lt;/li&gt;
&lt;li&gt;Java 20 2023-03-21&lt;/li&gt;
&lt;li&gt;Java(TM) SE Runtime Environment (build 20+36-2344)&lt;/li&gt;
&lt;li&gt;Java HotSpot(TM) 64-Bit Server VM (build 20+36-2344, mixed mode, sharing)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实验过程-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实验过程-2&#34;&gt;#&lt;/a&gt; 实验过程&lt;/h2&gt;
&lt;h3 id=&#34;案例一&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#案例一&#34;&gt;#&lt;/a&gt; 案例一&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Step 1 环境搭建&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;创建 Maven 项目&lt;/strong&gt;&lt;br /&gt;
在 IDEA 中创建 Maven 项目，并配置  &lt;code&gt;pom.xml&lt;/code&gt;  文件，将 Soot 库作为依赖项添加。如果 Maven 没有自动下载依赖，可以右键  &lt;code&gt;pom.xml&lt;/code&gt;  文件并选择 “Maven -&amp;gt; Reload project” 手动刷新。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;编写 Demo 程序&lt;/strong&gt;&lt;br /&gt;
创建一个简单的 Java 类 Demo，例如一个  &lt;code&gt;HelloWorld&lt;/code&gt;  类继承  &lt;code&gt;ParentClass&lt;/code&gt;  类，以供 Soot 分析。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Soot 初始化与配置&lt;/strong&gt;&lt;br /&gt;
初始化 Soot，并设置其分析选项。具体的 Soot 配置选项可以参考官方文档。&lt;br /&gt;
分析任务通过 Soot 的不同阶段（Pack）和转换任务（Transform）进行配置，例如，使用  &lt;code&gt;Transform(&amp;quot;jtp.myTransform&amp;quot;, new BodyTransformer())&lt;/code&gt;  注册一个转换任务到  &lt;code&gt;jtp&lt;/code&gt;  阶段。使用  &lt;code&gt;PackManager.v().runPacks()&lt;/code&gt;  运行所有已注册的转换任务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;执行 Soot&lt;/strong&gt;&lt;br /&gt;
 在代码中调用 Soot 完成分析，或使用  &lt;code&gt;mvn package&lt;/code&gt;  将项目打包为 jar 文件以生成可执行文件（需配置 Maven 编译器插件）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Step 2 编写分析程序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;静态分析的完整代码如代码段 1 所示。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 1. 初始化 Soot 的配置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;initSoot&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 2. 加载并解析具体的类&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; className &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;HelloWorld&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 目标类的名称&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;SootClass&lt;/span&gt; sootClass&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Scene&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;loadClassAndSupport&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;className&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        sootClass&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setApplicationClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 将其设置为应用类&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 3. 打印该类的继承关系&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sootClass&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;hasSuperclass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;SootClass&lt;/span&gt; superClass &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; sootClass&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getSuperclass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;className &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; extends &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; superClass&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;className &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; does not extend any class.&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 4. 设置 PackManager，注册自定义的转换任务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;PackManager&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getPack&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;jtp&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;jtp.myTransform&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;BodyTransformer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;internalTransform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Body&lt;/span&gt; body&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; phase&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; options&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token comment&#34;&gt;// 打印方法的 Jimple 表示&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;body &lt;span class=&#34;token keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;JimpleBody&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Analyzing method: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; body&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getMethod&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getSignature&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;body&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 打印 Jimple 表示&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 5. 启动 Soot 的分析任务，运行注册的任务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;PackManager&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;runPacks&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 执行注册的分析&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;initSoot&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 清理全局状态&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Options&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set_prepend_classpath&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 将 Java 类路径加入 Soot 类路径&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Options&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set_allow_phantom_refs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 允许 phantom 类引用&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Options&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set_output_format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Options&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;output_format_jimple&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 设置输出为 Jimple 格式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; classDir &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;E:\\Desktop\\项目\\JavaLearning\\SootProject&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// HelloWorld.class 文件的目录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Options&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set_soot_classpath&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;classDir&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Options&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set_process_dir&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Collections&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;singletonList&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;classDir&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Scene&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;loadNecessaryClasses&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 加载必要的类到 Scene 中&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Step 3 运行程序，分析结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;程序运行的部分结果如图 6 所示，以  &lt;code&gt;HelloWorld extends ParentClass&lt;/code&gt;  为例分析其输出结果。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;6.png&#34; alt=&#34;图6 静态分析案例1部分输出结果&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输出  &lt;code&gt;HelloWorld extends ParentClass&lt;/code&gt;  表明目标类  &lt;code&gt;HelloWorld&lt;/code&gt;  继承自  &lt;code&gt;ParentClass&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;Soot 对  &lt;code&gt;HelloWorld&lt;/code&gt;  和  &lt;code&gt;ParentClass&lt;/code&gt;  的构造方法进行了分析，并打印了它们的 Jimple 表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中， &lt;code&gt;HelloWorld&lt;/code&gt;  类的构造方法  &lt;code&gt;&amp;lt;HelloWorld: void &amp;lt;init&amp;gt;()&amp;gt;&lt;/code&gt;  中的  &lt;code&gt;r0 := @this: HelloWorld;&lt;/code&gt;  表示将当前对象  &lt;code&gt;this&lt;/code&gt;  分配给本地变量  &lt;code&gt;r0&lt;/code&gt; 。 &lt;code&gt;specialinvoke r0.&amp;lt;ParentClass: void &amp;lt;init&amp;gt;()&amp;gt;();&lt;/code&gt;  表示调用父类  &lt;code&gt;ParentClass&lt;/code&gt;  的构造方法。&lt;/p&gt;
&lt;h3 id=&#34;案例二&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#案例二&#34;&gt;#&lt;/a&gt; 案例二&lt;/h3&gt;
&lt;p&gt;案例二核心代码如代码段 2 所示。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; appPath &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;D:/sootshow/apks/0C4F1EE788C58BF01616B0EF0FE0DE4E1A27D9274C4ECE231C0CC8E513BDD7DC.apk&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; androidJars &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;D:/android-platforms/&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; arguments &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token string&#34;&gt;&#34;-process-dir&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; appPath&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token string&#34;&gt;&#34;-android-jars&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; androidJars&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token string&#34;&gt;&#34;-ire&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token string&#34;&gt;&#34;-pp&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token string&#34;&gt;&#34;-allow-phantom-refs&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token string&#34;&gt;&#34;-w&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token string&#34;&gt;&#34;-p&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;cg&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;enabled:false&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;APIPrintTransformer&lt;/span&gt; transformer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;APIPrintTransformer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Options&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set_src_prec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Options&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;src_prec_apk&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Options&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set_output_format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Options&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;output_format_none&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;PackManager&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getPack&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;wjtp&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Transform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;wjtp.MethodFeatureTransformer&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; transformer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;soot&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;Main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arguments&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;APIPrintTransformer&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SceneTransformer&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;internalTransform&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; phaseName&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; options&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Chain&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SootClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; sootClasses &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Scene&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getApplicationClasses&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SootClass&lt;/span&gt; sc &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; sootClasses&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Class: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; sc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SootMethod&lt;/span&gt; sm &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; sc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getMethods&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Method: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; sm&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sm&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isConcrete&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token class-name&#34;&gt;Body&lt;/span&gt; body &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; sm&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;retrieveActiveBody&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;body &lt;span class=&#34;token keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;JimpleBody&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Jimple Code for method: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; sm&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getSignature&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;body&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Error retrieving body for method: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; sm&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; - &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getMessage&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;程序的核心逻辑在  &lt;code&gt;APIPrintTransformer&lt;/code&gt;  中。通过  &lt;code&gt;Scene.v().getApplicationClasses&lt;/code&gt;  获取所有应用类，并对每个类输出其名称。如果方法是 concrete（具备具体实现），则获取其 JimpleBody（Jimple 表示的代码），成功获取 JimpleBody 后，打印方法签名和 Jimple 表示的代码。&lt;/p&gt;
&lt;p&gt;程序的运行结果如图 7 所示。以方法  &lt;code&gt;&amp;lt;com.google.android.gms.f.cz: int a(java.lang.String,com.google.android.gms.f.dd)&amp;gt;&lt;/code&gt;  为例分析其输出结果。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;7.png&#34; alt=&#34;图7 静态分析案例2部分输出结果&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该方法名为  &lt;code&gt;a&lt;/code&gt; ，属于  &lt;code&gt;com.google.android.gms.f.cz&lt;/code&gt;  类。程序首先将当前对象  &lt;code&gt;this&lt;/code&gt;  赋值给局部变量  &lt;code&gt;r0&lt;/code&gt; ，再将第一个参数（类型为  &lt;code&gt;java.lang.String&lt;/code&gt; ）赋值给局部变量  &lt;code&gt;$r1&lt;/code&gt; ，将第二个参数（类型为  &lt;code&gt;com.google.android.gms.f.dd&lt;/code&gt; ）赋值给局部变量  &lt;code&gt;$r2&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;程序调用  &lt;code&gt;$r1&lt;/code&gt; （String 类型）对象的  &lt;code&gt;length()&lt;/code&gt;  方法，获取字符串的长度并将其存储在  &lt;code&gt;$i0&lt;/code&gt; ，调用  &lt;code&gt;$r2&lt;/code&gt; （ &lt;code&gt;com.google.android.gms.f.dd&lt;/code&gt;  类型）对象的  &lt;code&gt;c()&lt;/code&gt;  方法获取整数值，存储在  &lt;code&gt;$i1&lt;/code&gt; ，最后将  &lt;code&gt;$i0&lt;/code&gt;  和  &lt;code&gt;$i1&lt;/code&gt;  的值相加并将结果存储在  &lt;code&gt;$i0&lt;/code&gt;  中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;心得与体会-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#心得与体会-2&#34;&gt;#&lt;/a&gt; 心得与体会&lt;/h2&gt;
&lt;p&gt;通过此次实验，我深入了解了静态分析工具 Soot 的强大功能和实际应用。在实验中，我们学习了如何使用 Soot 解析 Java 类的继承关系、方法调用链以及获取 Jimple 中间表示，为后续的代码分析打下坚实的基础。&lt;/p&gt;
&lt;p&gt;在案例一中，通过获取类的继承关系，我们更好地理解了 Java 类之间的层次结构；而在案例二中，Soot 帮助我们深入分析了&lt;/p&gt;
&lt;p&gt;APK 文件的方法逻辑，为应用的潜在安全隐患分析提供了支持。特别是  &lt;code&gt;APIPrintTransformer&lt;/code&gt;  的实现，通过获取所有应用类及其方法的 Jimple 表示，我们能够清晰地看到程序的逻辑流程和关键变量的处理方式，为静态污点分析和代码审计提供了基础框架。&lt;/p&gt;
&lt;p&gt;此次实验让我体会到静态分析在安全检测中的重要作用。通过构建的工具和流程，我们可以在无需运行应用程序的情况下，识别可能的漏洞和风险。这种 “白盒” 测试方法在安全分析和优化中具有高效和可靠的优势。&lt;/p&gt;
</content>
        <category term="HUST本科学习" scheme="https://less1.top/categories/HUST%E6%9C%AC%E7%A7%91%E5%AD%A6%E4%B9%A0/" />
        <category term="HUST" scheme="https://less1.top/tags/HUST/" />
        <category term="移动应用安全" scheme="https://less1.top/tags/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8/" />
        <category term="soot" scheme="https://less1.top/tags/soot/" />
        <category term="Droidbot" scheme="https://less1.top/tags/Droidbot/" />
        <updated>2024-10-26T03:17:54.000Z</updated>
    </entry>
    <entry>
        <id>https://less1.top/Java-Learning/</id>
        <title>Java-Learning</title>
        <link rel="alternate" href="https://less1.top/Java-Learning/"/>
        <content type="html">&lt;h1 id=&#34;面向对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向对象&#34;&gt;#&lt;/a&gt; 面向对象&lt;/h1&gt;
&lt;p&gt;你是上帝，创造对象，让对象干活。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：减少代码量、可扩展性强、维护成本低&lt;br /&gt;
&lt;strong&gt;缺点&lt;/strong&gt;：上帝视角、上手难度相对大&lt;/p&gt;
&lt;h1 id=&#34;类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类&#34;&gt;#&lt;/a&gt; 类&lt;/h1&gt;
&lt;p&gt;设计方案：属性（class 里的变量，即成员变量） + 动作（public 不加 static，即成员方法）&lt;/p&gt;
&lt;h1 id=&#34;对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对象&#34;&gt;#&lt;/a&gt; 对象&lt;/h1&gt;
&lt;p&gt;类的实例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创建方法&lt;/strong&gt;： &lt;code&gt;new&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 类 引用 = new 类 ();&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;car c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;car&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;this关键字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#this关键字&#34;&gt;#&lt;/a&gt; this 关键字&lt;/h1&gt;
&lt;p&gt;当前正在执行这个方法的对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在调用方法的时候，Java 会自动地把对象传递给方法，在方法中由 &lt;code&gt;this&lt;/code&gt;  来接收对象。&lt;/li&gt;
&lt;li&gt;不加 &lt;code&gt;this&lt;/code&gt;  的变量的查找顺序：自己方法内找（局部变量）&amp;gt;  &lt;code&gt;this&lt;/code&gt;  里面找（成员变量）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt;  还可以调用当前类中的其他构造方法（通过 &lt;code&gt;this(参数)&lt;/code&gt; ，而不是 &lt;code&gt;this.xxxx&lt;/code&gt; ）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;构造方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#构造方法&#34;&gt;#&lt;/a&gt; 构造方法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;没有返回值。&lt;/li&gt;
&lt;li&gt;在执行 &lt;code&gt;new&lt;/code&gt;  的时候自动调用构造方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; 类名&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;参数&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;构造方法重载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#构造方法重载&#34;&gt;#&lt;/a&gt; 构造方法重载&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;构造方法也是方法，也可以进行重载。&lt;/li&gt;
&lt;li&gt;方法名称相同，参数个数不同。&lt;/li&gt;
&lt;li&gt;从而可以有更多的方式创建对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;static&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#static&#34;&gt;#&lt;/a&gt; static&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;静态的内容在内存中只保留一份。&lt;/li&gt;
&lt;li&gt;其内容由各个对象共享。&lt;/li&gt;
&lt;li&gt;推荐使用类名访问静态内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;通用构造器静态构造器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通用构造器静态构造器&#34;&gt;#&lt;/a&gt; 通用构造器 &amp;amp; 静态构造器&lt;/h1&gt;
&lt;p&gt;（都不常用）&lt;/p&gt;
&lt;p&gt;创建对象的过程：先执行静态构造器，再执行通用构造器，最后执行构造方法。因此，在静态方法里不能使用 &lt;code&gt;this&lt;/code&gt; ，因为 &lt;code&gt;this&lt;/code&gt;  还没生成。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; test&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;这里是通用构造器&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;这里是静态构造器&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#包&#34;&gt;#&lt;/a&gt; 包&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;所有程序都平铺在 &lt;code&gt;src&lt;/code&gt;  里不好维护。&lt;/li&gt;
&lt;li&gt;包名一般用公司域名的翻转 (如 &lt;code&gt;com.baidu.tieba&lt;/code&gt; )。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;com&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;baidu&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;tieba&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;导包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#导包&#34;&gt;#&lt;/a&gt; 导包&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不需要导包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在自己包里不需要导包；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.lang&lt;/code&gt;  包下的所有内容不需要导包。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;导包格式：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;com&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;baidu&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;tieba&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;com&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;baidu&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;tieba&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;访问权限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#访问权限&#34;&gt;#&lt;/a&gt; 访问权限&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt;  公共的，所有人可访问（常用）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt;  包访问权限，自己包内可以随意访问。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt;  私有的（常用）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;setter&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#setter&#34;&gt;#&lt;/a&gt; setter&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;给 &lt;code&gt;private&lt;/code&gt;  成员变量赋值，可以添加保护。&lt;/li&gt;
&lt;li&gt;IDEA 可以右键 &lt;code&gt;generate -&amp;gt; getter and setter&lt;/code&gt;  自动生成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;getter&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#getter&#34;&gt;#&lt;/a&gt; getter&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;从 &lt;code&gt;private&lt;/code&gt;  成员变量获取数据。&lt;/li&gt;
&lt;li&gt;IDEA 可以右键 &lt;code&gt;generate -&amp;gt; getter and setter&lt;/code&gt;  自动生成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;继承&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#继承&#34;&gt;#&lt;/a&gt; 继承&lt;/h1&gt;
&lt;p&gt;子类可以自动拥有父类中除了私有内容外的其他所有内容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：简化代码的开发。&lt;/p&gt;
&lt;p&gt;当出现 x 是一种 y 的时候，x 就可以继承 y（黑熊怪是一种妖怪）。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HeiXiongGuai&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;YaoGuai&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;super关键字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#super关键字&#34;&gt;#&lt;/a&gt; super 关键字&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt;  先找自己类再找父类， &lt;code&gt;super&lt;/code&gt;  表示父类中的内容。&lt;/li&gt;
&lt;li&gt;可以用 &lt;code&gt;super&lt;/code&gt;  和 &lt;code&gt;this&lt;/code&gt;  来区分父类和子类中重名的内容。&lt;/li&gt;
&lt;li&gt;可以用 &lt;code&gt;super()&lt;/code&gt;  来调用父类构造方法，需要写在子类构造方法的第一行。&lt;/li&gt;
&lt;li&gt;如果父类构造方法不包含参数，可以不写；如果包含参数，一定要写。&lt;/li&gt;
&lt;li&gt;在调用子类构造方法时，会在进入子类构造方法时调用父类构造方法，再回到子类的构造方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; zilei &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; fulei&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;zilei&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 即使不加这行代码，这里也会默认调用 super ()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;我是子类构造方法&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;方法的重写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法的重写&#34;&gt;#&lt;/a&gt; 方法的重写&lt;/h1&gt;
&lt;p&gt;子类对父类中提供的方法进行重新定义。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法&lt;/strong&gt;：子类和父类中的方法的声明完全一致。&lt;/p&gt;
&lt;h1 id=&#34;多态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多态&#34;&gt;#&lt;/a&gt; 多态&lt;/h1&gt;
&lt;p&gt;同一个对象拥有多种形态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：把不同的数据类型进行统一，但真正执行的时候依然会按照每个数据类型进行执行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;向上转型：把子类的对象赋值给父类的引用 (会屏蔽掉子类中特有的方法，因此还需要向下转型)。&lt;/li&gt;
&lt;li&gt;向下转型：把父类的变量转换回子类的变量（向下转型有风险，需要写强制类型转换）。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 向上转型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;animal ani1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;animal ani2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;dog&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 向下转型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cat cc &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cat&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;ani1&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ani1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;eat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;        &lt;span class=&#34;token comment&#34;&gt;// 可执行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;ani1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;CatchMouse&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 不可执行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;cc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;CatchMouse&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 可执行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;final&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#final&#34;&gt;#&lt;/a&gt; final&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;被 &lt;code&gt;final&lt;/code&gt;  修饰的变量不可被改变，又被称为常量。&lt;/li&gt;
&lt;li&gt;被 &lt;code&gt;final&lt;/code&gt;  修饰的方法不可被重写。&lt;/li&gt;
&lt;li&gt;被 &lt;code&gt;final&lt;/code&gt;  修饰的类不可被继承，即不能产生子类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;抽象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#抽象&#34;&gt;#&lt;/a&gt; 抽象&lt;/h1&gt;
&lt;p&gt;只声明，不实现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用 &lt;code&gt;abstract&lt;/code&gt;  修饰方法，直接用分号结束。&lt;/li&gt;
&lt;li&gt;如果一个类中有抽象方法，那么这个类一定是一个抽象类。&lt;/li&gt;
&lt;li&gt;抽象类不可以造对象，即不可以 &lt;code&gt;new&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;抽象类的子类必须重写抽象类中的抽象方法（通过抽象类可以强制要求子类中有哪些方法）。&lt;/li&gt;
&lt;li&gt;抽象类中可以有正常的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; animal&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;eat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;smell&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// ……&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接口&#34;&gt;#&lt;/a&gt; 接口&lt;/h1&gt;
&lt;p&gt;接口实际上是一种特殊的抽象类，其中所有的方法都是抽象方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;interface&lt;/code&gt;  声明。&lt;/li&gt;
&lt;li&gt;能继承接口的只能是接口。&lt;/li&gt;
&lt;li&gt;接口和类只能是实现关系。&lt;/li&gt;
&lt;li&gt;接口同样具有多态性。&lt;/li&gt;
&lt;li&gt;方法可以省略 &lt;code&gt;abstract&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;接口中所有方法默认都是 &lt;code&gt;public&lt;/code&gt;  的，所有变量都是全局静态最终常量。&lt;/li&gt;
&lt;li&gt;类只能单继承，而接口支持多实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：接口可以把很多不相关的东西进行整合。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; valuable&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getMoney&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 接口中所有的方法都是抽象方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Gold&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; valuable&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 必须要重写抽象方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getMoney&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;类实现接口，重写抽象方法&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Panda&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; animal &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; valuable&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; protectable&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 类可以继承一个类，实现多个接口&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 接口同样具有多态性&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  panda p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Panda&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  animal ani &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Panda&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  valuable v &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Panda&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  protectable p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Panda&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;成员变量的初始值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#成员变量的初始值&#34;&gt;#&lt;/a&gt; 成员变量的初始值&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;java 中所有的变量必须先声明再赋值才可使用&lt;/li&gt;
&lt;li&gt;java 中的成员变量在创建对象的时候都会执行一次初始化操作，给一个默认值：
&lt;ul&gt;
&lt;li&gt;byte:0&lt;/li&gt;
&lt;li&gt;short:0&lt;/li&gt;
&lt;li&gt;int:0&lt;/li&gt;
&lt;li&gt;long:0&lt;/li&gt;
&lt;li&gt;float:0.0&lt;/li&gt;
&lt;li&gt;double:0.0&lt;/li&gt;
&lt;li&gt;char:0&lt;/li&gt;
&lt;li&gt;boolean:false&lt;/li&gt;
&lt;li&gt;string (string 是 java 提供的一个类):null&lt;/li&gt;
&lt;li&gt;child (自己写的类):null&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;即基本数据类型默认都是 0，包括 boolean；引用数据类型都是 null&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;object&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#object&#34;&gt;#&lt;/a&gt; object&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;所有的东西都是对象&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;object 是一个类，是所有类的根&lt;/li&gt;
&lt;li&gt;在 java 中，所有的类都要继承 object；我们写的类，即使不写继承关系，默认也会继承 object&lt;/li&gt;
&lt;li&gt;equals（object 提供的方法）：用来判断两个对象是否相等
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;equals&lt;/strong&gt;&lt;/em&gt; 和 &lt;em&gt;&lt;strong&gt;==&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;== 一般用于基本数据类型，不用于对象&lt;/li&gt;
&lt;li&gt;equals 默认用法与 &#39;==&#39; 相同，但可以通过重写添加自己的判断逻辑&lt;/li&gt;
&lt;li&gt;equals 用法：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;字符串的判断一定要用 equals：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; str1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;lessone&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; str2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;lessone&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 重用了同一块内存&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str1&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;str2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;         &lt;span class=&#34;token comment&#34;&gt;//true 地址相同&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;//true 内容相同&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; str3 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;111&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; str4 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;111&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str1&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;str2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;         &lt;span class=&#34;token comment&#34;&gt;//false 判断的是地址，地址不同&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;//true String 中重写了 equals，用于判断内容是否相同&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;toString（object 提供的方法）：对一个对象字符串的表示形式，JAVA 官方推荐重写这个方法
&lt;ul&gt;
&lt;li&gt;直接打印对象会默认执行 toString 方法&lt;/li&gt;
&lt;li&gt;默认的 toString 返回：&lt;em&gt;包名 + 类名 @内存地址&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;instanceof&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#instanceof&#34;&gt;#&lt;/a&gt; instanceof&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;instanceof 关键字：判断 xxx 对象是否是 xxx 类型的&lt;/li&gt;
&lt;li&gt;用法：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ani &lt;span class=&#34;token keyword&#34;&gt;instanceof&lt;/span&gt; cat&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// ...&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;参数传递&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参数传递&#34;&gt;#&lt;/a&gt; 参数传递&lt;/h1&gt;
&lt;p&gt;参数传递包括值传递和引用传递，java 使用的是值传递&lt;/p&gt;
&lt;h2 id=&#34;值传递&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#值传递&#34;&gt;#&lt;/a&gt; 值传递&lt;/h2&gt;
&lt;p&gt;把变量的值作为参数传递&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Test&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;change&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;change&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 结果为 10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;把变量作为参数传递&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Test&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;change2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Cat&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;NewName&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 创建一个新的猫，change.c 指向新猫的地址，外面的 c 仍指向原来的猫的地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 运行完后 change.c 被回收，新猫被回收&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;Cat&lt;/span&gt; c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;OriginalName&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;change2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 传入 c 的值，即原来的猫的地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// OriginalName&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Test&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;change3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Cat&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    c&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;NewNewName&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;//c 为原来猫的地址，故修改成功&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;Cat&lt;/span&gt; c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;OriginalName&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;change3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 传入 c 的值，即原来的猫的地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//NewNewName&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="Java学习" scheme="https://less1.top/categories/Java%E5%AD%A6%E4%B9%A0/" />
        <category term="Java" scheme="https://less1.top/tags/Java/" />
        <category term="面向对象" scheme="https://less1.top/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/" />
        <updated>2024-08-22T09:20:46.000Z</updated>
    </entry>
    <entry>
        <id>https://less1.top/Gu-Mu-Cang-Cang/</id>
        <title>[随笔] July</title>
        <link rel="alternate" href="https://less1.top/Gu-Mu-Cang-Cang/"/>
        <content type="html">&lt;h1 id=&#34;quzhou-experimental-school&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quzhou-experimental-school&#34;&gt;#&lt;/a&gt; Quzhou Experimental School&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;1.jpg&#34; alt=&#34;sky&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;2.jpg&#34; alt=&#34;playground&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;3.jpg&#34; alt=&#34;flyover&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;4.jpg&#34; alt=&#34;ling lake&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;misc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#misc&#34;&gt;#&lt;/a&gt; misc&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;misc1.jpg&#34; alt=&#34; &#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;misc2.jpg&#34; alt=&#34; &#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;misc3.jpg&#34; alt=&#34; &#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;misc4.jpg&#34; alt=&#34; &#34; /&gt;&lt;/p&gt;
</content>
        <category term="随笔" scheme="https://less1.top/categories/%E9%9A%8F%E7%AC%94/" />
        <category term="衢州市实验学校" scheme="https://less1.top/tags/%E8%A1%A2%E5%B7%9E%E5%B8%82%E5%AE%9E%E9%AA%8C%E5%AD%A6%E6%A0%A1/" />
        <category term="随笔" scheme="https://less1.top/tags/%E9%9A%8F%E7%AC%94/" />
        <updated>2024-08-01T07:04:06.000Z</updated>
    </entry>
    <entry>
        <id>https://less1.top/OpenHarmony-Build-Error-Fix/</id>
        <title>[报错修复]OpenHarmony编译报错修复</title>
        <link rel="alternate" href="https://less1.top/OpenHarmony-Build-Error-Fix/"/>
        <content type="html">&lt;h1 id=&#34;gn-phase-failed修复&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gn-phase-failed修复&#34;&gt;#&lt;/a&gt; GN phase failed 修复&lt;/h1&gt;
&lt;h2 id=&#34;报错命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#报错命令&#34;&gt;#&lt;/a&gt; 报错命令&lt;/h2&gt;
&lt;p&gt;使用 OpenHarmony 源码编译，执行下面命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./build.sh ……
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hb build
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;报错信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#报错信息&#34;&gt;#&lt;/a&gt; 报错信息&lt;/h2&gt;
&lt;p&gt;程序报错提示下面的信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[OHOS INFO] ERROR at //build/config/BUILDCONFIG.gn:84:15: Could not read file.
[OHOS INFO] read_file(&amp;quot;$&amp;#123;preloader_output_dir&amp;#125;/build_config.json&amp;quot;, &amp;quot;json&amp;quot;)
[OHOS INFO] ^------------------------------------------
[OHOS INFO] I resolved this to &amp;quot;~/桌面/.../out/preloader/build_config.json&amp;quot;.
[OHOS INFO] root_out_dir=//out/xxxxx
[OHOS INFO] root_build_dir=//out/xxxxx
[OHOS INFO] root_gen_dir=//out/xxxxx/gen
[OHOS INFO] current_toolchain=
[OHOS ERROR] Traceback (most recent call last):
[OHOS ERROR] File &amp;quot;~/桌面/.../build/hb/services/gn.py&amp;quot;, line 176, in _execute_gn_gen_cmd
[OHOS ERROR] SystemUtil.exec_command(gn_gen_cmd, self.config.log_path)
[OHOS ERROR] File &amp;quot;~/桌面/xxxxx/build/hb/util/system_util.py&amp;quot;, line 63, in exec_command
[OHOS ERROR] raise OHOSException(
[OHOS ERROR] exceptions.ohos_exception.OHOSException: Please check build log in ~/桌面/.../out/.../build.log
[OHOS ERROR]
[OHOS ERROR] During handling of the above exception, another exception occurred:
[OHOS ERROR]
[OHOS ERROR] Traceback (most recent call last):
[OHOS ERROR] File &amp;quot;~/桌面/.../build/hb/containers/status.py&amp;quot;, line 47, in wrapper
[OHOS ERROR] return func(args, **kwargs)
[OHOS ERROR] File &amp;quot;~/桌面/.../build/hb/services/gn.py&amp;quot;, line 178, in _execute_gn_gen_cmd
[OHOS ERROR] raise OHOSException(&#39;GN phase failed&#39;, &#39;3000&#39;)
[OHOS ERROR] exceptions.ohos_exception.OHOSException: GN phase failed
[OHOS ERROR]
[OHOS ERROR] Code: 3000
[OHOS ERROR]
[OHOS ERROR] Reason: GN phase failed
[OHOS ERROR]
[OHOS ERROR] Solution: Please check the compile log at out/&amp;#123;compiling product&amp;#125;/build.log, If you could analyze build logs.
[OHOS ERROR] Or you can try the following steps to solve this problem:
[OHOS ERROR] 1. cd to OHOS root path
[OHOS ERROR] 2. run &#39;hb clean --all&#39; or &#39;rm -rf out build/resources/args/.json&#39;.
[OHOS ERROR] 3. repo sync
[OHOS ERROR] 4. repo forall -c &#39;git lfs pull&#39;
[OHOS ERROR] 5. bash build/prebuilts_download.sh
[OHOS ERROR] 6. rebuild your product or component
[OHOS ERROR]
[OHOS ERROR] If you still cannot solve this problem, you could post this problem on:
[OHOS ERROR] https://gitee.com/openharmony/build/issues
[OHOS ERROR]
=====build error=====
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;解决方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决方法&#34;&gt;#&lt;/a&gt; 解决方法&lt;/h2&gt;
&lt;p&gt;习惯把下载的文件放在桌面上了，路径里面带了中文。。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;换成英文路径&lt;/strong&gt;即可&lt;/p&gt;
&lt;p&gt;&lt;s&gt;究极低级问题，本来不想写到 blog 里的，但是网上搜不到解决方法，甚至有人在仓库下提了这个问题的 issue，开发者也没回，还是决定写一下&lt;/s&gt;&lt;/p&gt;
</content>
        <category term="OpenHarmony学习" scheme="https://less1.top/categories/OpenHarmony%E5%AD%A6%E4%B9%A0/" />
        <category term="OpenHarmony" scheme="https://less1.top/tags/OpenHarmony/" />
        <category term="编译" scheme="https://less1.top/tags/%E7%BC%96%E8%AF%91/" />
        <category term="报错修复" scheme="https://less1.top/tags/%E6%8A%A5%E9%94%99%E4%BF%AE%E5%A4%8D/" />
        <updated>2024-03-21T12:50:14.000Z</updated>
    </entry>
    <entry>
        <id>https://less1.top/Software-Security-Course-Design/</id>
        <title>[HOOK]基于API HOOK的异常行为检测软件开发</title>
        <link rel="alternate" href="https://less1.top/Software-Security-Course-Design/"/>
        <content type="html">&lt;h1 id=&#34;项目说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目说明&#34;&gt;#&lt;/a&gt; 项目说明&lt;/h1&gt;
&lt;p&gt;对于无源码情况下分析样本程序的行为，有多种方法。其中，基于 API HOOK 的方法是本次软件安全课程设计的任务。&lt;/p&gt;
&lt;p&gt;APIGuard 是我们设计的一款轻量级的、基于 Detours 库开发的异常行为检测软件。它的前端采用&lt;strong&gt; MFC&lt;/strong&gt; 开发，后端依赖&lt;strong&gt; Detours&lt;/strong&gt; 库，完成 dll 注射以及 Win API 截获的功能。&lt;/p&gt;
&lt;p&gt;其具体功能如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;APIGuard 能够完成对大部分&lt;strong&gt;弹窗、堆操作、文件操作、注册表操作、socket 操作和线程进程&lt;/strong&gt;操作完成截获，并将调用的参数告知使用者。&lt;/li&gt;
&lt;li&gt;APIGuard 能够选择是否&lt;strong&gt;提示&lt;/strong&gt;弹窗、堆操作、文件操作、注册表操作和 socket 操作的截获。&lt;/li&gt;
&lt;li&gt;APIGuard 能够告知用户程序企图创建进程并运行的程序名，并&lt;strong&gt;让用户选择是否运行&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;APIGuard 能够在截获的基础上完成一些&lt;strong&gt;异常行为分析&lt;/strong&gt;，如程序自我复制、堆二次释放和创建恶意进程等。&lt;/li&gt;
&lt;li&gt;一些基本的软件信息，包括版权所有（&lt;s&gt;也许没用&lt;/s&gt;）、联系作者和开源仓库跳转等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;环境搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环境搭建&#34;&gt;#&lt;/a&gt; 环境搭建&lt;/h1&gt;
&lt;p&gt;你可以在&lt;em&gt;发行版&lt;/em&gt;中直接下载最新版 APIGuard，也可以搭建环境参与 APIGuard 开发：&lt;/p&gt;
&lt;p&gt;一些基本的操作流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载安装 Visual Studio 2022；&lt;/li&gt;
&lt;li&gt;下载 Detours 4.0.1 源码，并完成编译；&lt;/li&gt;
&lt;li&gt;打开 OurWork/Dll1/Dll1.sln 和 OurWork / 注射器 /injector/injector.sln，选择 “&lt;em&gt;项目&lt;/em&gt;”-“&lt;em&gt;属性&lt;/em&gt;”-“&lt;em&gt;VC++ 目录&lt;/em&gt;”，修改&lt;em&gt;包含目录&lt;/em&gt;和&lt;em&gt;库目录&lt;/em&gt;为你的 Detours 4.0.1 编译结果路径。&lt;/li&gt;
&lt;li&gt;参与开发，丰富功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;使用说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用说明&#34;&gt;#&lt;/a&gt; 使用说明&lt;/h1&gt;
&lt;p&gt;我们&lt;em&gt;&lt;strong&gt;强烈建议&lt;/strong&gt;&lt;/em&gt;在&lt;strong&gt;使用时关闭搜狗拼音&lt;/strong&gt;，它会造成程序截获到未知原因的 “HeapFree” 等行为。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image.png&#34; alt=&#34;主UI&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择 “&lt;em&gt;文件&lt;/em&gt;” - “&lt;em&gt;打开&lt;/em&gt;” 运行可疑程序并开始截获。（如果你暂时不知道该运行什么，我们在 OurWork/app/app 中给出了一个测试程序）&lt;/li&gt;
&lt;li&gt;程序会在&lt;em&gt; Functions 框&lt;/em&gt;中输出截获到的函数&lt;/li&gt;
&lt;li&gt;单击&lt;em&gt; Functions 框&lt;/em&gt;，程序会在&lt;em&gt; Details 框&lt;/em&gt;中显示调用参数、调用时间等详细信息&lt;/li&gt;
&lt;li&gt;当截获到一些潜在的危险行为，程序会在&lt;em&gt; Warnings 框&lt;/em&gt;中输出提示信息&lt;/li&gt;
&lt;li&gt;选择 “&lt;em&gt;帮助 (H)&lt;/em&gt;” 查看版权信息、联系我们。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;开源仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开源仓库&#34;&gt;#&lt;/a&gt; 开源仓库&lt;/h1&gt;
&lt;p&gt;项目的开源仓库链接：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;lessone&#34; style=&#34;--block-color:#9d5b8b;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vbGVzcy1vbmUvaHVzdC1kZXRvdXJz&#34; data-background-image=&#34;/images/avatar.jpg&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vbGVzcy1vbmUvaHVzdC1kZXRvdXJz&#34;&gt;APIGuard&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;APIGuard开源仓库&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
</content>
        <category term="HUST本科学习" scheme="https://less1.top/categories/HUST%E6%9C%AC%E7%A7%91%E5%AD%A6%E4%B9%A0/" />
        <category term="HUST" scheme="https://less1.top/tags/HUST/" />
        <category term="API HOOK" scheme="https://less1.top/tags/API-HOOK/" />
        <category term="课程设计" scheme="https://less1.top/tags/%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/" />
        <category term="异常行为检测" scheme="https://less1.top/tags/%E5%BC%82%E5%B8%B8%E8%A1%8C%E4%B8%BA%E6%A3%80%E6%B5%8B/" />
        <updated>2024-03-21T02:33:38.000Z</updated>
    </entry>
    <entry>
        <id>https://less1.top/GameSecurityFinalWork/</id>
        <title>[逆向分析]ShooterClient外挂分析</title>
        <link rel="alternate" href="https://less1.top/GameSecurityFinalWork/"/>
        <content type="html">&lt;h1 id=&#34;shooterclient游戏分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#shooterclient游戏分析&#34;&gt;#&lt;/a&gt; ShooterClient 游戏分析&lt;/h1&gt;
&lt;h2 id=&#34;查看游戏引擎&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看游戏引擎&#34;&gt;#&lt;/a&gt; 查看游戏引擎&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ShooterClient 游戏分析部分的 UWorld、Gname 和 GObject 分析参考了：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi90aHJlYWQtMTY5NjgxNi0xLTEuaHRtbA==&#34;&gt;https://www.52pojie.cn/thread-1696816-1-1.html&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;右键查看 ShooterClient.exe 属性，点击详细信息。&lt;br /&gt;
&lt;img data-src=&#34;image.png&#34; alt=&#34;ShooterClient.exe属性详细信息截图&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以得知 ShooterClient 是由 Epic Games 的 Unreal Engine 4.22.2.0 开发的。&lt;/p&gt;
&lt;h2 id=&#34;uworld分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#uworld分析&#34;&gt;#&lt;/a&gt; UWorld 分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分析查找 UWorld，用 x64dbg 附加到游戏，右键 “搜索”—“所有模块”—“字符串”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按下 “Ctrl+F”，搜索字符串&lt;strong&gt; SeamlessTravel FlushLevelStreaming&lt;/strong&gt;。&lt;br /&gt;
&lt;img data-src=&#34;image-1.png&#34; alt=&#34;查找字符串结果图&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双击跳转到该地址，向上翻，找到语句‘btr edx,0x7’，再向上翻找到第一个基地址，即语句 &#39;mov qword ptr ds:[7FF76DFC1060]&#39; 中的地址即为 UWorld。&lt;br /&gt;
&lt;img data-src=&#34;image-2.png&#34; alt=&#34;UWorld分析结果图&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分析可知，UWorld 的地址为：&lt;br /&gt;
&lt;strong&gt;UWorld = ShooterClient.exe + 0x2F71060&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;gname分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gname分析&#34;&gt;#&lt;/a&gt; Gname 分析&lt;/h2&gt;
&lt;p&gt;下面开始分析 GName。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将 Cheat Engine 附加到游戏，搜索字符串&lt;strong&gt; ByteProperty&lt;/strong&gt;。&lt;br /&gt;
&lt;img data-src=&#34;image-3.png&#34; alt=&#34;查找字符串结果图&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;依次选择每个地址，查看附近内存，选择附近内存包含 “None”“IntProperty” 等字符串的地址，最终锁定为地址‘1F32E080024’。&lt;br /&gt;
&lt;img data-src=&#34;image-4.png&#34; alt=&#34;ByteProperty附近内存截图&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分析字符串之间的间隔，选择该片内存地址的第一个地址，即 1F32E080000，在 CE 中搜索这个地址。&lt;br /&gt;
&lt;img data-src=&#34;image-5.png&#34; alt=&#34;搜索地址1F32E080000结果图&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;继续选择地址 1F32E040000 作为新的扫描值，搜索地址。&lt;br /&gt;
&lt;img data-src=&#34;image-6.png&#34; alt=&#34;搜索地址1F32E040000结果图&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;继续选择地址 1F32E030080 作为新的扫描值，搜索地址。&lt;br /&gt;
&lt;img data-src=&#34;image-7.png&#34; alt=&#34;GName分析结果图&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此时得到两个偏移地址，先暂存，后续代码验证发现 “ShooterClient.exe+2E6E0C0” 为 GName 偏移结果。故 GName 地址为：&lt;strong&gt;GName = ShooterClient.exe + 2E6E0C0&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;gobject分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gobject分析&#34;&gt;#&lt;/a&gt; GObject 分析&lt;/h2&gt;
&lt;p&gt;下面开始分析 Gobject。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用 x64dbg 附加到游戏，搜索字符串 “CanvasObject”。&lt;br /&gt;
&lt;img data-src=&#34;image-8.png&#34; alt=&#34;字符串搜索结果图&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双击跳转到该地址，向上翻，找到语句‘sar eax,10’。这一条下面的基地址就是 GObject。&lt;br /&gt;
&lt;img data-src=&#34;image-9.png&#34; alt=&#34;GObject分析结果图&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;故 GObject 结果为：&lt;strong&gt;GObject = ShooterClient.exe + 2B8CA70&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;分析实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分析实现&#34;&gt;#&lt;/a&gt; 分析实现&lt;/h2&gt;
&lt;h3 id=&#34;sdk-dump&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sdk-dump&#34;&gt;#&lt;/a&gt; sdk dump&lt;/h3&gt;
&lt;p&gt;采用工具：UnrealEngineSDKGenerator 进行 dump 生成 sdk。工具如图所示。&lt;br /&gt;
&lt;img data-src=&#34;image-10.png&#34; alt=&#34;dump工具截图&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在游戏配置文件中修改 Gnames、GObjects 等参数后进行生成。&lt;br /&gt;
&lt;img data-src=&#34;image-11.png&#34; alt=&#34;工具dump部分结果截图&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;代码验证&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码验证&#34;&gt;#&lt;/a&gt; 代码验证&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;windows.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;string.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;thread&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;cstdint&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;tlhelp32.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name&#34;&gt;GameProcessName&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;ShooterClient.exe&#34;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Memory&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;string processName&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    HANDLE processHandle&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;Memory&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;processHandle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;SetProcessName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;string&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	processName &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	HANDLE hSnapshot &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;CreateToolhelp32Snapshot&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;TH32CS_SNAPPROCESS&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;hSnapshot&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	    PROCESSENTRY32 pe32&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	    pe32&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dwSize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;PROCESSENTRY32&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;Process32First&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;hSnapshot&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;pe32&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	        &lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;strcmp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pe32&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;szExeFile&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; processName&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;c_str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	                processHandle &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;OpenProcess&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;PROCESS_ALL_ACCESS&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; FALSE&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; pe32&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;th32ProcessID&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	                &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;Process32Next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;hSnapshot&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;pe32&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	    &lt;span class=&#34;token function&#34;&gt;CloseHandle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;hSnapshot&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    T &lt;span class=&#34;token function&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt; address&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	T value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;processHandle&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	    SIZE_T bytesRead&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	    &lt;span class=&#34;token function&#34;&gt;ReadProcessMemory&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;processHandle&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;LPCVOID&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;address&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;T&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;bytesRead&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;GetProcessBaseAddress&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt; baseAddress &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	HANDLE hSnapshot &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;CreateToolhelp32Snapshot&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;TH32CS_SNAPMODULE &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; TH32CS_SNAPMODULE32&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;GetProcessId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;processHandle&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;hSnapshot &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; INVALID_HANDLE_VALUE&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	    MODULEENTRY32 moduleEntry&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	    moduleEntry&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dwSize &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;MODULEENTRY32&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;Module32First&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;hSnapshot&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;moduleEntry&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	        &lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;strcmp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;moduleEntry&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;szModule&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; processName&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;c_str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	                baseAddress &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;moduleEntry&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;modBaseAddr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	                &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;Module32Next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;hSnapshot&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;moduleEntry&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	    &lt;span class=&#34;token function&#34;&gt;CloseHandle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;hSnapshot&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; baseAddress&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ReadBuffer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt; address&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; buffer&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; SIZE_T bufferSize&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;processHandle &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; buffer &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	    SIZE_T bytesRead&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ReadProcessMemory&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;processHandle&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;LPCVOID&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;address&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; buffer&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; bufferSize&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;bytesRead&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;Memory&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;processHandle&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;CloseHandle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;processHandle&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;84&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;85&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Memory&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; pMemory&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;86&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GlobalAddress&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;87&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt; BaseAddress&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;88&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt; GNames&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;89&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;90&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;91&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt; GlobalAddress&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;BaseAddress&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;92&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt; GlobalAddress&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;GNames&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;93&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ShooterClient_Loop&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;94&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;95&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;string &lt;span class=&#34;token function&#34;&gt;GetNameFormId_&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;uint32_t&lt;/span&gt; Id&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;96&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; ChunkIndex &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Id &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x4000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;97&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; WithinChunkIndex &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Id &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x4000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;98&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt; NamePtr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pMemory&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;GlobalAddress&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;GNames &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x8&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; ChunkIndex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;99&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt; FName &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pMemory&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;NamePtr &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x8&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; WithinChunkIndex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;100&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;101&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	CHAR name&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;102&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	pMemory&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;ReadBuffer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;FName&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0xc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;103&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;104&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;105&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;106&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;107&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ShooterClient_Loop&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;108&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt; UWorld &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pMemory&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;GlobalAddress&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;BaseAddress &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x2F71060&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;109&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt; ULeval &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pMemory&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;UWorld &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;110&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt; Actor &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pMemory&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ULeval &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x98&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;111&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;uint32_t&lt;/span&gt; Actor_Count &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pMemory&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;uint32_t&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ULeval &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x98&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;112&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;113&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Actor_Count&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;114&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt; pObject &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pMemory&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Actor &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;115&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;uint32_t&lt;/span&gt; ObjectId &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pMemory&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;uint32_t&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pObject &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x18&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;116&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//		std::cout&amp;lt;&amp;lt;&#34;pObject: &#34;&amp;lt;&amp;lt;pObject&amp;lt;&amp;lt;&#39;\n&#39;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;117&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;string ObjectName &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;GetNameFormId_&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ObjectId&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;118&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//		std::cout&amp;lt;&amp;lt;&#34;ObjectName: &#34;&amp;lt;&amp;lt;ObjectName&amp;lt;&amp;lt;&#39;\n&#39;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;119&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;ObjectName&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;compare&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;BotPawn_C&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;120&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    		&lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt; botPositionAddress&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;121&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    		FLOAT bot&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;122&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;123&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pMemory&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;ReadBuffer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;pObject &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x3A0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;botPositionAddress&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;botPositionAddress&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;124&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pMemory&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;ReadBuffer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;botPositionAddress &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x1A0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; bot&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;bot&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;125&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            		&lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;bot location: [x:%f, y:%f, z:%f]\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; bot&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; bot&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; bot&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;126&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;127&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;128&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;129&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;130&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;131&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;132&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;133&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	pMemory &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; Memory&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;134&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	pMemory&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;SetProcessName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;GameProcessName&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;135&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	GlobalAddress&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;BaseAddress &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pMemory&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;GetProcessBaseAddress&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;136&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	GlobalAddress&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;GNames &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pMemory&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;uint64_t&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;GlobalAddress&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;BaseAddress &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x2e6e0c0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;137&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;138&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token function&#34;&gt;ShooterClient_Loop&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;139&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token function&#34;&gt;Sleep&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;140&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;141&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;142&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;ShooterClient_Loop () 遍历游戏对象的列表，检查它们的名称是否与 &amp;quot;BotPawn_C&amp;quot; 匹配，如果是，则提取并打印它们的位置。&lt;/li&gt;
&lt;li&gt;Memory 类负责处理与内存相关的操作。其中：
&lt;ul&gt;
&lt;li&gt;SetProcessName 函数设置进程名称，并尝试使用 Windows ToolHelp 函数打开对指定进程的句柄；&lt;/li&gt;
&lt;li&gt;Read 函数从指定地址的进程内存中读取指定类型的值；&lt;/li&gt;
&lt;li&gt;GetProcessBaseAddress 函数通过列举模块来检索进程的基址；&lt;/li&gt;
&lt;li&gt;ReadBuffer 函数从进程内存中读取数据缓冲区。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实现结果&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现结果&#34;&gt;#&lt;/a&gt; 实现结果&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先打印所有 Object。&lt;br /&gt;
&lt;img data-src=&#34;image-12.png&#34; alt=&#34;编写程序打印Object结果图&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尝试每隔 1 秒打印机器人位置坐标。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div id=&#34;dplayer0&#34; class=&#34;dplayer hexo-tag-dplayer-mark&#34; style=&#34;margin-bottom: 20px;&#34;&gt;&lt;/div&gt;&lt;script&gt;(function(){var player = new DPlayer({&#34;container&#34;:document.getElementById(&#34;dplayer0&#34;),&#34;loop&#34;:&#34;yes&#34;,&#34;screenshot&#34;:&#34;yes&#34;,&#34;video&#34;:{&#34;url&#34;:&#34;/cheat.mkv&#34;},&#34;danmaku&#34;:{&#34;id&#34;:&#34;someid&#34;,&#34;api&#34;:&#34;https://api.prprpr.me/dplayer/&#34;,&#34;addition&#34;:[&#34;/some.json&#34;]}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);player.on(&#34;loadstart&#34;,function(){console.log(&#34;loadstart&#34;)})})()&lt;/script&gt;&lt;/p&gt;
&lt;h1 id=&#34;hack分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hack分析&#34;&gt;#&lt;/a&gt; hack 分析&lt;/h1&gt;
&lt;h2 id=&#34;detect-it-easy查壳&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#detect-it-easy查壳&#34;&gt;#&lt;/a&gt; Detect it easy 查壳&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用 Detect It Easy 查看 hack.exe 文件加壳情况。如图 1 所示。&lt;br /&gt;
&lt;img data-src=&#34;image-13.png&#34; alt=&#34;查壳&#34; /&gt;&lt;/li&gt;
&lt;li&gt;可知，hack.exe 通过 VMProtect 加壳。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;导入函数分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#导入函数分析&#34;&gt;#&lt;/a&gt; 导入函数分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用 ida64 查看 imports 导入函数，分析可能对调试有帮助的函数。&lt;br /&gt;
&lt;img data-src=&#34;image-14.png&#34; alt=&#34;Ida部分导入函数截图&#34; /&gt;&lt;/li&gt;
&lt;li&gt;可以看到，导入函数中包括了：
&lt;ul&gt;
&lt;li&gt;反调试：
&lt;ul&gt;
&lt;li&gt;IsDebuggerPresent	 检测是否在调试器下运行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;进程和线程操作：
&lt;ul&gt;
&lt;li&gt;GetCurrentProcess, GetCurrentProcessId: 获取当前进程及其 ID。&lt;/li&gt;
&lt;li&gt;CreateToolhelp32Snapshot, Process32First, Process32Next: 进程遍历函数。&lt;/li&gt;
&lt;li&gt;OpenProcess, TerminateProcess: 打开或终止进程。&lt;/li&gt;
&lt;li&gt;CreateEventW, SetEvent, WaitForSingleObject: 事件操作函数。&lt;/li&gt;
&lt;li&gt;GetThreadLocale, GetUserDefaultLCID, GetSystemDefaultLCID: 处理地区和语言信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存和堆操作：
&lt;ul&gt;
&lt;li&gt;GlobalAlloc, GlobalFree, GlobalLock, GlobalUnlock: 全局内存操作函数。&lt;/li&gt;
&lt;li&gt;HeapAlloc, HeapFree: 堆内存操作函数。&lt;/li&gt;
&lt;li&gt;LocalAlloc, LocalFree: 本地内存操作函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;鼠标操作：
&lt;ul&gt;
&lt;li&gt;SetCursorPos, GetCursorPos, SetCapture, ReleaseCapture: 鼠标操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过导入函数，猜测 hack.exe 主要通过：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 CreateToolhelp32Snapshot、Process32First 和 Process32Next 等函数&lt;em&gt;遍历系统进程，找到游戏进程&lt;/em&gt;；&lt;/li&gt;
&lt;li&gt;使用 ReadProcessMemory 函数&lt;em&gt;读取游戏进程的内存，包括机器人的位置信息&lt;/em&gt;；&lt;/li&gt;
&lt;li&gt;使用 GetAsyncKeyState &lt;em&gt;获取按键状态，判断是否按下鼠标右键&lt;/em&gt;；&lt;/li&gt;
&lt;li&gt;如果获取鼠标按下右键，则调用 SetCursorPos &lt;em&gt;设置鼠标位置，用于自动瞄准&lt;/em&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;x64dbg调试查找oep&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#x64dbg调试查找oep&#34;&gt;#&lt;/a&gt; x64dbg 调试查找 OEP&lt;/h2&gt;
&lt;h3 id=&#34;方法一&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法一&#34;&gt;#&lt;/a&gt; 方法一&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用 x64dbg 调试 hack.exe，使用 ScyllaHide 插件绕过反调试，将 Loaded 选项设置为 VMProtect x86/x64。&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;image-15.png&#34; alt=&#34;ScyllaHide插件绕过反调试设置&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;一次‘运行’后，hack.exe 来到 Entrypoint，紧接着三次‘运行’，hack.exe 在三次‘nop’指令后正常运行。&lt;br /&gt;
&lt;img data-src=&#34;image-16.png&#34; alt=&#34;三次nop后正常运行&#34; /&gt;&lt;/li&gt;
&lt;li&gt;从 Entrypoint 处重新开始调试，一直单步步过，直到语句‘pushfq’，如所示。&lt;br /&gt;
&lt;img data-src=&#34;image-17.png&#34; alt=&#34;步过到pushfq语句&#34; /&gt;&lt;/li&gt;
&lt;li&gt;发现只有 RSP 寄存器发生变化，符合 ESP 脱壳定律，右键点击 RSP，选择 “在内存窗口中转到”，对此时的 RSP 值 “14FF00” 下硬件访问断点。&lt;br /&gt;
&lt;img data-src=&#34;image-18.png&#34; alt=&#34;对栈顶下断点截图&#34; /&gt;&lt;/li&gt;
&lt;li&gt;一直 F9，经过三次 nop 和多次无关指令后停留在下图所示处。&lt;br /&gt;
&lt;img data-src=&#34;image-19.png&#34; alt=&#34;多次F9后停留位置&#34; /&gt;&lt;/li&gt;
&lt;li&gt;发现此时 RSP（14FF08）接近 pushfq 时的（14FF00），且在当前代码上方找到 popfq。&lt;/li&gt;
&lt;li&gt;继续单步步入，程序 jmp 到图 8 所示位置，观察这部分代码：&lt;br /&gt;
&lt;strong&gt;sub rsp 28” + call + “add rsp 28，为 Visual Studio 程序的常见脱壳入口点，故得到 OEP，即 140052188。&lt;/strong&gt;&lt;br /&gt;
&lt;img data-src=&#34;image-20.png&#34; alt=&#34;方法一程序OEP位置截图&#34; /&gt;&lt;br /&gt;
常见脱壳入口点：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC85NmE2ZGQ2YTBjZTUlRTMlODAlODI=&#34;&gt;https://www.jianshu.com/p/96a6dd6a0ce5。&lt;/span&gt;&lt;br /&gt;
&lt;img data-src=&#34;image-21.png&#34; alt=&#34;脱壳入口特征&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;方法二&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法二&#34;&gt;#&lt;/a&gt; 方法二&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;根据 2.2 导入函数分析的结果，选择‘CreateToolhelp32Snapshot’作为断点进行调试最合适。在 x64dbg 中按下‘Ctrl + G’，输入‘CreateToolhelp32Snapshot’，转到地址，设置断点，结果如下图所示。&lt;br /&gt;
&lt;img data-src=&#34;image-22.png&#34; alt=&#34;为‘CreateToolhelp32Snapshot’创建断点&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;继续调试，发现程序会两次停留在‘CreateToolhelp32Snapshot’处的断点，其中第二次断下时，RAX 的值为 “ShooterClient.exe”，故猜测此次为查找游戏进程。&lt;br /&gt;
&lt;img data-src=&#34;image-24.png&#34; alt=&#34;根据第二次断下时RAX的值判断为查找游戏进程&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看此时的调用堆栈，如下图所示。&lt;br /&gt;
&lt;img data-src=&#34;image-25.png&#34; alt=&#34;第二次断下时的堆栈调用截图&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据此时的断点位置（kernel32.00007FF88C856AF0），锁定在 33956 线程，如图 13 所示。&lt;br /&gt;
&lt;img data-src=&#34;image-26.png&#34; alt=&#34;33956线程堆栈调用截图&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从下往上查找第一个以 hack 为基地址的地址，锁定在 hack.0000000140052118，双击跳转到该地址。&lt;br /&gt;
&lt;img data-src=&#34;image-27.png&#34; alt=&#34;主程序进调用的地址截图&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;向上找到程序入口，找到该片段的第一条指令，地址为 14005200C，如下图所示。&lt;br /&gt;
&lt;img data-src=&#34;image-28.png&#34; alt=&#34;该片段第一条指令截图&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单击右键，查找引用 — 选中的地址。&lt;br /&gt;
&lt;img data-src=&#34;image-29.png&#34; alt=&#34;查找引用截图&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;image-30.png&#34; alt=&#34;查找引用结果截图&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找到地址，双击进入查看，同样能找到 OEP。&lt;br /&gt;
&lt;img data-src=&#34;image-31.png&#34; alt=&#34;方法二查找OEP结果截图&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;脱壳&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#脱壳&#34;&gt;#&lt;/a&gt; 脱壳&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用 x64dbg 自带的 scylla 插件 dump 脱壳。点击‘dump’，再点击 IAT Autosearch，最后点击 Get Imports，结果如下图所示。&lt;br /&gt;
&lt;img data-src=&#34;image-32.png&#34; alt=&#34;Scylla dump截图&#34; /&gt;&lt;/li&gt;
&lt;li&gt;点击‘Fix Dump’，得到脱壳后的程序 hack_dump_SCY.exe。&lt;/li&gt;
&lt;li&gt;使用 DIE 查看脱壳结果，如下图所示。&lt;br /&gt;
&lt;img data-src=&#34;image-33.png&#34; alt=&#34;DIE查看hack_dump_SCY.exe&#34; /&gt;&lt;/li&gt;
&lt;li&gt;说明脱壳成功，打开 hack_dump_SCY.exe，文件能正常运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;image-34.png&#34; alt=&#34;hack_dump_SCY.exe正常运行截图&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;ida分析脱壳后的文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ida分析脱壳后的文件&#34;&gt;#&lt;/a&gt; IDA 分析脱壳后的文件&lt;/h2&gt;
&lt;h3 id=&#34;main函数分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#main函数分析&#34;&gt;#&lt;/a&gt; main 函数分析&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;用 IDA 打开脱壳后的 hack_dump_SCY.exe，“Ctrl + F” 查找 main 函数，分析 main 函数逻辑。&lt;br /&gt;
&lt;img data-src=&#34;image-35.png&#34; alt=&#34;hack_dump_SCY.exe main函数&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;依次分析 main 中的主要代码，主要函数逻辑用注释标出。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; __cdecl &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; argc&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;argv&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;envp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;v3&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// rax&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  __int64 v4&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// rax&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;v5&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// rax&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;v6&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// rax&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;v7&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// rax&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  __int64 v8&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// rax&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;v9&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// rax&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  __int64 v10&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// rax&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; v12&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// [rsp+21h] [rbp-C7h] BYREF&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; v13&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// [rsp+22h] [rbp-C6h] BYREF&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; v14&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// [rsp+23h] [rbp-C5h] BYREF&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; v15&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// [rsp+24h] [rbp-C4h] BYREF&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; v16&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// [rsp+25h] [rbp-C3h] BYREF&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;v17&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// [rsp+28h] [rbp-C0h]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  __int64 v18&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// [rsp+30h] [rbp-B8h]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  LPCSTR lpWindowName&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// [rsp+38h] [rbp-B0h]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  LPCSTR lpClassName&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// [rsp+40h] [rbp-A8h]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  HWND hWnd&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// [rsp+48h] [rbp-A0h]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  __int64 v22&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// [rsp+50h] [rbp-98h]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;v23&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// [rsp+58h] [rbp-90h]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  __int64 v24&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// [rsp+60h] [rbp-88h]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  __int64 v25&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// [rsp+68h] [rbp-80h]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; v26&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// [rsp+70h] [rbp-78h] BYREF&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; v27&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// [rsp+7Bh] [rbp-6Dh] BYREF&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; v28&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// [rsp+88h] [rbp-60h] BYREF&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; v29&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// [rsp+96h] [rbp-52h] BYREF&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; v30&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// [rsp+A8h] [rbp-40h] BYREF&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; v31&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// [rsp+C0h] [rbp-28h] BYREF&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  v3 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sub_1400036B0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__int64&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;v12&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; v29&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;// 读取 th32ProcessID 解混淆前的数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  v4 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sub_140003920&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__int64&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;v3&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;              &lt;span class=&#34;token comment&#34;&gt;// 解混淆得到 &#34;ShooterClient.exe&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  th32ProcessID &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sub_140001920&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;v4&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;            &lt;span class=&#34;token comment&#34;&gt;// 获取游戏进程的 ID&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; __int8&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sub_1400019C0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;th32ProcessID&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 检查游戏进程是否存在&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    v5 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sub_1400037F0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__int64&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;v13&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; v28&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;// 读取 lpWindowName 解混淆前的数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    lpWindowName &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;LPCSTR&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sub_1400038E0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__int64&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;v5&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 解混淆得到 &#34;ShooterGame&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    v6 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sub_140003750&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__int64&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;v14&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; v27&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;// 读取 lpClassName 解混淆前的数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    lpClassName &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;LPCSTR&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sub_140003900&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__int64&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;v6&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 解混淆得到 &#34;UnrealWindow&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    hWnd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;FindWindowA&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;lpClassName&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; lpWindowName&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 根据窗口类名和窗口标题查找游戏窗口的句柄&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;GetClientRect&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;hWnd&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;Rect&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                 &lt;span class=&#34;token comment&#34;&gt;// 获取游戏窗口的坐标&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    v7 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sub_1400036B0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__int64&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;v15&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; v30&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;// 读取数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    v8 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sub_140003920&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__int64&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;v7&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;            &lt;span class=&#34;token comment&#34;&gt;// 解混淆得到 &#34;ShooterClient.exe&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    qword_1400C12E0 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__int64&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sub_140001AA0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;v8&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 遍历进程，找到游戏模块的基址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    v17 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sub_140051874&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0xC0u&lt;/span&gt;i64&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;              &lt;span class=&#34;token comment&#34;&gt;// 申请一块内存&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; v17 &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;                                  &lt;span class=&#34;token comment&#34;&gt;// 申请内存成功&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      v18 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sub_14004C570&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__int64&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;v17&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;        &lt;span class=&#34;token comment&#34;&gt;// 初始化内存&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      v18 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;i64&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    v22 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; v18&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    qword_1400C12A8 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; v18&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                      &lt;span class=&#34;token comment&#34;&gt;// 将初始化的内存地址保存到全局变量中&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;_DWORD &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;v18 &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Rect&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;right &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; Rect&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;left&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 将窗口的宽度保存到内存中&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;_DWORD &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;qword_1400C12A8 &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Rect&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;bottom &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; Rect&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;top&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 将窗口的高度保存到内存中&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    v23 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;v31&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    v9 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sub_140003890&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__int64&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;v16&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; v26&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;// 读取混淆前数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    v10 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sub_1400038C0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__int64&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;v9&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;           &lt;span class=&#34;token comment&#34;&gt;// 解混淆得到 &#34;simhei.ttf&#34;(一种字体)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    v24 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sub_140003B10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__int64&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;v23&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; v10&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;// 设置字体为 simhei.ttf&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    v25 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; v24&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;sub_14004CD10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;qword_1400C12A8&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; v24&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__int64&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;sub_140003460&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 根据初始化的内存，以 simhei.ttf 为字体，创建一个窗口，实现作弊逻辑&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;sub_1400581EC&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;读取数据解混淆&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#读取数据解混淆&#34;&gt;#&lt;/a&gt; 读取数据解混淆&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hack.exe 对 th32ProcessID、lpWindowName 和 lpClassName 都做了混淆处理。且混淆方法相同，下面以 th32ProcessID 为例进行解混淆。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sub_1400036b0函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sub_1400036b0函数&#34;&gt;#&lt;/a&gt; sub_1400036B0 函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;sub_1400036B0 函数用于读取混淆后的数据，sub_140003920 函数用于解混淆。&lt;br /&gt;
&lt;img data-src=&#34;image-36.png&#34; alt=&#34;sub_1400036B0函数读取数据&#34; /&gt;&lt;/li&gt;
&lt;li&gt;查看 aKquthxl0kI 的值，如下图所示。&lt;br /&gt;
&lt;img data-src=&#34;image-37.png&#34; alt=&#34;aKquthxl0kI的值&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sub_140003920函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sub_140003920函数&#34;&gt;#&lt;/a&gt; sub_140003920 函数&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-38.png&#34; alt=&#34;sub_140003920函数调用sub_140003C40函数&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;image-39.png&#34; alt=&#34;sub_140003C40函数调用sub_140003640函数&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;image-40.png&#34; alt=&#34;sub_140003640函数截图&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sub_140003640 函数中包含解混淆关键代码。&lt;/li&gt;
&lt;li&gt;结合 sub_1400036B0 函数读取的数据，编写代码验证结果，结果如下图所示。&lt;br /&gt;
&lt;img data-src=&#34;image-41.png&#34; alt=&#34;th32ProcessID解混淆结果截图&#34; /&gt;&lt;/li&gt;
&lt;li&gt;分析可知，程序加密了读取的游戏进程名称，并在程序开始时通过解混淆得到该名称，加大了分析难度。&lt;/li&gt;
&lt;li&gt;其他解混淆结果如下图所示。&lt;br /&gt;
&lt;img data-src=&#34;image-42.png&#34; alt=&#34;其他解混淆结果截图&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;作弊逻辑实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作弊逻辑实现&#34;&gt;#&lt;/a&gt; 作弊逻辑实现&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;根据 main 函数分析，不难得出，程序解混淆、找到游戏进程、获取偏移后会开始实现主要作弊逻辑。并且，根据对 hack.exe 的使用，作弊会在弹窗、根据用户选择作弊功能后开始进行。因此，依次查看弹窗后的调用的函数，寻找作弊代码，最终锁定在 sub_140003460 () 函数。&lt;br /&gt;
&lt;img data-src=&#34;image-43.png&#34; alt=&#34;作弊函数&#34; /&gt;&lt;/li&gt;
&lt;li&gt;分别查看 sub_140001B50 () 和 sub_140003430 () 的代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sub_140001b50函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sub_140001b50函数&#34;&gt;#&lt;/a&gt; sub_140001B50 () 函数&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-44.png&#34; alt=&#34;sub_140001B50()函数代码截图&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 21 行程序调用 GetAsyncKeyState 函数，查看键码表可知，36 对应的是 HOME 键，打开 hack.exe，可以发现，HOME 键可以切换菜单的开关，故猜测该部分代码是实现菜单窗口逻辑。&lt;/li&gt;
&lt;li&gt;依次分析 if 中的函数，其主要逻辑和之前分析的解混淆相似，有两个取解混淆后的数据的函数，猜测是为了生成 UI。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sub_140003430函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sub_140003430函数&#34;&gt;#&lt;/a&gt; sub_140003430 () 函数&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-45.png&#34; alt=&#34;sub_140003430()函数代码截图&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依次查看这几个函数，在 sub_140002D70 () 中找到熟悉的代码片段。&lt;br /&gt;
&lt;img data-src=&#34;image-46.png&#34; alt=&#34;sub_140002D70()函数部分代码截图&#34; /&gt;&lt;/li&gt;
&lt;li&gt;55 行至 57 行的代码与 1.5.2 代码验证中的遍历对象代码形式相同，且偏移量 8*i 也相同，引起注意。仔细分析，可以发现该部分主要用于遍历所有的 Object 读取 name，与解混淆后的字符串比对，判断是否为机器人，若是机器人，则跳转执行后续操作。&lt;/li&gt;
&lt;li&gt;通过第 97 行 sub_140004350 () 中的 ReadProcessMemory 函数读取机器人坐标。&lt;/li&gt;
&lt;li&gt;外挂通过调用 ReadProcessMemory 函数，遍历所有 Actor 对象并过滤得到机器人的地址，再通过偏移得到各数据信息。&lt;/li&gt;
&lt;li&gt;再通过对将世界坐标系到视图坐标系的转换，将机器人坐标显示在屏幕上。&lt;br /&gt;
&lt;img data-src=&#34;image-48.png&#34; alt=&#34;自瞄部分代码&#34; /&gt;&lt;/li&gt;
&lt;li&gt;第 136 行检查鼠标右键状态，并在第 145 行再次读取坐标，说明该部分代码主要实现自瞄逻辑。读取到机器人坐标，映射在屏幕上，再转换玩家视角，实现自瞄功能。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="HUST本科学习" scheme="https://less1.top/categories/HUST%E6%9C%AC%E7%A7%91%E5%AD%A6%E4%B9%A0/" />
        <category term="HUST" scheme="https://less1.top/tags/HUST/" />
        <category term="游戏设计与安全" scheme="https://less1.top/tags/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%89%E5%85%A8/" />
        <category term="shooterclient" scheme="https://less1.top/tags/shooterclient/" />
        <category term="期末作业" scheme="https://less1.top/tags/%E6%9C%9F%E6%9C%AB%E4%BD%9C%E4%B8%9A/" />
        <category term="逆向分析" scheme="https://less1.top/tags/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/" />
        <updated>2024-02-21T07:17:54.000Z</updated>
    </entry>
    <entry>
        <id>https://less1.top/SoftwareSecurity/</id>
        <title>[课程复习]华中科技大学软件安全期末复习整理</title>
        <link rel="alternate" href="https://less1.top/SoftwareSecurity/"/>
        <content type="html">&lt;h1 id=&#34;第一章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一章&#34;&gt;#&lt;/a&gt; 第一章&lt;/h1&gt;
&lt;p&gt;网络空间的两个子空间：代码子空间、数据子空间&lt;/p&gt;
&lt;h2 id=&#34;为什么软件测试无法保证软件的安全性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么软件测试无法保证软件的安全性&#34;&gt;#&lt;/a&gt; 为什么软件测试无法保证软件的安全性？&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;由于软件系统规模越来越大，软件开发的进度要求越来越高，不可能在有限的时间内考虑所有安全方面的问题，即使进行了全方位的测试，也只能对所有的测试案例进行很小范围的覆盖。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关于测试，另一个问题是，全面的测试，一般情况下是针对所有可能出现的隐患进行测试，但是这需要对软件的隐患具有全方位的预见性。而在有些情况下，很多隐患是在运行期间才显露出来的，软件的开发者很难在开发阶段预见到所有可能出现的隐患，容易让测试陷入盲目。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;存在问题的代码案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存在问题的代码案例&#34;&gt;#&lt;/a&gt; 存在问题的代码案例&lt;/h2&gt;
&lt;h2 id=&#34;软件缺陷和错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件缺陷和错误&#34;&gt;#&lt;/a&gt; 软件缺陷和错误&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;错误是指软件实现过程出现的问题，大多数的错误可以很容易发现并修复，缓冲区溢出、死锁、不安全的系统调用、不完整的输入检测机制和不完善的数据保护措施等；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺陷是一个更深层次的问题，它往往产生于设计阶段并在代码中实例化且难于发现，如设计期间的功能划分问题等，这种问题带来的危害更大，但是不属于编程的范畴。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;软件安全问题产生的基本原因从软件工程客观角度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件安全问题产生的基本原因从软件工程客观角度&#34;&gt;#&lt;/a&gt; 软件安全问题产生的基本原因（从软件工程客观角度）&lt;/h2&gt;
&lt;p&gt;从软件工程客观角度讲，软件的安全性隐患又来源于以下几个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;软件复杂性和工程进度的平衡（为什么软件测试无法保证软件的安全性 1）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安全问题的不可预见性（为什么软件测试无法保证软件的安全性 2）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于软件需求的变动；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件组件之间的交互的不可预见性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;软件安全防护手段理解基本原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件安全防护手段理解基本原理&#34;&gt;#&lt;/a&gt; 软件安全防护手段（理解基本原理）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;安全设计与开发：在软件开发阶段尽量减少软件缺陷和漏洞的数量。微软：SDL 开发模式&lt;/li&gt;
&lt;li&gt;保障运行环境：软件完整性校验 &amp;amp;&amp;amp; 系统完整性校验（代表：可信计算）&lt;/li&gt;
&lt;li&gt;加强软件自身行为认证：向着预期的方式运行。信任链传递（静态可信 -&amp;gt; 动态可信）&lt;/li&gt;
&lt;li&gt;恶意软件检测与查杀：反病毒软件&lt;/li&gt;
&lt;li&gt;黑客攻击防护：防火墙、入侵检测系统 IDS、入侵防护系统 IPS&lt;/li&gt;
&lt;li&gt;系统还原&lt;/li&gt;
&lt;li&gt;虚拟隔离：虚拟机、沙箱&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;第二章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二章&#34;&gt;#&lt;/a&gt; 第二章&lt;/h1&gt;
&lt;p&gt;操作系统引导过程：BIOS→硬盘主引导（MBR）→活动分区主引导（DBR）→（操作系统引导程序）NTLDR/bootmgr→系统内核加载……&lt;/p&gt;
&lt;p&gt;恶意软件可以在哪些阶段重新获取控制权：系统引导、操作系统启动、应用程序执行。&lt;/p&gt;
&lt;h2 id=&#34;程序在内存中的映像即程序地址空间分布&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序在内存中的映像即程序地址空间分布&#34;&gt;#&lt;/a&gt; 程序在内存中的映像，即程序地址空间分布&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-1.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;两个进程的可执行程序映像加载地址都是00400000h但同一地址对应的的代码却不一样为什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#两个进程的可执行程序映像加载地址都是00400000h但同一地址对应的的代码却不一样为什么&#34;&gt;#&lt;/a&gt; 两个进程的可执行程序映像加载地址都是 00400000H，但同一地址对应的的代码却不一样，为什么？&lt;/h2&gt;
&lt;p&gt;虚拟地址经过不同的页表转换到不同的物理地址&lt;/p&gt;
&lt;h2 id=&#34;有关malloc的三个思考题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有关malloc的三个思考题&#34;&gt;#&lt;/a&gt; 有关 malloc 的三个思考题&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;windows 编程中 malloc 实际上能够支持多大的内存呢？&lt;/p&gt;
&lt;p&gt;Windows 下 32 位程序如果单纯看地址空间能有 4G 左右的内存可用，不过实际上系统会把其中 2G 的地址留给内核使用，所以你的程序最大能用 2G 的内存。 除去其他开销，你能用 malloc 申请到的内存只有 1.9G 左右。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不断增加物理内存，能够增加 malloc 的内存大小吗？&lt;/p&gt;
&lt;p&gt;不断增加物理内存，并不能增加 malloc 的内存大小。&lt;/p&gt;
&lt;p&gt;首先需要明确的是：malloc 所申请到的内存大小并不是实际物理内存，而是虚拟内存。为什么 malloc 申请的是虚拟内存，不是物理内存呢？ 第一，由用户直接申请物理内存的方法提供给了用户直接访问物理地址的权力，而这样直接访问物理内存的方式过于危险；第二，只有物理内存才能运行和处理数据，但物理内存大小有限，如果将一个进程直接加载进物理内存太浪费空间。基于这两个原因，产生了使用虚拟内存的方法，让用户只能访问虚拟内存地址（如 malloc 申请内存），而由系统调配虚拟内存中的信息到物理内存中；避免了直接访问物理内存也避免了物理内存空间的浪费。&lt;/p&gt;
&lt;p&gt;其次，虚拟内存又是什么呢？ 物理内存指的就是我们电脑上的内存条，那虚拟内存既然不同于物理内存，且具有存储、读写数据的功能，那么很自然的我们就想到，虚拟内存的实际载体应该就是我们硬盘中没有被使用的部分。&lt;/p&gt;
&lt;p&gt;那么，虚拟内存又有多大呢？ 看到这里你可能认为，那既然虚拟内存的实际载体是硬盘，那它的大小应该和硬盘大小一样。但其实并不是这样的。为保证程序的组织、访问和载入的有序性，虚拟内存的大小被限定在一定范围内。对现有 32 位系统而言，虚拟内存的大小被设定为 2^32Byte=4GB。由此可见，虚拟内存的大小其实是由系统位数所决定的，和物理内存大小没有直接关系。&lt;/p&gt;
&lt;p&gt;这时我们便会思考，虚拟内存又是如何与物理内存联系的呢？ 实际上，系统为每个进程都分配了一个独立的 4GB 大小的虚拟内存空间。而这 4GB 大小的空间管理起来是很麻烦的，也不能直接把这些空间的内容加载进物理内存，因此，操作系统会自动对这个虚拟内存空间进行分页管理，将 4GB 划分成很多小页，并通过一个函数计算出当前虚拟内存地址在加载到物理内存时应该放在哪个物理地址，这些函数形成的表便是页表，通过这个页表就能将虚拟内存和物理内存联系起来。&lt;/p&gt;
&lt;p&gt;实际上，每个进程中只有很少一部分页加载并运行在物理内存上，绝大部分都处于虚拟内存中，正在等待被加载或者不需要被加载。当物理内存中的页被运行完成后，便通过页表信息将需要的页从虚拟内存加载进入物理内存进行运行。这样便完成了虚拟内存到物理内存的过程。&lt;/p&gt;
&lt;p&gt;综上可以得知，malloc 所能占用的大小就是一个进程的虚拟大小，而该大小由系统位数决定，和物理内存大小并没有实际关系。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么增加物理内存，能够使得系统跑得更流畅呢？&lt;/p&gt;
&lt;p&gt;根据上面的理论，一部分进程在物理内存中运行完后，将进行下一部分的加载和运行，而增加物理内存后，可以使得加载的速度更快，等待的进程更少，从而使系统运行得更流畅。&lt;/p&gt;
&lt;p&gt;举个例子：假如物理内存跑 10 个就满了，不能再加了，那得等其中一个跑完再加载，这时候可能有 3 个还在等；但是扩大物理内存后，一个页还是那么大，所以同时能跑的个数就增加了，比如现在可能最多能跑 20 个，那系统原来运行了 13 个，有 3 个在等，而现在可以直接全跑上，不用等了，所以就快了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;簇-fat&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#簇-fat&#34;&gt;#&lt;/a&gt; 簇 &amp;amp;&amp;amp; FAT&lt;/h2&gt;
&lt;p&gt;FAT 表是用于磁盘数据 (文件) 索引和定位引进的一种单向链式结构，表示簇的占用情况，表项的个数 = 簇的个数。&lt;/p&gt;
&lt;p&gt;簇大小 = 扇区大小（512B） * 2^n，簇是进行文件空间分配的最小单位。簇太大→浪费空间；簇太小→产生磁盘碎片。&lt;/p&gt;
&lt;p&gt;簇链：一个文件所占用的簇的序号形成的单向链表&lt;/p&gt;
&lt;h2 id=&#34;为什么一般删除的文件可以恢复如何彻底删除文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么一般删除的文件可以恢复如何彻底删除文件&#34;&gt;#&lt;/a&gt; 为什么一般删除的文件可以恢复 / 如何彻底删除文件？&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-2.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;清空回收站执行的操作就是删除该文件在 FAT 表中的记录。也就是说你执行彻底删除也就是删除并清空回收站后或者直接 shift+delete 删除，系统完成的操作就是在 FAT 表中标记这个文件已被移除，然后把红框框从磁盘上拿掉了，你的文件本质上还是存在的。&lt;/p&gt;
&lt;p&gt;删除文件并不是真正的 &amp;quot;删除&amp;quot; 文件，而是将被删除文件占用的磁盘位置标记为 &amp;quot;可用空间&amp;quot;，被删除文件只是被隐藏起来了。 当有新的文件要使用磁盘中这个位置时，系统就会直接覆盖原来的 &amp;quot;被删除文件&amp;quot;，这时才是真正意义上让文件消失。 这也是为什么删除文件的速度比复制文件的速度快的原因。 所以，如果执行删除操作后，文件的位置没有被覆盖，就能够轻松恢复，与删除时间无关。&lt;/p&gt;
&lt;h2 id=&#34;peelf-具体文件格式及常用节头部&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#peelf-具体文件格式及常用节头部&#34;&gt;#&lt;/a&gt; PE/ELF 具体文件格式及常用节头部&lt;/h2&gt;
&lt;p&gt;常见的 exe、dll、ocx、sys、com 都是 PE 文件。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-3.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-4.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;pe-文件与内存之间的映射&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pe-文件与内存之间的映射&#34;&gt;#&lt;/a&gt; PE 文件与内存之间的映射&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;文件偏移地址 FO/RA/Roffset：PE 文件在硬盘上存放时相对于文件头的偏移。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;装载地址 IB/Image Base：PE 装入内存时的基地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚拟内存地址 VA：PE 文件中的指令被装入内存后的地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相对虚拟地址 RVA：指令的虚拟内存地址相对于装载基址的偏移量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VA = Image Base + RVA&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;磁盘：0x200 字节，内存 0x1000 字节。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;节偏移：由于磁盘和内存存储分配单位的差异引起的节基址之差；节偏移 = Voffset (该节在内存中的偏移量) - Roffset (该节在文件中的偏移量)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件偏移地址 FOA = VA − Image Base − VSO (虚拟内存节偏移)+FSO (文件节偏移) = RVA − VSO (虚拟内存节偏移 ) + FSO (文件节偏移)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;image-5.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;第三章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第三章&#34;&gt;#&lt;/a&gt; 第三章&lt;/h1&gt;
&lt;p&gt;恶意代码：设计目的是用来实现恶意功能的代码或程序。&lt;/p&gt;
&lt;h2 id=&#34;恶意代码攻击目标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#恶意代码攻击目标&#34;&gt;#&lt;/a&gt; 恶意代码攻击目标&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定点攻击：邮件、IP、域名、QQ、服务器列表、特定人员名单等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;群体性攻击：挂马攻击（在目标服务器或网站中植入恶意程序）、钓鱼攻击、病毒蠕虫自动扩散&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：定点攻击和群体攻击的区分不是通过攻击的个体数量来区分，而是通过被攻击的个体是否能够被提前确定来区分。群体攻击中，无论是会传播的病毒木马还是钓鱼攻击，黑客在病毒、木马等被制作出来时不知道被攻击的对象是谁。&lt;/p&gt;
&lt;h2 id=&#34;恶意代码功能静态-动态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#恶意代码功能静态-动态&#34;&gt;#&lt;/a&gt; 恶意代码功能（静态、动态）&lt;/h2&gt;
&lt;p&gt;恶意代码功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取数据：静态数据（文件、数据库等）、动态数据（口令、内存、计算机网络流量、通信网络数据、可移动存储介质、隔离电脑等）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;静态数据和动态数据的区别：静态数据是指在运行过程中主要作为控制或参考用的数据，它们在很长的一段时间内不会变化，一般不随运行而变。动态数据包括所有在运行中发生变化的数据以及在运行中需要输入、输出的数据及在联机操作中要改变的数据。（来源：百度百科）&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;动态控制与渗透扩展攻击路径：中间系统、相关人员&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;破坏系统：数据、系统服务、支撑设备&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;计算机病毒与蠕虫定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机病毒与蠕虫定义&#34;&gt;#&lt;/a&gt; 计算机病毒与蠕虫定义&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;典型例子&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;病毒：熊猫烧香、CIH&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;蠕虫：1988 年 Morris 莫里斯蠕虫、SQL 蠕虫王、震网、飞客、Stuxnet、flame；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;各自特点及差异&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;病毒：病毒是通过感染计算机文件进行传播，以破坏或篡改用户数据，影响信息系统正常运行为主要目的恶意程序；是一段代码，能把自身加到程序其他程序包括操作系统上；它不能独立运行，需要由它的宿主运行来激活它&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;蠕虫：蠕虫是指能自我复制和广泛传播，以占用系统和网络资源为主要目的的恶意序；可以独立运行，并能把自身的一个包含所有功能的版本传播到另外的计算机上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;木马与后门定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#木马与后门定义&#34;&gt;#&lt;/a&gt; 木马与后门定义&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;木马：是指一类看起来具有正常功能，但实际上隐藏着很多用户不希望功能的程序。通常由控制端和被控制端两端组成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;典型例子：上兴、冰河、网络神偷、灰鸽子&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;后门：使得攻击者可以对系统进行非授权访问的一类程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;典型例子：sunburst 后门&lt;/p&gt;
&lt;h2 id=&#34;刑法285-286修正案七的司法解释情节严重的情形&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#刑法285-286修正案七的司法解释情节严重的情形&#34;&gt;#&lt;/a&gt; 刑法 285、286 修正案（七）的司法解释（情节严重的情形）&lt;/h2&gt;
&lt;p&gt;第二百八十五条 违反国家规定，侵入国家事务、国防建设、尖端科学技术领域的计算机信息系统的，处三年以下有期徒刑或者拘役……&lt;/p&gt;
&lt;p&gt;具有下列情形之一的，应当认为刑法 &lt;strong&gt;第二百八十五条&lt;/strong&gt; 第二款规定的 &amp;quot;情节严重&amp;quot;：&lt;/p&gt;
&lt;p&gt;（一）获取支付结算、证券交易、期货交易等网络金融服务的身份认证信息 &lt;strong&gt;十组&lt;/strong&gt; 以上的；&lt;/p&gt;
&lt;p&gt;（二）获取第（一）项以外的身份认证信息 &lt;strong&gt;五百组&lt;/strong&gt; 以上的；&lt;/p&gt;
&lt;p&gt;（三）非法控制计算机信息系统 &lt;strong&gt;二十台&lt;/strong&gt; 以上的；&lt;/p&gt;
&lt;p&gt;（四）违法所得 &lt;strong&gt;五千元&lt;/strong&gt; 以上或者造成经济损失 &lt;strong&gt;一万元&lt;/strong&gt; 以上的；&lt;/p&gt;
&lt;p&gt;（五）其他情节严重的情形。&lt;/p&gt;
&lt;p&gt;实施前款规定行为，具有下列情形之一的，应当认定为刑法第二百八十五条第二款规定的 &amp;quot;情节特别严重&amp;quot;：&lt;/p&gt;
&lt;p&gt;（一）数量或者数额达到前款第（一）项至第（四）项规定标准 &lt;strong&gt;五倍以上&lt;/strong&gt; 的；&lt;/p&gt;
&lt;p&gt;（二）其他情节特别严重的情形。&lt;/p&gt;
&lt;p&gt;情节严重：三年以下有期徒刑或者拘役，并处或者单处罚金；&lt;/p&gt;
&lt;p&gt;情节特别严重：三年以上七年以下有期徒刑，并处罚金&lt;/p&gt;
&lt;p&gt;第二百八十六条 违反国家规定，对计算机信息系统功能进行删除、修改、增加、干扰，造成计算机信息系统不能正常运行，后果严重的，处五年以下有期徒刑或者拘役；后果特别严重的，处五年以上有期徒刑……&lt;/p&gt;
&lt;h1 id=&#34;第四章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第四章&#34;&gt;#&lt;/a&gt; 第四章&lt;/h1&gt;
&lt;p&gt;根据导出函数表定位函数内存地址的方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从 AddressOfNames 中获取到需要定位的函数的名字（记下函数名的索引）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从 AddressOfNameOrdinals 中获取到该函数的编号（以索引定位）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从 AddressOfFunctions 中获取该编号对应函数的地址（编号值就是数组索引值）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;exe 文件本身也属于文件，要想找到一个 exe 文件的某个导入函数的内存地址，首先应该在 exe 文件中找到可选头中存放的_______________，通过这个来定位到_________的地址，在这里可以通过遍历所有结构的________________字段来获取到这个函数的索引，接着在_____________________中找到这个索引下的地址值，即为目标函数在内存中的地址。&lt;/p&gt;
&lt;p&gt;IDT 的 RVA；IDT；OriginalFirstThunk；IAT&lt;/p&gt;
&lt;h1 id=&#34;第五章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第五章&#34;&gt;#&lt;/a&gt; 第五章&lt;/h1&gt;
&lt;p&gt;感染：在尽量不影响目标程序（系统）正常功能的前提下，使其具有病毒自己的功能。&lt;/p&gt;
&lt;p&gt;感染目标类型：文件感染、系统感染；&lt;/p&gt;
&lt;h2 id=&#34;关键技术重定位-api函数获取-目标检索-感染&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关键技术重定位-api函数获取-目标检索-感染&#34;&gt;#&lt;/a&gt; 关键技术（重定位、API 函数获取、目标检索、感染）&lt;/h2&gt;
&lt;h4 id=&#34;1-重定位病毒代码目标寄生位置不固定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-重定位病毒代码目标寄生位置不固定&#34;&gt;#&lt;/a&gt; (1) 重定位：病毒代码目标寄生位置不固定&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;原因解释&lt;/strong&gt; ：在编译时，有些基于 Image Base 的指令会将地址固定写死在指令之中，如 push 0x401215，这时修改 Image Base 会使得这条指令的意义丢失，因此需要重定位。在病毒代码编译后而没有植入时，其起始地址很可能不是我们想要病毒代码在 HOST 文件中的起始地址，需要进行移动。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本质&lt;/strong&gt; ：其本质是修正实际地址与预期地址的差异&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案&lt;/strong&gt; ：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;逐一硬编码（较为繁琐）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;病毒代码运行过程中自我重定位&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;call 指令可以将下一条要执行的指令的地址压入栈，配合 pop 即可得到下一条指令的地址，以此病毒就可以知道自己的地址是什么。&lt;/p&gt;
&lt;h4 id=&#34;2-api函数自获取需要使用api函数但无引入函数节支撑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-api函数自获取需要使用api函数但无引入函数节支撑&#34;&gt;#&lt;/a&gt; (2) API 函数自获取：需要使用 API 函数，但无引入函数节支撑&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;解决方法：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先获得 kernel32 模块中的任何一个地址；&lt;/li&gt;
&lt;li&gt;然后按照模块首地址特征（对齐于 10000H，PE 文件开始标志 MZ），向低地址遍历定位 PE 文件头，得到 kernel32.dll 的模块加载基地址；&lt;/li&gt;
&lt;li&gt;然后通过 kernel32.dll 的引出目录表结构定位具体函数的函数地址。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;实现 1 的方法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a.&lt;/strong&gt;  &lt;strong&gt;利用程序的返回地址（程序入口代码执行时，&lt;/strong&gt; stack &lt;strong&gt;顶端存储的地址）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原理：系统打开一个可执行文件时，它会调用 Kernel32.dll 中的 CreateProcess 函数，CreateProcess 函数在完成应用程序装载后，会先将返回地址压入到堆栈顶端。当该应用程序结束后，会将返回地址弹出放到 EIP 中，继续执行。&lt;/p&gt;
&lt;p&gt;而这个返回地址正处于 KERNEL32.DLL 的地址空间之中。这样，利用 PE 文件格式的相关特征（如 03C 偏移处内容存放着 &amp;quot;PE&amp;quot; 标志的内存地址等），在此地址的基础上往低地址方向逐渐搜索，必然可以找到 KERNEL32.DLL 模块的首地址。不过这种暴力搜索方法比较费时，并且可能会碰到一些异常情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;b.&lt;/strong&gt; &lt;strong&gt;通过&lt;/strong&gt; SEH&lt;strong&gt; 链获得 KERNEL32 模块内地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原理：遍历 SEH 链，在链中查找 prev 成员等于 0xFFFFFFFF 的 EXCEPTION_REGISTER 结构，该结构中 handler 值指向系统异常处理例程，它总是位于 KERNEL32 模块中。根据这一特性，然后进行向前搜索就可以查找 KERNEL32.DLL 在内存中的基地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;c.&lt;/strong&gt;  &lt;strong&gt;通过&lt;/strong&gt; PEB &lt;strong&gt;相关数据结构获取&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;fs:[0] 指向 TEB 结构，首先从 fs:[30h] 获得 PEB 地址，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后通过 PEB [0x0c] 获得 PEB_LDR_DATA 数据结构地址，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后通过从 PEB_LDR_DATA [0x1c] 获取 InInitializationOrderModuleList.Flink 地址，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后在 Flink [0x08] 中得到 KERNEL32.DLL 模块的基地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这种方法比较通用，适用于 2K/XP/2003。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Exploit 的编写中，也通常采用这种方式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;d.&lt;/strong&gt; &lt;strong&gt;Stack 特定高端地址的数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种方法只适用于 Windows NT 操作系统，但这种方法的代码量是最小的，只有 25B。&lt;/p&gt;
&lt;p&gt;每个执行的线程都有它自己的 TEB (线程环境块)，该块中存储着线程的栈顶的地址，从该地址向下偏移 0X1C 处的地址肯定位于 Kernel32.dll 中。则可以通过该地址向低地址以 64KB 为单位来查找 Kernel32.dll 的基地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获取指定函数内存地址的方法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过 Address of Names 数组查找函数名，记录索引值&lt;/p&gt;
&lt;p&gt;在 Address of Name Ordinals 编号数组中找到这个索引值对应的编号&lt;/p&gt;
&lt;p&gt;在 Address of Functions 数组中以编号为索引即可找到指定函数的内存地址&lt;/p&gt;
&lt;h4 id=&#34;3-目标检索目标程序遍历搜索全盘查找或者部分盘符查找&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-目标检索目标程序遍历搜索全盘查找或者部分盘符查找&#34;&gt;#&lt;/a&gt; (3) 目标检索（目标程序遍历搜索）：全盘查找，或者部分盘符查找&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;指定找到的目录为当前工作目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开始搜索文件 (*.*)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;该目录搜索完毕？是则返回，否则继续&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找到文件还是目录？是目录则调用自身函数 FindFile，否则继续&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;是文件，如符合感染条件，则调用感染模块，否则继续&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;搜索下一个文件 (FindNextFile)，转到 3 继续&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;4-感染模块病毒代码插入位置选择与写入控制权返回机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-感染模块病毒代码插入位置选择与写入控制权返回机制&#34;&gt;#&lt;/a&gt; (4) 感染模块：病毒代码插入位置选择与写入，控制权返回机制&lt;/h4&gt;
&lt;p&gt;关键：病毒代码能够得到运行；程序的正常功能不能被破坏&lt;/p&gt;
&lt;p&gt;代码插入位置：添加新节；碎片式感染；插入式感染；伴随式感染。&lt;/p&gt;
&lt;h2 id=&#34;重定位方法简单汇编语言理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重定位方法简单汇编语言理解&#34;&gt;#&lt;/a&gt; 重定位方法（简单汇编语言理解）&lt;/h2&gt;
&lt;p&gt;计算正确地址与错误地址的偏差，并保存到全局寄存器中；当使用病毒变量时，与该值进行加运算，完成修正。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-6.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-7.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-8.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;校正值 = 真实地址（call 的） – 预期地址（offset）&lt;/p&gt;
&lt;p&gt;使用时用变量的预期地址（offset） + 校正值&lt;/p&gt;
&lt;h2 id=&#34;增加新节感染的步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#增加新节感染的步骤&#34;&gt;#&lt;/a&gt; 增加新节感染的步骤&lt;/h2&gt;
&lt;p&gt;感染文件的基本步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;判断目标文件开始的两个字节是否为 &amp;quot;MZ&amp;quot;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;判断 PE 文件标记 &amp;quot;PE&amp;quot;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;判断感染标记，如果已被感染过则跳出继续执行 HOST 程序，否则继续。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获得 Directory（数据目录）的个数，（每个数据目录信息占 8 个字节）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;得到节表起始位置。(Directory 的偏移地址 + 数据目录占用的字节数 = 节表起始位置)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;得到目前最后节表的末尾偏移（紧接其后用于写入一个新的病毒节）节表起始位置 + 节的个数 * 28H (每个节表占用的字节数 28H)= 目前最后节表的末尾偏移。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开始写入节表和病毒节&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修正文件头信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;捆绑式感染优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#捆绑式感染优缺点&#34;&gt;#&lt;/a&gt; 捆绑式感染（优缺点）&lt;/h2&gt;
&lt;p&gt;定义：将 HOST 作为数据存储在病毒体内，当执行病毒程序时，还原并执行 HOST 文件。&lt;/p&gt;
&lt;p&gt;例子：熊猫烧香病毒&lt;/p&gt;
&lt;p&gt;优点：编写简单、效率高。可感染自校验程序。&lt;/p&gt;
&lt;p&gt;缺点：被感染后的程序主体是病毒程序，易被发现（程序叠加＋释放执行），程序图标问题。&lt;/p&gt;
&lt;h2 id=&#34;汇编病毒实验-kernel32dll基地址定位代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#汇编病毒实验-kernel32dll基地址定位代码&#34;&gt;#&lt;/a&gt; 汇编病毒实验 - kernel32.dll 基地址定位代码&lt;/h2&gt;
&lt;p&gt;实验采用的是利用程序的返回地址遍历（？）的方法。&lt;/p&gt;
&lt;figure class=&#34;highlight armasm&#34;&gt;&lt;figcaption data-lang=&#34;armasm&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;GetKernelBase proc dwKernelRet:     &lt;span class=&#34;token comment&#34;&gt;; 定义一个过程（函数）名为 GetKernelBase，接受一个参数 dwKernelRet。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token instruction keyword&#34;&gt;LOCAL&lt;/span&gt; dwReturn:                     &lt;span class=&#34;token comment&#34;&gt;; 定义一个局部变量 dwReturn。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pushad:                             &lt;span class=&#34;token comment&#34;&gt;; 将所有通用寄存器的值压入堆栈。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;call Relocate:                      &lt;span class=&#34;token comment&#34;&gt;; 调用 Relocate 过程。这可能是一个子过程，但是在提供的代码中并没有给出具体的实现。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;assume fs:nothing:                  &lt;span class=&#34;token comment&#34;&gt;; 指定 FS 段寄存器的偏移为 0。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;push ebp:                           &lt;span class=&#34;token comment&#34;&gt;; 将 EBP 寄存器的值压入堆栈。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;lea eax&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;ebx &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; offset PageError&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;:   &lt;span class=&#34;token comment&#34;&gt;; 计算 PageError 标签的地址并将其存储在 EAX 寄存器中。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;push eax:                           &lt;span class=&#34;token comment&#34;&gt;; 将 EAX 寄存器的值压入堆栈。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;lea eax&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;ebx &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; offset SEHHandler&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;:  &lt;span class=&#34;token comment&#34;&gt;; 计算 SEHHandler 标签的地址并将其存储在 EAX 寄存器中。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;push eax:                           &lt;span class=&#34;token comment&#34;&gt;; 将 EAX 寄存器的值压入堆栈。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;push fs:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;:                        &lt;span class=&#34;token comment&#34;&gt;; 将 FS 段寄存器的值（之前通过 assume fs:nothing 指定为 0）压入堆栈。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov fs:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; esp:                    &lt;span class=&#34;token comment&#34;&gt;; 将堆栈指针的值存储到 FS 段寄存器的偏移 0 处。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov edi&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dwKernelRet:               &lt;span class=&#34;token comment&#34;&gt;; 将传入的参数 dwKernelRet 的值存储到 EDI 寄存器。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;and edi&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 0ffff0000h:                &lt;span class=&#34;token comment&#34;&gt;; 将 EDI 寄存器的值按位与 0xffff0000，保留高 16 位，清零低 16 位。这样做可能是为了获得模块的基地址，因为模块基地址通常在 PE 头中的高 16 位。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;@@::                                &lt;span class=&#34;token comment&#34;&gt;; 定义一个标签。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cmp word ptr &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;edi&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; IMAGE_DOS_SIGNATURE: &lt;span class=&#34;token comment&#34;&gt;; 比较 edi 指向的地址处的 16 位值与 IMAGE_DOS_SIGNATURE（表示 DOS 头的标志）是否相等。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;jne PageError:                      &lt;span class=&#34;token comment&#34;&gt;; 如果不相等，跳转到 PageError 标签。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov esi&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; edi:                       &lt;span class=&#34;token comment&#34;&gt;; 将 edi 的值复制到 esi 寄存器。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;add esi&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;esi&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;003ch&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;:               &lt;span class=&#34;token comment&#34;&gt;; 计算 esi 寄存器指向的地址处的值（PE 头中的 e_lfanew 字段）加上 esi 的值，得到 PE 头的地址。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cmp word ptr &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;esi&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; IMAGE_NT_SIGNATURE: &lt;span class=&#34;token comment&#34;&gt;; 比较 esi 指向的地址处的 16 位值与 IMAGE_NT_SIGNATURE（表示 NT 头的标志）是否相等。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;jne PageError:                      &lt;span class=&#34;token comment&#34;&gt;; 如果不相等，跳转到 PageError 标签。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov dwReturn&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; edi:                  &lt;span class=&#34;token comment&#34;&gt;; 将 edi 的值存储到 dwReturn 局部变量中。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;jmp @@:                             &lt;span class=&#34;token comment&#34;&gt;; 无条件跳转到 @@标签。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;PageError::                         &lt;span class=&#34;token comment&#34;&gt;; 定义 PageError 标签。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sub edi&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 010000h:                   &lt;span class=&#34;token comment&#34;&gt;; 将 edi 的值减去 0x10000。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cmp edi&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 070000000h:                &lt;span class=&#34;token comment&#34;&gt;; 比较 edi 的值与 0x70000000。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;jb @@:                              &lt;span class=&#34;token comment&#34;&gt;; 如果 edi 的值小于 0x70000000，无条件跳转到 @@标签。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;jmp @b:                             &lt;span class=&#34;token comment&#34;&gt;; 无条件跳转到上一个标签 @b。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;@@::                                &lt;span class=&#34;token comment&#34;&gt;; 定义一个标签。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pop fs:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;:                         &lt;span class=&#34;token comment&#34;&gt;; 弹出堆栈中的值并存储到 FS 段寄存器的偏移 0 处。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;add esp&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 0ch:                       &lt;span class=&#34;token comment&#34;&gt;; 调整堆栈指针，相当于释放 12 字节的空间。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;popad:                              &lt;span class=&#34;token comment&#34;&gt;; 弹出之前压入堆栈的所有通用寄存器的值。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov eax&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dwReturn:                  &lt;span class=&#34;token comment&#34;&gt;; 将 dwReturn 的值存储到 EAX 寄存器。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ret:                                &lt;span class=&#34;token comment&#34;&gt;; 返回，结束过程。  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;; 总体来说，该函数的目的是通过对模块的 DOS 头和 NT 头的签名进行验证，获取 Kernel.dll 模块的加载基地址，并将其存储在 dwReturn 变量中返回。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;汇编病毒实验-得到kernel基地址后根据函数名获取函数地址的流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#汇编病毒实验-得到kernel基地址后根据函数名获取函数地址的流程&#34;&gt;#&lt;/a&gt; 汇编病毒实验 - 得到 kernel 基地址后，根据函数名获取函数地址的流程&lt;/h2&gt;
&lt;figure class=&#34;highlight armasm&#34;&gt;&lt;figcaption data-lang=&#34;armasm&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov     esi&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; hModule              &lt;span class=&#34;token comment&#34;&gt;; 设置 esi 为模块句柄&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;add     esi&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;esi &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; 3ch&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;          &lt;span class=&#34;token comment&#34;&gt;; 获取 IMAGE\_NT\_HEADERS 结构的地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;assume  esi:ptr IMAGE\_NT\_HEADERS  &lt;span class=&#34;token comment&#34;&gt;; 假设 esi 指向 IMAGE\_NT\_HEADERS 结构&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov     esi&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;esi&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;.OptionalHeader.DataDirectory.VirtualAddress &lt;span class=&#34;token comment&#34;&gt;; 获取导出表的 RVA&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;add     esi&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; hModule              &lt;span class=&#34;token comment&#34;&gt;; 计算导出表的地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;assume  esi:ptr IMAGE\_EXPORT\_DIRECTORY &lt;span class=&#34;token comment&#34;&gt;; 假设 esi 指向 IMAGE\_EXPORT\_DIRECTORY 结构&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov     ebx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;esi&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;.AddressOfNames &lt;span class=&#34;token comment&#34;&gt;; 获取导出函数名称表的 RVA&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;add     ebx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; hModule              &lt;span class=&#34;token comment&#34;&gt;; 计算导出函数名称表的地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xor     edx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; edx                  &lt;span class=&#34;token comment&#34;&gt;; 清零 edx，用于计数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;@@:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;push    esi                       &lt;span class=&#34;token comment&#34;&gt;; 保存 esi 的值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov     edi&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;ebx&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;                &lt;span class=&#34;token comment&#34;&gt;; 获取当前导出函数的名称 RVA&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;add     edi&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; hModule              &lt;span class=&#34;token comment&#34;&gt;; 计算当前导出函数的地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov     esi&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; lpszApi              &lt;span class=&#34;token comment&#34;&gt;; 设置 esi 为要查找的函数名&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov     ecx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dwStringLength       &lt;span class=&#34;token comment&#34;&gt;; 设置 ecx 为字符串长度&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;repz    cmpsb                      &lt;span class=&#34;token comment&#34;&gt;; 逐字节比较当前导出函数名和目标函数名&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;jnz     skip                       &lt;span class=&#34;token comment&#34;&gt;; 如果不相等，则跳转到 skip 标签&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pop     esi                       &lt;span class=&#34;token comment&#34;&gt;; 恢复 esi 的值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;jmp     @f                        &lt;span class=&#34;token comment&#34;&gt;; 跳转到结束标签&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;skip:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pop     esi                       &lt;span class=&#34;token comment&#34;&gt;; 恢复 esi 的值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;add     ebx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;                    &lt;span class=&#34;token comment&#34;&gt;; 移到下一个导出函数的名称&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;inc     edx                       &lt;span class=&#34;token comment&#34;&gt;; 增加计数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cmp     edx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;esi&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;.NumberOfNames  &lt;span class=&#34;token comment&#34;&gt;; 比较计数和导出函数的总数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;jl      @@b                       &lt;span class=&#34;token comment&#34;&gt;; 如果计数小于总数，继续循环&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;jmp     Error                      &lt;span class=&#34;token comment&#34;&gt;; 如果没有找到匹配的函数名，跳转到错误处理&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;@@:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sub     ebx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;esi&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;.AddressOfNames &lt;span class=&#34;token comment&#34;&gt;; 计算当前导出函数名表的偏移量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sub     ebx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; hModule               &lt;span class=&#34;token comment&#34;&gt;; 计算当前导出函数名表的 RVA&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;shr     ebx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;                     &lt;span class=&#34;token comment&#34;&gt;; 将偏移量右移一位（除以 2）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;add     ebx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;esi&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;.AddressOfNameOrdinals &lt;span class=&#34;token comment&#34;&gt;; 获取当前导出函数名的序数表的 RVA&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;add     ebx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; hModule               &lt;span class=&#34;token comment&#34;&gt;; 计算当前导出函数名的序数表的地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;movzx   eax&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; word ptr &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;ebx&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;; 获取当前导出函数的序数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;shl     eax&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;                     &lt;span class=&#34;token comment&#34;&gt;; 将序数左移两位（乘以 4）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;add     eax&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;esi&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;.AddressOfFunctions &lt;span class=&#34;token comment&#34;&gt;; 获取当前导出函数地址表的 RVA&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;add     eax&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; hModule               &lt;span class=&#34;token comment&#34;&gt;; 计算当前导出函数的 RVA&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov     eax&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;eax&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;                 &lt;span class=&#34;token comment&#34;&gt;; 获取当前导出函数的地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;add     eax&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; hModule               &lt;span class=&#34;token comment&#34;&gt;; 计算当前导出函数的地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov     dwReturn&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; eax              &lt;span class=&#34;token comment&#34;&gt;; 保存当前导出函数的地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Error:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pop     fs:&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;                     &lt;span class=&#34;token comment&#34;&gt;; 恢复异常处理程序&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;add     esp&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 0ch                   &lt;span class=&#34;token comment&#34;&gt;; 调整堆栈&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;assume  esi:nothing                &lt;span class=&#34;token comment&#34;&gt;; 取消 esi 的假设&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;popad                             &lt;span class=&#34;token comment&#34;&gt;; 恢复寄存器的值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mov     eax&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dwReturn              &lt;span class=&#34;token comment&#34;&gt;; 返回当前导出函数的地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ret&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;以上是函数地址计算的过程。代码首先获取导出表的地址，然后通过遍历导出函数名称表找到目标函数名的序数，再通过序数找到导出函数地址表，最终获取目标函数的地址。如果找到匹配的函数名，就会跳转到结束标签，否则跳转到错误处理。在错误处理中，异常处理程序被恢复，堆栈被调整，最终返回找到的函数地址或错误状态。&lt;/p&gt;
&lt;h1 id=&#34;第六章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第六章&#34;&gt;#&lt;/a&gt; 第六章&lt;/h1&gt;
&lt;h2 id=&#34;宏病毒如何获得控制权&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#宏病毒如何获得控制权&#34;&gt;#&lt;/a&gt; 宏病毒如何获得控制权&lt;/h2&gt;
&lt;p&gt;利用自动执行宏，将病毒代码写入，从而获取控制权。&lt;/p&gt;
&lt;p&gt;当打开文档，其中的宏就会被执行，宏病毒就会被激活，并驻留在 Normal 模板上。&lt;/p&gt;
&lt;p&gt;所有自动保存的文档都会 &amp;quot;感染&amp;quot; 上这种宏病毒，而且如果其他用户打开了感染病毒的文档，宏病毒又会转移到他的计算机上。&lt;/p&gt;
&lt;h2 id=&#34;宏-自我保护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#宏-自我保护&#34;&gt;#&lt;/a&gt; 宏 - 自我保护&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;禁止提示信息&lt;/li&gt;
&lt;li&gt;屏蔽命令菜单，不允许查看宏&lt;/li&gt;
&lt;li&gt;隐藏宏的真实病毒代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;宏-导出导入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#宏-导出导入&#34;&gt;#&lt;/a&gt; 宏 - 导出导入&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-9.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;脚本病毒感染的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#脚本病毒感染的方法&#34;&gt;#&lt;/a&gt; 脚本病毒感染的方法&lt;/h2&gt;
&lt;p&gt;VBS 脚本病毒：用 VBScript 编写，能够进行自我传播的破坏性程序，其需要人工干预触发执行。&lt;/p&gt;
&lt;p&gt;方法：VBS 脚本病毒是直接通过自我复制来感染文件的，病毒中的绝大部分代码都可以直接附加在其他同类程序的中间。&lt;/p&gt;
&lt;h2 id=&#34;vbs脚本病毒对抗反病毒软件的几种技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vbs脚本病毒对抗反病毒软件的几种技巧&#34;&gt;#&lt;/a&gt; VBS 脚本病毒对抗反病毒软件的几种技巧&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;自加密&lt;/li&gt;
&lt;li&gt;运用 Execute 函数：如果病毒将这段声明代码转化为字符串，然后通过 Execute (String) 函数执行，就可以躲避某些反病毒软件。&lt;/li&gt;
&lt;li&gt;改变对象声明方法：如 fso=createobject (&amp;quot;script&amp;quot;＋&amp;quot;ing.filesyste&amp;quot;＋&amp;quot;mobject&amp;quot;)&lt;/li&gt;
&lt;li&gt;关闭反病毒软件&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;第七章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第七章&#34;&gt;#&lt;/a&gt; 第七章&lt;/h1&gt;
&lt;h1 id=&#34;第八章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第八章&#34;&gt;#&lt;/a&gt; 第八章&lt;/h1&gt;
&lt;h1 id=&#34;第九章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第九章&#34;&gt;#&lt;/a&gt; 第九章&lt;/h1&gt;
&lt;p&gt;检测对象：引导扇区、文件系统中可能带毒的文件、内存空间、主板 BIOS、网络流量和系统行为等。&lt;/p&gt;
&lt;p&gt;检测策略：专用检查技术（如文本特征值检测技术）、通用检查技术（如启发式扫描技术、主动防御技术）&lt;/p&gt;
&lt;h2 id=&#34;bm算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bm算法&#34;&gt;#&lt;/a&gt; BM 算法&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxNjI4NS9hcnRpY2xlL2RldGFpbHMvMTI4MTk4NzYyP29wc19yZXF1ZXN0X21pc2M9JTI1N0IlMjUyMnJlcXVlc3QlMjU1RmlkJTI1MjIlMjUzQSUyNTIyMTcwNTA2MDYwMzE2ODAwMTg4NTExNzg0JTI1MjIlMjUyQyUyNTIyc2NtJTI1MjIlMjUzQSUyNTIyMjAxNDA3MTMuMTMwMTAyMzM0Li4lMjUyMiUyNTdEJmFtcDtyZXF1ZXN0X2lkPTE3MDUwNjA2MDMxNjgwMDE4ODUxMTc4NCZhbXA7Yml6X2lkPTAmYW1wO3V0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19zZWFyY2hfcmVzdWx0Lm5vbmUtdGFzay1ibG9nLTJ+YWxsfnRvcF9jbGlja35kZWZhdWx0LTItMTI4MTk4NzYyLW51bGwtbnVsbC4xNDIlNUV2OTklNUVwY19zZWFyY2hfcmVzdWx0X2Jhc2UxJmFtcDt1dG1fdGVybT1CTSVFNyVBRSU5NyVFNiVCMyU5NSZhbXA7c3BtPTEwMTguMjIyNi4zMDAxLjQxODc=&#34;&gt;BM (Boyer-Moore) 算法详解_bm 算法 - CSDN 博客&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;ac算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ac算法&#34;&gt;#&lt;/a&gt; AC 算法&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0NjEzOS9hcnRpY2xlL2RldGFpbHMvMTA1MDc1Njc2P29wc19yZXF1ZXN0X21pc2M9JmFtcDtyZXF1ZXN0X2lkPSZhbXA7Yml6X2lkPTEwMiZhbXA7dXRtX3Rlcm09QUMlRTclQUUlOTclRTYlQjMlOTUmYW1wO3V0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19zZWFyY2hfcmVzdWx0Lm5vbmUtdGFzay1ibG9nLTJ+YWxsfnNvYmFpZHV3ZWJ+ZGVmYXVsdC05LTEwNTA3NTY3Ni4xNDIlNUV2OTklNUVwY19zZWFyY2hfcmVzdWx0X2Jhc2UxJmFtcDtzcG09MTAxOC4yMjI2LjMwMDEuNDE4Nw==&#34;&gt;AC 自动机 算法详解 (图解) 及模板_ac 算法图解 - CSDN 博客&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;wu-manber算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#wu-manber算法&#34;&gt;#&lt;/a&gt; Wu-Manber 算法&lt;/h2&gt;
&lt;p&gt;建表：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpOW5jL2FydGljbGUvZGV0YWlscy85MTI0NjIz&#34;&gt;Wu-Manber 经典多模式匹配算法_wumanber-CSDN 博客&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;匹配：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGFkYXduL3AvOTI4MTUwOS5odG1s&#34;&gt;浅谈&lt;/span&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGFkYXduL3AvOTI4MTUwOS5odG1s&#34;&gt; WM 算法 - IvanB.G.Liu - 博客园 (cnblogs.com)&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;校验和检测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#校验和检测&#34;&gt;#&lt;/a&gt; 校验和检测&lt;/h2&gt;
&lt;p&gt;思路：病毒会通过更改文件来工作运行 (除了伴生病毒外不需要），可以用完整性检查器，通过监视对文件进行未经授权的更改，来利用此行为，来查找病毒。&lt;/p&gt;
&lt;p&gt;实用方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;脱机检测。校验和仅定期验证，例如每周一次。&lt;/li&gt;
&lt;li&gt;自检。可执行文件被修改为在运行时检查自己。&lt;/li&gt;
&lt;li&gt;完整性壳层。可执行文件的校验和在执行前立即进行验证。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;检测对象：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件头部：在文件很大的情况下为节省时间只对头部进行校验&lt;/li&gt;
&lt;li&gt;文件属性：检查文件长度、创建时间、读写属性、首簇号等&lt;/li&gt;
&lt;li&gt;文件内容：检查整个文件&lt;/li&gt;
&lt;li&gt;系统数据：检查引导扇区、中断向量表、驱动程序处理例程等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点：方法简单，能够发现未知病毒，能够发现文件的微小变化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：必须先保存正确的校验码，容易误报，效率低，不能识别病毒类别&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统调用dll名称及对应功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统调用dll名称及对应功能&#34;&gt;#&lt;/a&gt; 系统调用 DLL 名称及对应功能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Kernel32.dll 常见的核心系统功能，如访问和操作内存、文件和硬件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ntdll.dll Windows 内核的接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;User32.dll 用户界面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advapi32.dll 服务管理器和注册表组件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gdi32.dll 图形显示和操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wsock32.dll Ws2_32.dll 联网&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wininet.dll 更高层次的网络函数，实现了如 FTP、HTTP 和 NTP&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;image-10.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;第十章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第十章&#34;&gt;#&lt;/a&gt; 第十章&lt;/h1&gt;
&lt;h2 id=&#34;软件缺陷与漏洞机理基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件缺陷与漏洞机理基础&#34;&gt;#&lt;/a&gt; 软件缺陷与漏洞机理基础&lt;/h2&gt;
&lt;h3 id=&#34;软件漏洞定义及其要素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件漏洞定义及其要素&#34;&gt;#&lt;/a&gt; 软件漏洞定义及其要素&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义：漏洞 (Vulnerability)，通常也称脆弱性，RFC2828 将漏洞定义为 &amp;quot;系统设计、实现或操作管理中存在的缺陷或者弱点，能被利用而违背系统的安全策略&amp;quot;。攻击者利用漏洞可以获得计算机系统的额外权限。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要素：①受影响的软件版本②POC - 验证漏洞存在的代码③漏洞触发的条件④攻击能力&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;漏洞威胁分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞威胁分类&#34;&gt;#&lt;/a&gt; 漏洞威胁分类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;获取访问权限的漏洞&lt;/li&gt;
&lt;li&gt;权限提升的漏洞&lt;/li&gt;
&lt;li&gt;拒绝服务的漏洞&lt;/li&gt;
&lt;li&gt;恶意软件植入漏洞&lt;/li&gt;
&lt;li&gt;数据丢失或者泄露漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;软件漏洞生命周期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件漏洞生命周期&#34;&gt;#&lt;/a&gt; 软件漏洞生命周期&lt;/h3&gt;
&lt;p&gt;漏洞挖掘→漏洞重现→漏洞诊断→漏洞修复→补丁测试→补丁推送&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-11.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;漏洞利用对软件系统的威胁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞利用对软件系统的威胁&#34;&gt;#&lt;/a&gt; 漏洞利用对软件系统的威胁&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;非法获得访问权限：未经授权使用资源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;权限提升：用户账号从低权限提升到高权限&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拒绝服务：使得计算机软件或者系统无法正常工作、无法提供正常的服务（本地 / 远程）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;恶意软件植入：主动（不需要用户的干预）/ 被动（需要借助用户的操作）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据丢失或者泄露：数据被破坏、删除或者非法读取&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;栈缓冲区溢出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#栈缓冲区溢出&#34;&gt;#&lt;/a&gt; 栈缓冲区溢出&lt;/h2&gt;
&lt;h3 id=&#34;栈区的内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#栈区的内容&#34;&gt;#&lt;/a&gt; 栈区的内容&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;函数的参数&lt;/li&gt;
&lt;li&gt;函数返回地址&lt;/li&gt;
&lt;li&gt;EBP 的值&lt;/li&gt;
&lt;li&gt;一些通用寄存器的值&lt;/li&gt;
&lt;li&gt;当前正在执行的函数的局部变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;栈操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#栈操作&#34;&gt;#&lt;/a&gt; 栈操作&lt;/h3&gt;
&lt;p&gt;push/pop&lt;/p&gt;
&lt;h3 id=&#34;函数调用过程与栈分布图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数调用过程与栈分布图&#34;&gt;#&lt;/a&gt; 函数调用过程与栈分布图&lt;/h3&gt;
&lt;p&gt;调用过程与栈分布图：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xODE0NjEz&#34;&gt;C++ 函数调用过程深入分析 - 腾讯云开发者社区 - 腾讯云 (tencent.com)&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-__cdecl-c调用规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-__cdecl-c调用规则&#34;&gt;#&lt;/a&gt; (1) __cdecl C 调用规则&lt;/h4&gt;
&lt;p&gt;后面的参数先进入堆栈；&lt;/p&gt;
&lt;p&gt;函数返回后调用者负责清除堆栈，因此会生成较大的可执行程序。&lt;/p&gt;
&lt;h4 id=&#34;2-__stdcall又称为winapi调用规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-__stdcall又称为winapi调用规则&#34;&gt;#&lt;/a&gt; (2) __stdcall（又称为 WINAPI）调用规则&lt;/h4&gt;
&lt;p&gt;后面的参数先进入堆栈；&lt;/p&gt;
&lt;p&gt;被调用的函数在返回前自行清理堆栈，所以生成的代码比 cdecl 小。&lt;/p&gt;
&lt;h4 id=&#34;3-fast-call&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-fast-call&#34;&gt;#&lt;/a&gt; (3) Fast call&lt;/h4&gt;
&lt;p&gt;把函数参数的前两个放入寄存器，其他参数入栈（后面参数先入）&lt;/p&gt;
&lt;h4 id=&#34;4-pascal&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-pascal&#34;&gt;#&lt;/a&gt; (4) Pascal&lt;/h4&gt;
&lt;p&gt;参数在前的先入栈（主要用在 WIN16 函数库，现在基本不用）&lt;/p&gt;
&lt;p&gt;不支持可变参数的函数调用。&lt;/p&gt;
&lt;h3 id=&#34;覆盖返回地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#覆盖返回地址&#34;&gt;#&lt;/a&gt; 覆盖返回地址&lt;/h3&gt;
&lt;p&gt;Nrs + jmp esp&lt;/p&gt;
&lt;h3 id=&#34;覆盖seh中的handler&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#覆盖seh中的handler&#34;&gt;#&lt;/a&gt; 覆盖 SEH 中的 handler&lt;/h3&gt;
&lt;p&gt;fs:[0] 指向 SEH 的初始地址，通过获取该地址以确定溢出的长度，这个长度必须确定以保证能够正确覆盖关键函数指针。将指针覆盖为类似于 jmp esp 指令的地址，即可执行 shellcode。&lt;/p&gt;
&lt;h2 id=&#34;堆缓冲区溢出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#堆缓冲区溢出&#34;&gt;#&lt;/a&gt; 堆缓冲区溢出&lt;/h2&gt;
&lt;p&gt;既然堆是操作系统分配给进程的内存段，两个程序在动态执行中申请到的堆地址可能是一样的吗？所处物理内存上的物理地址可能是一样的吗？&lt;/p&gt;
&lt;p&gt;注意：两个程序动态申请的堆空间地址完全有可能相同。要搞清楚虚拟地址和物理地址的区别，程序中直接操作的是虚拟内存地址，由操作系统从物理地址中映射而来，并非物理内存地址。但两个程序分配的堆地址的物理地址也有可能相同。两个程序可以交错使用这块内存。&lt;/p&gt;
&lt;h3 id=&#34;堆表空表和快表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#堆表空表和快表&#34;&gt;#&lt;/a&gt; 堆表：空表和快表&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Freelist（空表）：双向链表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;128 项（0&amp;lt;=index&amp;lt;128）&lt;/p&gt;
&lt;/li&gt;
&lt;li 8=&#34;&#34; *=&#34;&#34; index，0=&#34;&#34; &amp;lt;=&#34;&#34; index=&#34;&#34; &amp;lt;=&#34;&#34; 128；1024，index=&#34;&#34;&gt;
&lt;p&gt;空闲块大小 =&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lookaside（快表）：单向链表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;128 项 每项最多 4 个节点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链中的堆不发生合并&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;堆块块首和块首&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#堆块块首和块首&#34;&gt;#&lt;/a&gt; 堆块：块首和块首&lt;/h3&gt;
&lt;p&gt;块首：头部几个字节，用来标识自身信息（如大小，空闲还是占有等）&lt;/p&gt;
&lt;p&gt;块身：数据存储区域，紧跟块首&lt;/p&gt;
&lt;h3 id=&#34;堆溢出的利用方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#堆溢出的利用方式&#34;&gt;#&lt;/a&gt; 堆溢出的利用方式&lt;/h3&gt;
&lt;h4 id=&#34;1-whatwhere或dword-shoot&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-whatwhere或dword-shoot&#34;&gt;#&lt;/a&gt; (1) What→where 或 Dword shoot&lt;/h4&gt;
&lt;p&gt;分配完 buf1 之后向其中拷贝内容，拷贝的内容大小超过 buf1 的大小，即 16 字节，就会发生溢出，如果覆盖掉两个 4 字节的指针，而下一次分配 buf2 之前又没有把 buf1 释放掉的话，就会把一个 4 字节的内容写入一个地址当中，而这个内容和地址都是能够控制的，这样就可以控制函数的流程转向 shellcode。&lt;/p&gt;
&lt;h4 id=&#34;2-堆溢出能够利用成功的前提条件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-堆溢出能够利用成功的前提条件&#34;&gt;#&lt;/a&gt; (2) 堆溢出能够利用成功的前提条件&lt;/h4&gt;
&lt;h4 id=&#34;3-堆喷射利用原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-堆喷射利用原理&#34;&gt;#&lt;/a&gt; (3) 堆喷射利用原理&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MTYxOTkzL2FydGljbGUvZGV0YWlscy8xMDQ4NDY3OTI/b3BzX3JlcXVlc3RfbWlzYz0lMjU3QiUyNTIycmVxdWVzdCUyNTVGaWQlMjUyMiUyNTNBJTI1MjIxNzA1MjA4Mzc5MTY4MDAxODIxOTUxODQlMjUyMiUyNTJDJTI1MjJzY20lMjUyMiUyNTNBJTI1MjIyMDE0MDcxMy4xMzAxMDIzMzQuLiUyNTIyJTI1N0QmYW1wO3JlcXVlc3RfaWQ9MTcwNTIwODM3OTE2ODAwMTgyMTk1MTg0JmFtcDtiaXpfaWQ9MCZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3NlYXJjaF9yZXN1bHQubm9uZS10YXNrLWJsb2ctMn5hbGx+c29iYWlkdWVuZH5kZWZhdWx0LTEtMTA0ODQ2NzkyLW51bGwtbnVsbC4xNDIlNUV2OTklNUVwY19zZWFyY2hfcmVzdWx0X2Jhc2UxJmFtcDt1dG1fdGVybT0lRTUlQTAlODYlRTUlOTYlQjclRTUlQjAlODQmYW1wO3NwbT0xMDE4LjIyMjYuMzAwMS40MTg3&#34;&gt;Heap Spray 原理_heap spaying-CSDN 博客&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;uaf基本原理与可能的安全问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#uaf基本原理与可能的安全问题&#34;&gt;#&lt;/a&gt; UAF 基本原理与可能的安全问题&lt;/h3&gt;
&lt;p&gt;如果攻击者可以操纵 p1，则在 p1 指向的内存被释放后，程序再次申请内存，由于 p1 没有被赋值为 NULL，攻击者可向 p1 指向的内存 写入精心构造的 Shellcode 或采用其他方式改变程序控制流，从而达到攻击的目的。&lt;/p&gt;
&lt;h3 id=&#34;格式化字符串&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#格式化字符串&#34;&gt;#&lt;/a&gt; 格式化字符串&lt;/h3&gt;
&lt;h4 id=&#34;1-格式化字符串函数printf的栈结构图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-格式化字符串函数printf的栈结构图&#34;&gt;#&lt;/a&gt; (1) 格式化字符串函数 (printf) 的栈结构图&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80NjU4OTY1NDI=&#34;&gt;CTFer 成长日记 11：格式化字符串漏洞的原理与利用 - 知乎 (zhihu.com)&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-格式化字符串的危害&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-格式化字符串的危害&#34;&gt;#&lt;/a&gt; (2) 格式化字符串的危害&lt;/h4&gt;
&lt;p&gt;printf(&amp;quot;%s%n&amp;quot;, &amp;quot;01234&amp;quot;, &amp;amp;n); // n = 5&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;越界读操作→数据泄露&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;越界写操作→数据破坏&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;整数溢出及其他漏洞类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整数溢出及其他漏洞类型&#34;&gt;#&lt;/a&gt; 整数溢出及其他漏洞类型&lt;/h2&gt;
&lt;h3 id=&#34;整数溢出的概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整数溢出的概念&#34;&gt;#&lt;/a&gt; 整数溢出的概念&lt;/h3&gt;
&lt;p&gt;当试图保存一个比它可以表示的最大值还大的数时，就会发生整数溢出&lt;/p&gt;
&lt;h3 id=&#34;整数溢出的典型表现形式需全部掌握&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整数溢出的典型表现形式需全部掌握&#34;&gt;#&lt;/a&gt; 整数溢出的典型表现形式（需全部掌握）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;宽度溢出（short = int）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运算溢出（乘法加法导致）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;符号溢出（负数）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;整数溢出和缓冲区溢出的经典结合形式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整数溢出和缓冲区溢出的经典结合形式&#34;&gt;#&lt;/a&gt; 整数溢出和缓冲区溢出的经典结合形式&lt;/h3&gt;
&lt;h2 id=&#34;漏洞利用与发现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞利用与发现&#34;&gt;#&lt;/a&gt; 漏洞利用与发现&lt;/h2&gt;
&lt;h3 id=&#34;漏洞利用的目标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞利用的目标&#34;&gt;#&lt;/a&gt; 漏洞利用的目标&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修改内存变量&lt;/li&gt;
&lt;li&gt;修改代码逻辑&lt;/li&gt;
&lt;li&gt;修改函数的返回地址&lt;/li&gt;
&lt;li&gt;修改函数指针（C++）&lt;/li&gt;
&lt;li&gt;修改异常处理函数指针&lt;/li&gt;
&lt;li&gt;修改线程同步的函数指针&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;理解漏洞利用的整体流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#理解漏洞利用的整体流程&#34;&gt;#&lt;/a&gt; 理解漏洞利用的整体流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;定位漏洞点&lt;/li&gt;
&lt;li&gt;按照利用要求，编写 shellcode&lt;/li&gt;
&lt;li&gt;溢出，覆盖代码指针，使得 shellcode 获得可执行权&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;掌握shellcode实例运行原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#掌握shellcode实例运行原理&#34;&gt;#&lt;/a&gt; 掌握 shellcode 实例运行原理&lt;/h3&gt;
&lt;h3 id=&#34;理解为什么需要地址重定位并能够说明重定位代码含义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#理解为什么需要地址重定位并能够说明重定位代码含义&#34;&gt;#&lt;/a&gt; 理解为什么需要地址重定位，并能够说明重定位代码含义&lt;/h3&gt;
&lt;p&gt;由于 shellcode 没有 PE 头，因此 shellcode 中使用的 API 和数据必须由 shellcode 自己进行搜索和重定位&lt;/p&gt;
&lt;h3 id=&#34;ascii-armoring&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ascii-armoring&#34;&gt;#&lt;/a&gt; ASCII Armoring&lt;/h3&gt;
&lt;p&gt;ASCII armoring 机制想办法让 libc 所有函数的地址都包含一个零字节，让 strcpy 拷贝函数在遇到零地址时结束拷贝，攻击失败！&lt;/p&gt;
&lt;p&gt;攻击方法：ret2plt&lt;/p&gt;
&lt;p&gt;找到 4 个地址空间，它的首字节分别是 system 地址的第一个 byte, 第二个 byte，第三个 byte 和第四个 byte，然后一个个 byte 拷贝，将这 4 个 byte 拼凑到函数调用表里面。从而绕过直接拷贝 system 地址造成失败。&lt;/p&gt;
&lt;h3 id=&#34;掌握二进制代码重用原理与示例具备rop分析与设计能力重点考察&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#掌握二进制代码重用原理与示例具备rop分析与设计能力重点考察&#34;&gt;#&lt;/a&gt; 掌握二进制代码重用原理与示例，具备 ROP 分析与设计能力（重点考察）&lt;/h3&gt;
&lt;h3 id=&#34;静态分析技术vs动态分析技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态分析技术vs动态分析技术&#34;&gt;#&lt;/a&gt; 静态分析技术 VS 动态分析技术&lt;/h3&gt;
&lt;p&gt;动态分析：收集程序多次执行的运行过程的状态信息，结合输入和输出，检测程序存在的缺陷或漏洞。&lt;/p&gt;
&lt;h1 id=&#34;第十一章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第十一章&#34;&gt;#&lt;/a&gt; 第十一章&lt;/h1&gt;
&lt;h2 id=&#34;数据执行保护-depnx-防御机理及不足&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据执行保护-depnx-防御机理及不足&#34;&gt;#&lt;/a&gt; 数据执行保护 – DEP/NX 防御机理及不足&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;防御机理：禁用 stack/heap 中的代码执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不足：带来兼容性、灵活性问题（如用于提取其他软件窗口上文字的软件，可能需要在栈或堆中执行代码，DEP 启用后这类软件可能无法正常运行。）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对策：Ret2Libc、ROP、JOP、COP&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;栈溢出保护-stack-guardstack-canary防御机理及不足&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#栈溢出保护-stack-guardstack-canary防御机理及不足&#34;&gt;#&lt;/a&gt; 栈溢出保护 – Stack Guard/Stack Canary 防御机理及不足&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;防御机理：在函数开始时往栈中压入一个可以检验的随机数（ESP 异或.data 节的第一个 DWORD，这个 DWORD 称为种子，异或种子的结果作为 cookie），在函数结束时验证栈中的随机数是否一致。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不足：无法防御的部分：未被保护的函数（不应用于以下情况：函数不包含缓冲区；函数被定义为具有变量参数列表；函数使用无保护的关键字标记；函数在第一个语句中包含内嵌汇编代码；缓冲区不是 8 字节类型且大小不大于 4 个字节），针对基于改写函数指针的攻击，如 C++ 虚函数攻击；针对异常处理机制的攻击；堆溢出攻击。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对策：利用未保护的函数；覆盖 C++ 虚函数；攻击异常处理机制；同时替换栈和 data 中的 cookie&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;地址空间分布随机化-aslr防御机理及不足&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#地址空间分布随机化-aslr防御机理及不足&#34;&gt;#&lt;/a&gt; 地址空间分布随机化 – ASLR 防御机理及不足&lt;/h2&gt;
&lt;p&gt;栈和堆的基址是加载时随机确定的；程序自身和关联库的基址是加载时随机确定的。&lt;/p&gt;
&lt;p&gt;兼容性：一些老处理器不支持。&lt;/p&gt;
&lt;h1 id=&#34;第十二章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第十二章&#34;&gt;#&lt;/a&gt; 第十二章&lt;/h1&gt;
&lt;h2 id=&#34;威胁建模过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#威胁建模过程&#34;&gt;#&lt;/a&gt; 威胁建模过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在项目组中成立一个小组；&lt;/li&gt;
&lt;li&gt;分解系统需求；&lt;/li&gt;
&lt;li&gt;确定系统可能面临哪些威胁；&lt;/li&gt;
&lt;li&gt;画出威胁树，对软件可能受到的威胁进行表达；&lt;/li&gt;
&lt;li&gt;选择应对威胁或者缓和威胁的方法；&lt;/li&gt;
&lt;li&gt;确定最终技术&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;根据威胁画建模树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#根据威胁画建模树&#34;&gt;#&lt;/a&gt; 根据威胁画建模树&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-12.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-13.png&#34; alt=&#34;Alt text&#34; /&gt;&lt;/p&gt;
</content>
        <category term="HUST本科学习" scheme="https://less1.top/categories/HUST%E6%9C%AC%E7%A7%91%E5%AD%A6%E4%B9%A0/" />
        <category term="HUST" scheme="https://less1.top/tags/HUST/" />
        <category term="软件安全" scheme="https://less1.top/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8/" />
        <category term="期末复习" scheme="https://less1.top/tags/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/" />
        <updated>2024-01-29T02:28:03.000Z</updated>
    </entry>
    <entry>
        <id>https://less1.top/hello-world/</id>
        <title>Hello World</title>
        <link rel="alternate" href="https://less1.top/hello-world/"/>
        <content type="html">&lt;p&gt;Welcome to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;Hexo&lt;/span&gt;! This is your very first post. Check &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv&#34;&gt;documentation&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=&#34;&gt;troubleshooting&lt;/span&gt; or you can ask me on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==&#34;&gt;GitHub&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quick-start&#34;&gt;#&lt;/a&gt; Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;create-a-new-post&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#create-a-new-post&#34;&gt;#&lt;/a&gt; Create a new post&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo new &lt;span class=&#34;token string&#34;&gt;&#34;My New Post&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s&#34;&gt;Writing&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;run-server&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#run-server&#34;&gt;#&lt;/a&gt; Run server&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo server&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=&#34;&gt;Server&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#generate-static-files&#34;&gt;#&lt;/a&gt; Generate static files&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo generate&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s&#34;&gt;Generating&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#deploy-to-remote-sites&#34;&gt;#&lt;/a&gt; Deploy to remote sites&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo deploy&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s&#34;&gt;Deployment&lt;/span&gt;&lt;/p&gt;
</content>
        <updated>2024-01-21T11:03:14.000Z</updated>
    </entry>
</feed>
