{
    "version": "https://jsonfeed.org/version/1",
    "title": "lessone",
    "subtitle": "此去应多羡",
    "icon": "https://less1.top/images/favicon.ico",
    "description": "This is lessone's blog",
    "home_page_url": "https://less1.top",
    "items": [
        {
            "id": "https://less1.top/PPT-auto-nav/",
            "url": "https://less1.top/PPT-auto-nav/",
            "title": "[实用脚本]组会必备！PPT自动导航栏生成工具",
            "date_published": "2024-10-30T10:42:10.000Z",
            "content_html": "<h1 id=\"实际效果\"><a class=\"anchor\" href=\"#实际效果\">#</a> 实际效果</h1>\n<p>添加导航栏前的 PPT：<br />\n<img data-src=\"image.png\" alt=\"PPT before\" /><br />\n<img data-src=\"before.gif\" alt=\"demo\" /></p>\n<p><strong>自动</strong>添加导航栏后的 PPT：<br />\n<img data-src=\"after.gif\" alt=\"demo\" /></p>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>在现代学术研究中，清晰且专业的演示文稿对于有效传达研究成果至关重要。这款<strong> PPT 自动导航栏生成工具</strong>旨在帮助研究生在组会中自动生成美观的 PPT 导航栏，从而<s>在老师提问时快速翻页</s>使逻辑更加清晰，方便理解。</p>\n<h1 id=\"功能特点\"><a class=\"anchor\" href=\"#功能特点\">#</a> 功能特点</h1>\n<ul class=\"task-list\">\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_0\"> <strong>自动提取标题</strong>：工具会自动扫描每张幻灯片，提取 * 第一个文本框（有点不合理但是不知道怎么改了）* 中的内容作为该页的标题，确保导航栏的准确性。</label></p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_1\"> <strong>自定义分段</strong>：支持<strong>多篇论文、多段任务</strong>的汇报，用户可以灵活指定导航栏的分段方式，例如通过输入 “2-5,7-12” 来设定具体的幻灯片范围。</label></p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_2\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_2\"> <strong>动态导航栏</strong>：导航栏会提示当前处于那个页面，方便展示。</label></p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_3\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_3\"> <strong>超链接支持</strong>：每个导航项都设置了超链接，点击后将直接跳转到对应的幻灯片。</label></p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_4\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_4\"> <strong>可自定义的外观</strong>：<s>个人审美有限，自己修改样式参数吧</s></label></p>\n</li>\n</ul>\n<h1 id=\"使用教程\"><a class=\"anchor\" href=\"#使用教程\">#</a> 使用教程</h1>\n<ol>\n<li>安装 python 环境</li>\n</ol>\n<p><s>网上教程很多，此处省略了～～</s></p>\n<ol start=\"2\">\n<li>安装 python-pptx</li>\n</ol>\n<p>在命令行运行下面的命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip <span class=\"token function\">install</span> python-pptx</pre></td></tr></table></figure><ol start=\"3\">\n<li>修改文件名称<em><strong>或</strong></em>脚本内的文件名称</li>\n</ol>\n<p>将  <code>需要添加导航栏的ppt</code>  的文件名称修改为  <code>input.pptx</code> ，<em><strong>或</strong></em>将脚本中的  <code>input.pptx</code>  修改为 <code>需要添加导航栏的ppt</code>  的名称</p>\n<ol start=\"4\">\n<li>运行脚本程序</li>\n</ol>\n<p>再使用下面的命令运行脚本程序：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python auto_nav.py</pre></td></tr></table></figure><p><img data-src=\"image-1.png\" alt=\"程序提示\" /></p>\n<p>根据提示输入导航栏分段的范围，以下面的 PPT 为例：</p>\n<p><img data-src=\"image.png\" alt=\"PPT before\" /></p>\n<ul>\n<li>第 1 页是开头页</li>\n<li>第 2 页是第一篇 paper 的标题</li>\n<li>第 3-9 页是第一篇 paper 的主体展示</li>\n<li>第 10 页是第二篇 paper 的标题</li>\n<li>第 11-13 页是第二篇 paper 的主体展示</li>\n<li>第 14 页是结尾页</li>\n</ul>\n<p>只需要分段输入主体部分的页码，因此选择输入 <code>3-9,11-13</code> <em>(<strong>英文</strong>的逗号)</em></p>\n<ol start=\"5\">\n<li>查看运行结果并根据实际情况调整</li>\n</ol>\n<p><img data-src=\"image-2.png\" alt=\"PPT after\" /></p>\n<p>生成导航栏后的 PPT 已经输出到了同目录下的 <code>output.pptx</code>  中，可以看到，导航栏已经分段生成，可以根据实际情况进行进一步修改。</p>\n<h1 id=\"源码\"><a class=\"anchor\" href=\"#源码\">#</a> 源码</h1>\n<p>源码获取：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xlc3NvbmUxL1BQVC1hdXRvLW5hdg==\">PPT 导航栏自动生成源码</span>。</p>\n",
            "tags": [
                "实用脚本",
                "研究生组会",
                "实用脚本",
                "PPT美化",
                "导航栏"
            ]
        },
        {
            "id": "https://less1.top/Mobile-Security/",
            "url": "https://less1.top/Mobile-Security/",
            "title": "[移动应用安全]华中科技大学移动应用安全静态动态分析作业",
            "date_published": "2024-10-26T03:17:54.000Z",
            "content_html": "<h1 id=\"动态分析\"><a class=\"anchor\" href=\"#动态分析\">#</a> 动态分析</h1>\n<h2 id=\"实验目的\"><a class=\"anchor\" href=\"#实验目的\">#</a> 实验目的</h2>\n<p>本实验的目的是通过动态测试工具 Droidbot 对 Android 应用进行自动化测试，验证应用在不同虚拟环境中的功能、稳定性和兼容性。实验将结合使用 Android Studio、Genymotion 虚拟机、Oracle VM VirtualBox 等工具，模拟真实设备上的操作，进行样例测试和具体应用的测试分析，从而探索应用的行为流程、控制流，并发现应用可能存在的安全问题。</p>\n<h2 id=\"实验环境\"><a class=\"anchor\" href=\"#实验环境\">#</a> 实验环境</h2>\n<ul>\n<li>Droidbot version1.0.2b1</li>\n<li>Android Studio Koala Feature Drop | 2024.1.2</li>\n<li>Oracle VM VirtualBox 版本 7.0.8 r156879 (Qt5.15.2)</li>\n<li>Genymotion Version 3.7.1\n<ul>\n<li>虚拟机版本：Huawei P30 Pro (Android 11.0 API 30)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"实验过程\"><a class=\"anchor\" href=\"#实验过程\">#</a> 实验过程</h2>\n<h3 id=\"样例测试\"><a class=\"anchor\" href=\"#样例测试\">#</a> 样例测试</h3>\n<p><strong>Step 1 环境搭建</strong><br />\n环境搭建步骤参考《APP 动态测试实验.pdf》。</p>\n<ol>\n<li>\n<p><strong>安装 Python 和 Java</strong><br />\n 确保已安装 Python 和 Java，可以通过命令行（cmd）输入 <code>python</code>  和 <code>java -version</code>  来验证。</p>\n</li>\n<li>\n<p><strong>配置 Android SDK</strong><br />\n 从 Android 开发者官网下载 Android Studio（无需安装 Android Virtual Device）。<br />\n将 <code>C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\platform-tools</code>  目录添加到系统的 PATH 环境变量中。<br />\n通过命令行（cmd）运行 <code>adb</code>  命令验证配置。</p>\n</li>\n<li>\n<p><strong>安装 Genymotion</strong><br />\n 在 Genymotion 官网注册账户，下载并安装 Genymotion 和 VirtualBox。<br />\n在 Genymotion 中选择手机机型（例如 Nexus 4），并配置 Android 版本（例如 Android 11.0）。</p>\n</li>\n<li>\n<p><strong>验证 ADB 连接</strong><br />\n确保虚拟机启动后 <code>adb</code>  能够识别设备。</p>\n</li>\n<li>\n<p><strong>安装 Droidbot</strong><br />\n 从 Droidbot 的 GitHub 页面下载并解压 Droidbot。<br />\n在 <code>setup.py</code>  所在的文件夹中运行 <code>pip install -e .</code>  安装 Droidbot，完成后可通过 <code>droidbot -h</code>  验证。</p>\n</li>\n</ol>\n<p><strong>Step 2 启动 Huawei P30 Pro 虚拟机</strong><br />\n在 Genymotion 中点击启动按钮，启动 Huawei P30 Pro 虚拟机。</p>\n<p><strong>Step 3 启动动态测试</strong><br />\n运行以下命令开始测试：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ droidbot <span class=\"token parameter variable\">-a</span> <span class=\"token operator\">&lt;</span>path_to_apk<span class=\"token operator\">></span> <span class=\"token parameter variable\">-o</span> output_dir</pre></td></tr></table></figure><p>测试结果如图 1 所示。</p>\n<p><img data-src=\"1.png\" alt=\"图1 启动动态测试结果\" /></p>\n<p><strong>Step 4 测试结果分析</strong><br />\n测试结果存储在 <code>output_dir</code>  中，直接打开 <code>index.html</code>  即可查看测试结果，打开结果如图 2 所示。</p>\n<p><img data-src=\"2.png\" alt=\"图2 测试结果分析页面\" /></p>\n<p>在该页面可以查看 app 信息、设备信息、测试结果（测试时间、覆盖率等）。</p>\n<h3 id=\"opera浏览器测试\"><a class=\"anchor\" href=\"#opera浏览器测试\">#</a> Opera 浏览器测试</h3>\n<p>从网上下载 x86 版本的 Opera 浏览器进行动态测试。<br />\nOpera 是一个强大而复杂的浏览器，此时使用 <code>Opera-65.2.3381.61420x86.apk</code>  版本进行测试，该 apk 可以从<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tb2JpbGUuc29mdHBlZGlhLmNvbS9hcGs=\"> https://mobile.softpedia.com/apk</span> 下载获取。<br />\n运行测试界面如图 3 所示。</p>\n<p><img data-src=\"3.png\" alt=\"图3 Opera浏览器测试界面\" /></p>\n<p>查看 Opera 浏览器的测试结果，可以得到控制流如图 4 所示。</p>\n<p><img data-src=\"4.png\" alt=\"图4 Opera测试流图\" /></p>\n<h3 id=\"chrome浏览器测试\"><a class=\"anchor\" href=\"#chrome浏览器测试\">#</a> Chrome 浏览器测试</h3>\n<p>同样从<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tb2JpbGUuc29mdHBlZGlhLmNvbS9hcGs=\"> https://mobile.softpedia.com/apk</span> 下载获取 x86 架构下的 Chrome 浏览器，名称为 <code>Chrome-91.0.4472.134 x86 + x86_64.apk</code> 。<br />\nChrome 浏览器的测试结果如图 5 所示。</p>\n<p><img data-src=\"5.png\" alt=\"图5 Chrome浏览器测试结果\" /></p>\n<p>似乎是因为 API 版本的问题，只正常安装了 Chrome 浏览器的搜索栏，而没有完整安装整个浏览器，导致测试只显示了搜索栏，背景还是系统主界面。</p>\n<h2 id=\"心得与体会\"><a class=\"anchor\" href=\"#心得与体会\">#</a> 心得与体会</h2>\n<p>通过本次实验，对 Android 应用的动态分析和自动化测试有了更深入的理解。整个测试过程让我体验到了 Droidbot 工具的便捷性及其在自动化测试中的重要作用。以下是我从实验中得到的主要体会：</p>\n<p>实验中 Droidbot 结合 Android Studio、Genymotion 虚拟机和 VirtualBox 等多种工具，通过模拟真实设备环境来完成对应用的动态测试。这种组合在实际测试应用场景中表现出了高效的兼容性，尤其在调试和测试不同 Android 版本的应用时，减少了许多配置与环境兼容的困扰，使整个测试过程更加流畅。</p>\n<p>Droidbot 能够自动模拟用户操作并覆盖应用的各个功能模块，不仅提高了测试的覆盖率，还降低了手动测试的工作量。在应用测试中，Droidbot 有效地捕获了应用的控制流和行为流程，为分析应用的稳定性和潜在的安全问题提供了较全面的数据支持。</p>\n<p>由于 Android 设备种类繁多，操作系统版本各异，兼容性测试始终是一个复杂而重要的环节。本次实验通过多样化的虚拟设备配置，如 Huawei P30 Pro 和不同架构的应用测试，显著帮助我了解了如何在模拟环境中解决兼容性问题。然而，在配置虚拟设备与实际设备时，仍然存在一定的兼容性差异，因此在实践中还需注意不同虚拟设备的性能差异和 API 的适配性。</p>\n<p>Droidbot 输出的详细报告为我们提供了应用的功能覆盖情况、测试时间和用户交互等信息，有助于分析应用的稳定性、性能和行为模式。在实际应用中，通过测试报告数据，能够快速识别出应用的潜在风险点，并为优化应用提供可靠的依据。实验让我意识到测试分析结果的重要性以及自动化工具在数据收集和分析上的优势。</p>\n<p>综上所述，本次实验加深了我对 Android 应用动态测试的理解，提升了在虚拟环境中进行自动化测试的技能，同时认识到在应用测试中合理选择和搭配工具的重要性。</p>\n<h1 id=\"静态分析\"><a class=\"anchor\" href=\"#静态分析\">#</a> 静态分析</h1>\n<h2 id=\"实验目的-2\"><a class=\"anchor\" href=\"#实验目的-2\">#</a> 实验目的</h2>\n<p>本实验的主要目的是通过静态分析工具 Soot 对 Java 程序和 APK 文件进行深入分析，掌握 Soot 的基本操作与配置流程。实验将演示如何利用 Soot 获取 Java 类的继承关系、方法调用链及其 Jimple 中间表示，从而为后续的静态污点分析和代码审计等安全分析奠定基础。同时，实验包含对 APK 文件的分析过程，识别应用程序中可能的安全隐患。</p>\n<h2 id=\"实验环境-2\"><a class=\"anchor\" href=\"#实验环境-2\">#</a> 实验环境</h2>\n<ul>\n<li>IntelliJ IDEA 2023.3.8 (Community Edition)</li>\n<li>Java 20 2023-03-21</li>\n<li>Java(TM) SE Runtime Environment (build 20+36-2344)</li>\n<li>Java HotSpot(TM) 64-Bit Server VM (build 20+36-2344, mixed mode, sharing)</li>\n</ul>\n<h2 id=\"实验过程-2\"><a class=\"anchor\" href=\"#实验过程-2\">#</a> 实验过程</h2>\n<h3 id=\"案例一\"><a class=\"anchor\" href=\"#案例一\">#</a> 案例一</h3>\n<p><strong>Step 1 环境搭建</strong></p>\n<ol>\n<li>\n<p><strong>创建 Maven 项目</strong><br />\n在 IDEA 中创建 Maven 项目，并配置  <code>pom.xml</code>  文件，将 Soot 库作为依赖项添加。如果 Maven 没有自动下载依赖，可以右键  <code>pom.xml</code>  文件并选择 “Maven -&gt; Reload project” 手动刷新。</p>\n</li>\n<li>\n<p><strong>编写 Demo 程序</strong><br />\n创建一个简单的 Java 类 Demo，例如一个  <code>HelloWorld</code>  类继承  <code>ParentClass</code>  类，以供 Soot 分析。</p>\n</li>\n<li>\n<p><strong>Soot 初始化与配置</strong><br />\n初始化 Soot，并设置其分析选项。具体的 Soot 配置选项可以参考官方文档。<br />\n分析任务通过 Soot 的不同阶段（Pack）和转换任务（Transform）进行配置，例如，使用  <code>Transform(&quot;jtp.myTransform&quot;, new BodyTransformer())</code>  注册一个转换任务到  <code>jtp</code>  阶段。使用  <code>PackManager.v().runPacks()</code>  运行所有已注册的转换任务。</p>\n</li>\n<li>\n<p><strong>执行 Soot</strong><br />\n 在代码中调用 Soot 完成分析，或使用  <code>mvn package</code>  将项目打包为 jar 文件以生成可执行文件（需配置 Maven 编译器插件）。</p>\n</li>\n</ol>\n<p><strong>Step 2 编写分析程序</strong></p>\n<p>静态分析的完整代码如代码段 1 所示。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 1. 初始化 Soot 的配置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">initSoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 2. 加载并解析具体的类</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> <span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 目标类的名称</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">SootClass</span> sootClass<span class=\"token operator\">=</span> <span class=\"token class-name\">Scene</span><span class=\"token punctuation\">.</span><span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadClassAndSupport</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        sootClass<span class=\"token punctuation\">.</span><span class=\"token function\">setApplicationClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 将其设置为应用类</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 3. 打印该类的继承关系</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sootClass<span class=\"token punctuation\">.</span><span class=\"token function\">hasSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">SootClass</span> superClass <span class=\"token operator\">=</span> sootClass<span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>className <span class=\"token operator\">+</span> <span class=\"token string\">\" extends \"</span> <span class=\"token operator\">+</span> superClass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>className <span class=\"token operator\">+</span> <span class=\"token string\">\" does not extend any class.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 4. 设置 PackManager，注册自定义的转换任务</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">PackManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPack</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jtp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Transform</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jtp.myTransform\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BodyTransformer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">internalTransform</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Body</span> body<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> phase<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token comment\">// 打印方法的 Jimple 表示</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>body <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">JimpleBody</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Analyzing method: \"</span> <span class=\"token operator\">+</span> body<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 打印 Jimple 表示</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 5. 启动 Soot 的分析任务，运行注册的任务</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">PackManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runPacks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 执行注册的分析</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initSoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">G</span><span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 清理全局状态</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">Options</span><span class=\"token punctuation\">.</span><span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set_prepend_classpath</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 将 Java 类路径加入 Soot 类路径</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">Options</span><span class=\"token punctuation\">.</span><span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set_allow_phantom_refs</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 允许 phantom 类引用</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">Options</span><span class=\"token punctuation\">.</span><span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set_output_format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Options</span><span class=\"token punctuation\">.</span>output_format_jimple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置输出为 Jimple 格式</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">String</span> classDir <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\Desktop\\\\项目\\\\JavaLearning\\\\SootProject\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// HelloWorld.class 文件的目录</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">Options</span><span class=\"token punctuation\">.</span><span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set_soot_classpath</span><span class=\"token punctuation\">(</span>classDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">Options</span><span class=\"token punctuation\">.</span><span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set_process_dir</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">singletonList</span><span class=\"token punctuation\">(</span>classDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">Scene</span><span class=\"token punctuation\">.</span><span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadNecessaryClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 加载必要的类到 Scene 中</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>Step 3 运行程序，分析结果</strong></p>\n<p>程序运行的部分结果如图 6 所示，以  <code>HelloWorld extends ParentClass</code>  为例分析其输出结果。</p>\n<p><img data-src=\"6.png\" alt=\"图6 静态分析案例1部分输出结果\" /></p>\n<ul>\n<li>输出  <code>HelloWorld extends ParentClass</code>  表明目标类  <code>HelloWorld</code>  继承自  <code>ParentClass</code> 。</li>\n<li>Soot 对  <code>HelloWorld</code>  和  <code>ParentClass</code>  的构造方法进行了分析，并打印了它们的 Jimple 表示。</li>\n</ul>\n<p>其中， <code>HelloWorld</code>  类的构造方法  <code>&lt;HelloWorld: void &lt;init&gt;()&gt;</code>  中的  <code>r0 := @this: HelloWorld;</code>  表示将当前对象  <code>this</code>  分配给本地变量  <code>r0</code> 。 <code>specialinvoke r0.&lt;ParentClass: void &lt;init&gt;()&gt;();</code>  表示调用父类  <code>ParentClass</code>  的构造方法。</p>\n<h3 id=\"案例二\"><a class=\"anchor\" href=\"#案例二\">#</a> 案例二</h3>\n<p>案例二核心代码如代码段 2 所示。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">String</span> appPath <span class=\"token operator\">=</span> <span class=\"token string\">\"D:/sootshow/apks/0C4F1EE788C58BF01616B0EF0FE0DE4E1A27D9274C4ECE231C0CC8E513BDD7DC.apk\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">String</span> androidJars <span class=\"token operator\">=</span> <span class=\"token string\">\"D:/android-platforms/\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arguments <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token string\">\"-process-dir\"</span><span class=\"token punctuation\">,</span> appPath<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token string\">\"-android-jars\"</span><span class=\"token punctuation\">,</span> androidJars<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token string\">\"-ire\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token string\">\"-pp\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token string\">\"-allow-phantom-refs\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token string\">\"-w\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token string\">\"-p\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cg\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"enabled:false\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">G</span><span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">APIPrintTransformer</span> transformer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">APIPrintTransformer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Options</span><span class=\"token punctuation\">.</span><span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set_src_prec</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Options</span><span class=\"token punctuation\">.</span>src_prec_apk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Options</span><span class=\"token punctuation\">.</span><span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set_output_format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Options</span><span class=\"token punctuation\">.</span>output_format_none<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">PackManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPack</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wjtp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Transform</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wjtp.MethodFeatureTransformer\"</span><span class=\"token punctuation\">,</span> transformer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token namespace\">soot<span class=\"token punctuation\">.</span></span>Main</span><span class=\"token punctuation\">.</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">APIPrintTransformer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SceneTransformer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">internalTransform</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> phaseName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">Chain</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SootClass</span><span class=\"token punctuation\">></span></span> sootClasses <span class=\"token operator\">=</span> <span class=\"token class-name\">Scene</span><span class=\"token punctuation\">.</span><span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SootClass</span> sc <span class=\"token operator\">:</span> sootClasses<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Class: \"</span> <span class=\"token operator\">+</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SootMethod</span> sm <span class=\"token operator\">:</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Method: \"</span> <span class=\"token operator\">+</span> sm<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">.</span><span class=\"token function\">isConcrete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        <span class=\"token class-name\">Body</span> body <span class=\"token operator\">=</span> sm<span class=\"token punctuation\">.</span><span class=\"token function\">retrieveActiveBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>body <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">JimpleBody</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jimple Code for method: \"</span> <span class=\"token operator\">+</span> sm<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error retrieving body for method: \"</span> <span class=\"token operator\">+</span> sm<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" - \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>程序的核心逻辑在  <code>APIPrintTransformer</code>  中。通过  <code>Scene.v().getApplicationClasses</code>  获取所有应用类，并对每个类输出其名称。如果方法是 concrete（具备具体实现），则获取其 JimpleBody（Jimple 表示的代码），成功获取 JimpleBody 后，打印方法签名和 Jimple 表示的代码。</p>\n<p>程序的运行结果如图 7 所示。以方法  <code>&lt;com.google.android.gms.f.cz: int a(java.lang.String,com.google.android.gms.f.dd)&gt;</code>  为例分析其输出结果。</p>\n<p><img data-src=\"7.png\" alt=\"图7 静态分析案例2部分输出结果\" /></p>\n<ul>\n<li>该方法名为  <code>a</code> ，属于  <code>com.google.android.gms.f.cz</code>  类。程序首先将当前对象  <code>this</code>  赋值给局部变量  <code>r0</code> ，再将第一个参数（类型为  <code>java.lang.String</code> ）赋值给局部变量  <code>$r1</code> ，将第二个参数（类型为  <code>com.google.android.gms.f.dd</code> ）赋值给局部变量  <code>$r2</code> 。</li>\n<li>程序调用  <code>$r1</code> （String 类型）对象的  <code>length()</code>  方法，获取字符串的长度并将其存储在  <code>$i0</code> ，调用  <code>$r2</code> （ <code>com.google.android.gms.f.dd</code>  类型）对象的  <code>c()</code>  方法获取整数值，存储在  <code>$i1</code> ，最后将  <code>$i0</code>  和  <code>$i1</code>  的值相加并将结果存储在  <code>$i0</code>  中。</li>\n</ul>\n<h2 id=\"心得与体会-2\"><a class=\"anchor\" href=\"#心得与体会-2\">#</a> 心得与体会</h2>\n<p>通过此次实验，我深入了解了静态分析工具 Soot 的强大功能和实际应用。在实验中，我们学习了如何使用 Soot 解析 Java 类的继承关系、方法调用链以及获取 Jimple 中间表示，为后续的代码分析打下坚实的基础。</p>\n<p>在案例一中，通过获取类的继承关系，我们更好地理解了 Java 类之间的层次结构；而在案例二中，Soot 帮助我们深入分析了</p>\n<p>APK 文件的方法逻辑，为应用的潜在安全隐患分析提供了支持。特别是  <code>APIPrintTransformer</code>  的实现，通过获取所有应用类及其方法的 Jimple 表示，我们能够清晰地看到程序的逻辑流程和关键变量的处理方式，为静态污点分析和代码审计提供了基础框架。</p>\n<p>此次实验让我体会到静态分析在安全检测中的重要作用。通过构建的工具和流程，我们可以在无需运行应用程序的情况下，识别可能的漏洞和风险。这种 “白盒” 测试方法在安全分析和优化中具有高效和可靠的优势。</p>\n",
            "tags": [
                "HUST本科学习",
                "HUST",
                "移动应用安全",
                "soot",
                "Droidbot"
            ]
        },
        {
            "id": "https://less1.top/Java-Learning/",
            "url": "https://less1.top/Java-Learning/",
            "title": "Java-Learning",
            "date_published": "2024-08-22T09:20:46.000Z",
            "content_html": "<h1 id=\"面向对象\"><a class=\"anchor\" href=\"#面向对象\">#</a> 面向对象</h1>\n<p>你是上帝，创造对象，让对象干活。</p>\n<p><strong>优点</strong>：减少代码量、可扩展性强、维护成本低<br />\n<strong>缺点</strong>：上帝视角、上手难度相对大</p>\n<h1 id=\"类\"><a class=\"anchor\" href=\"#类\">#</a> 类</h1>\n<p>设计方案：属性（class 里的变量，即成员变量） + 动作（public 不加 static，即成员方法）</p>\n<h1 id=\"对象\"><a class=\"anchor\" href=\"#对象\">#</a> 对象</h1>\n<p>类的实例。</p>\n<p><strong>创建方法</strong>： <code>new</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 类 引用 = new 类 ();</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>car c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"this关键字\"><a class=\"anchor\" href=\"#this关键字\">#</a> this 关键字</h1>\n<p>当前正在执行这个方法的对象。</p>\n<ul>\n<li>在调用方法的时候，Java 会自动地把对象传递给方法，在方法中由 <code>this</code>  来接收对象。</li>\n<li>不加 <code>this</code>  的变量的查找顺序：自己方法内找（局部变量）&gt;  <code>this</code>  里面找（成员变量）。</li>\n<li><code>this</code>  还可以调用当前类中的其他构造方法（通过 <code>this(参数)</code> ，而不是 <code>this.xxxx</code> ）。</li>\n</ul>\n<h1 id=\"构造方法\"><a class=\"anchor\" href=\"#构造方法\">#</a> 构造方法</h1>\n<ul>\n<li>没有返回值。</li>\n<li>在执行 <code>new</code>  的时候自动调用构造方法。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> 类名<span class=\"token punctuation\">(</span>参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"构造方法重载\"><a class=\"anchor\" href=\"#构造方法重载\">#</a> 构造方法重载</h1>\n<ul>\n<li>构造方法也是方法，也可以进行重载。</li>\n<li>方法名称相同，参数个数不同。</li>\n<li>从而可以有更多的方式创建对象。</li>\n</ul>\n<h1 id=\"static\"><a class=\"anchor\" href=\"#static\">#</a> static</h1>\n<ul>\n<li>静态的内容在内存中只保留一份。</li>\n<li>其内容由各个对象共享。</li>\n<li>推荐使用类名访问静态内容。</li>\n</ul>\n<h1 id=\"通用构造器静态构造器\"><a class=\"anchor\" href=\"#通用构造器静态构造器\">#</a> 通用构造器 &amp; 静态构造器</h1>\n<p>（都不常用）</p>\n<p>创建对象的过程：先执行静态构造器，再执行通用构造器，最后执行构造方法。因此，在静态方法里不能使用 <code>this</code> ，因为 <code>this</code>  还没生成。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> test<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这里是通用构造器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这里是静态构造器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"包\"><a class=\"anchor\" href=\"#包\">#</a> 包</h1>\n<ul>\n<li>所有程序都平铺在 <code>src</code>  里不好维护。</li>\n<li>包名一般用公司域名的翻转 (如 <code>com.baidu.tieba</code> )。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baidu<span class=\"token punctuation\">.</span>tieba</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"导包\"><a class=\"anchor\" href=\"#导包\">#</a> 导包</h1>\n<ul>\n<li>\n<p>不需要导包：</p>\n<ul>\n<li>在自己包里不需要导包；</li>\n<li><code>java.lang</code>  包下的所有内容不需要导包。</li>\n</ul>\n</li>\n<li>\n<p>导包格式：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baidu<span class=\"token punctuation\">.</span>tieba<span class=\"token punctuation\">.</span>person</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baidu<span class=\"token punctuation\">.</span>tieba<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"访问权限\"><a class=\"anchor\" href=\"#访问权限\">#</a> 访问权限</h1>\n<ul>\n<li><code>public</code>  公共的，所有人可访问（常用）。</li>\n<li><code>default</code>  包访问权限，自己包内可以随意访问。</li>\n<li><code>private</code>  私有的（常用）。</li>\n</ul>\n<h1 id=\"setter\"><a class=\"anchor\" href=\"#setter\">#</a> setter</h1>\n<ul>\n<li>给 <code>private</code>  成员变量赋值，可以添加保护。</li>\n<li>IDEA 可以右键 <code>generate -&gt; getter and setter</code>  自动生成。</li>\n</ul>\n<h1 id=\"getter\"><a class=\"anchor\" href=\"#getter\">#</a> getter</h1>\n<ul>\n<li>从 <code>private</code>  成员变量获取数据。</li>\n<li>IDEA 可以右键 <code>generate -&gt; getter and setter</code>  自动生成。</li>\n</ul>\n<h1 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h1>\n<p>子类可以自动拥有父类中除了私有内容外的其他所有内容。</p>\n<p><strong>作用</strong>：简化代码的开发。</p>\n<p>当出现 x 是一种 y 的时候，x 就可以继承 y（黑熊怪是一种妖怪）。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HeiXiongGuai</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">YaoGuai</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"super关键字\"><a class=\"anchor\" href=\"#super关键字\">#</a> super 关键字</h1>\n<ul>\n<li><code>this</code>  先找自己类再找父类， <code>super</code>  表示父类中的内容。</li>\n<li>可以用 <code>super</code>  和 <code>this</code>  来区分父类和子类中重名的内容。</li>\n<li>可以用 <code>super()</code>  来调用父类构造方法，需要写在子类构造方法的第一行。</li>\n<li>如果父类构造方法不包含参数，可以不写；如果包含参数，一定要写。</li>\n<li>在调用子类构造方法时，会在进入子类构造方法时调用父类构造方法，再回到子类的构造方法。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> zilei <span class=\"token keyword\">extends</span> fulei<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token function\">zilei</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 即使不加这行代码，这里也会默认调用 super ()</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是子类构造方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"方法的重写\"><a class=\"anchor\" href=\"#方法的重写\">#</a> 方法的重写</h1>\n<p>子类对父类中提供的方法进行重新定义。</p>\n<p><strong>语法</strong>：子类和父类中的方法的声明完全一致。</p>\n<h1 id=\"多态\"><a class=\"anchor\" href=\"#多态\">#</a> 多态</h1>\n<p>同一个对象拥有多种形态。</p>\n<p><strong>作用</strong>：把不同的数据类型进行统一，但真正执行的时候依然会按照每个数据类型进行执行。</p>\n<ul>\n<li>向上转型：把子类的对象赋值给父类的引用 (会屏蔽掉子类中特有的方法，因此还需要向下转型)。</li>\n<li>向下转型：把父类的变量转换回子类的变量（向下转型有风险，需要写强制类型转换）。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 向上转型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>animal ani1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>animal ani2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 向下转型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cat cc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">)</span>ani1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ani1<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 可执行</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">ani1<span class=\"token punctuation\">.</span></span>CatchMouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不可执行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">cc<span class=\"token punctuation\">.</span></span>CatchMouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 可执行</span></pre></td></tr></table></figure><h1 id=\"final\"><a class=\"anchor\" href=\"#final\">#</a> final</h1>\n<ul>\n<li>被 <code>final</code>  修饰的变量不可被改变，又被称为常量。</li>\n<li>被 <code>final</code>  修饰的方法不可被重写。</li>\n<li>被 <code>final</code>  修饰的类不可被继承，即不能产生子类。</li>\n</ul>\n<h1 id=\"抽象\"><a class=\"anchor\" href=\"#抽象\">#</a> 抽象</h1>\n<p>只声明，不实现。</p>\n<ul>\n<li>用 <code>abstract</code>  修饰方法，直接用分号结束。</li>\n<li>如果一个类中有抽象方法，那么这个类一定是一个抽象类。</li>\n<li>抽象类不可以造对象，即不可以 <code>new</code> 。</li>\n<li>抽象类的子类必须重写抽象类中的抽象方法（通过抽象类可以强制要求子类中有哪些方法）。</li>\n<li>抽象类中可以有正常的方法。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> animal<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">smell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// ……</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h1>\n<p>接口实际上是一种特殊的抽象类，其中所有的方法都是抽象方法。</p>\n<ul>\n<li>使用 <code>interface</code>  声明。</li>\n<li>能继承接口的只能是接口。</li>\n<li>接口和类只能是实现关系。</li>\n<li>接口同样具有多态性。</li>\n<li>方法可以省略 <code>abstract</code> 。</li>\n<li>接口中所有方法默认都是 <code>public</code>  的，所有变量都是全局静态最终常量。</li>\n<li>类只能单继承，而接口支持多实现。</li>\n</ul>\n<p><strong>作用</strong>：接口可以把很多不相关的东西进行整合。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> valuable<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getMoney</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 接口中所有的方法都是抽象方法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Gold</span> <span class=\"token keyword\">implements</span> valuable<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 必须要重写抽象方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getMoney</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"类实现接口，重写抽象方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Panda</span> <span class=\"token keyword\">extends</span> animal <span class=\"token keyword\">implements</span> valuable<span class=\"token punctuation\">,</span> protectable<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 类可以继承一个类，实现多个接口</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 接口同样具有多态性</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  panda p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Panda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  animal ani <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Panda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  valuable v <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Panda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  protectable p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Panda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"成员变量的初始值\"><a class=\"anchor\" href=\"#成员变量的初始值\">#</a> 成员变量的初始值</h1>\n<ul>\n<li>java 中所有的变量必须先声明再赋值才可使用</li>\n<li>java 中的成员变量在创建对象的时候都会执行一次初始化操作，给一个默认值：\n<ul>\n<li>byte:0</li>\n<li>short:0</li>\n<li>int:0</li>\n<li>long:0</li>\n<li>float:0.0</li>\n<li>double:0.0</li>\n<li>char:0</li>\n<li>boolean:false</li>\n<li>string (string 是 java 提供的一个类):null</li>\n<li>child (自己写的类):null</li>\n</ul>\n</li>\n<li>即基本数据类型默认都是 0，包括 boolean；引用数据类型都是 null</li>\n</ul>\n<h1 id=\"object\"><a class=\"anchor\" href=\"#object\">#</a> object</h1>\n<p><strong>所有的东西都是对象</strong></p>\n<ul>\n<li>object 是一个类，是所有类的根</li>\n<li>在 java 中，所有的类都要继承 object；我们写的类，即使不写继承关系，默认也会继承 object</li>\n<li>equals（object 提供的方法）：用来判断两个对象是否相等\n<ul>\n<li><em><strong>equals</strong></em> 和 <em><strong>==</strong></em></li>\n<li>== 一般用于基本数据类型，不用于对象</li>\n<li>equals 默认用法与 '==' 相同，但可以通过重写添加自己的判断逻辑</li>\n<li>equals 用法：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>字符串的判断一定要用 equals：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"lessone\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"lessone\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 重用了同一块内存</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str1<span class=\"token operator\">==</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">//true 地址相同</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//true 内容相同</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">String</span> str3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">String</span> str4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str1<span class=\"token operator\">==</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">//false 判断的是地址，地址不同</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//true String 中重写了 equals，用于判断内容是否相同</span></pre></td></tr></table></figure><ul>\n<li>toString（object 提供的方法）：对一个对象字符串的表示形式，JAVA 官方推荐重写这个方法\n<ul>\n<li>直接打印对象会默认执行 toString 方法</li>\n<li>默认的 toString 返回：<em>包名 + 类名 @内存地址</em></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"instanceof\"><a class=\"anchor\" href=\"#instanceof\">#</a> instanceof</h1>\n<ul>\n<li>instanceof 关键字：判断 xxx 对象是否是 xxx 类型的</li>\n<li>用法：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ani <span class=\"token keyword\">instanceof</span> cat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参数传递\"><a class=\"anchor\" href=\"#参数传递\">#</a> 参数传递</h1>\n<p>参数传递包括值传递和引用传递，java 使用的是值传递</p>\n<h2 id=\"值传递\"><a class=\"anchor\" href=\"#值传递\">#</a> 值传递</h2>\n<p>把变量的值作为参数传递</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">change</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 结果为 10</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>把变量作为参数传递</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">change2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cat</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NewName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建一个新的猫，change.c 指向新猫的地址，外面的 c 仍指向原来的猫的地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 运行完后 change.c 被回收，新猫被回收</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Cat</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OriginalName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">change2</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传入 c 的值，即原来的猫的地址</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OriginalName</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">change3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cat</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    c<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"NewNewName\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//c 为原来猫的地址，故修改成功</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Cat</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OriginalName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">change3</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传入 c 的值，即原来的猫的地址</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//NewNewName</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Java学习",
                "Java",
                "面向对象"
            ]
        },
        {
            "id": "https://less1.top/Gu-Mu-Cang-Cang/",
            "url": "https://less1.top/Gu-Mu-Cang-Cang/",
            "title": "[随笔] July",
            "date_published": "2024-08-01T07:04:06.000Z",
            "content_html": "<h1 id=\"quzhou-experimental-school\"><a class=\"anchor\" href=\"#quzhou-experimental-school\">#</a> Quzhou Experimental School</h1>\n<p><img data-src=\"1.jpg\" alt=\"sky\" /></p>\n<p><img data-src=\"2.jpg\" alt=\"playground\" /></p>\n<p><img data-src=\"3.jpg\" alt=\"flyover\" /></p>\n<p><img data-src=\"4.jpg\" alt=\"ling lake\" /></p>\n<h1 id=\"misc\"><a class=\"anchor\" href=\"#misc\">#</a> misc</h1>\n<p><img data-src=\"misc1.jpg\" alt=\" \" /></p>\n<p><img data-src=\"misc2.jpg\" alt=\" \" /></p>\n<p><img data-src=\"misc3.jpg\" alt=\" \" /></p>\n<p><img data-src=\"misc4.jpg\" alt=\" \" /></p>\n",
            "tags": [
                "随笔",
                "衢州市实验学校",
                "随笔"
            ]
        },
        {
            "id": "https://less1.top/OpenHarmony-Build-Error-Fix/",
            "url": "https://less1.top/OpenHarmony-Build-Error-Fix/",
            "title": "[报错修复]OpenHarmony编译报错修复",
            "date_published": "2024-03-21T12:50:14.000Z",
            "content_html": "<h1 id=\"gn-phase-failed修复\"><a class=\"anchor\" href=\"#gn-phase-failed修复\">#</a> GN phase failed 修复</h1>\n<h2 id=\"报错命令\"><a class=\"anchor\" href=\"#报错命令\">#</a> 报错命令</h2>\n<p>使用 OpenHarmony 源码编译，执行下面命令：</p>\n<pre><code>./build.sh ……\n</code></pre>\n<p>或</p>\n<pre><code>hb build\n</code></pre>\n<h2 id=\"报错信息\"><a class=\"anchor\" href=\"#报错信息\">#</a> 报错信息</h2>\n<p>程序报错提示下面的信息：</p>\n<pre><code>[OHOS INFO] ERROR at //build/config/BUILDCONFIG.gn:84:15: Could not read file.\n[OHOS INFO] read_file(&quot;$&#123;preloader_output_dir&#125;/build_config.json&quot;, &quot;json&quot;)\n[OHOS INFO] ^------------------------------------------\n[OHOS INFO] I resolved this to &quot;~/桌面/.../out/preloader/build_config.json&quot;.\n[OHOS INFO] root_out_dir=//out/xxxxx\n[OHOS INFO] root_build_dir=//out/xxxxx\n[OHOS INFO] root_gen_dir=//out/xxxxx/gen\n[OHOS INFO] current_toolchain=\n[OHOS ERROR] Traceback (most recent call last):\n[OHOS ERROR] File &quot;~/桌面/.../build/hb/services/gn.py&quot;, line 176, in _execute_gn_gen_cmd\n[OHOS ERROR] SystemUtil.exec_command(gn_gen_cmd, self.config.log_path)\n[OHOS ERROR] File &quot;~/桌面/xxxxx/build/hb/util/system_util.py&quot;, line 63, in exec_command\n[OHOS ERROR] raise OHOSException(\n[OHOS ERROR] exceptions.ohos_exception.OHOSException: Please check build log in ~/桌面/.../out/.../build.log\n[OHOS ERROR]\n[OHOS ERROR] During handling of the above exception, another exception occurred:\n[OHOS ERROR]\n[OHOS ERROR] Traceback (most recent call last):\n[OHOS ERROR] File &quot;~/桌面/.../build/hb/containers/status.py&quot;, line 47, in wrapper\n[OHOS ERROR] return func(args, **kwargs)\n[OHOS ERROR] File &quot;~/桌面/.../build/hb/services/gn.py&quot;, line 178, in _execute_gn_gen_cmd\n[OHOS ERROR] raise OHOSException('GN phase failed', '3000')\n[OHOS ERROR] exceptions.ohos_exception.OHOSException: GN phase failed\n[OHOS ERROR]\n[OHOS ERROR] Code: 3000\n[OHOS ERROR]\n[OHOS ERROR] Reason: GN phase failed\n[OHOS ERROR]\n[OHOS ERROR] Solution: Please check the compile log at out/&#123;compiling product&#125;/build.log, If you could analyze build logs.\n[OHOS ERROR] Or you can try the following steps to solve this problem:\n[OHOS ERROR] 1. cd to OHOS root path\n[OHOS ERROR] 2. run 'hb clean --all' or 'rm -rf out build/resources/args/.json'.\n[OHOS ERROR] 3. repo sync\n[OHOS ERROR] 4. repo forall -c 'git lfs pull'\n[OHOS ERROR] 5. bash build/prebuilts_download.sh\n[OHOS ERROR] 6. rebuild your product or component\n[OHOS ERROR]\n[OHOS ERROR] If you still cannot solve this problem, you could post this problem on:\n[OHOS ERROR] https://gitee.com/openharmony/build/issues\n[OHOS ERROR]\n=====build error=====\n</code></pre>\n<h2 id=\"解决方法\"><a class=\"anchor\" href=\"#解决方法\">#</a> 解决方法</h2>\n<p>习惯把下载的文件放在桌面上了，路径里面带了中文。。。。</p>\n<p><strong>换成英文路径</strong>即可</p>\n<p><s>究极低级问题，本来不想写到 blog 里的，但是网上搜不到解决方法，甚至有人在仓库下提了这个问题的 issue，开发者也没回，还是决定写一下</s></p>\n",
            "tags": [
                "OpenHarmony学习",
                "OpenHarmony",
                "编译",
                "报错修复"
            ]
        },
        {
            "id": "https://less1.top/Software-Security-Course-Design/",
            "url": "https://less1.top/Software-Security-Course-Design/",
            "title": "[HOOK]基于API HOOK的异常行为检测软件开发",
            "date_published": "2024-03-21T02:33:38.000Z",
            "content_html": "<h1 id=\"项目说明\"><a class=\"anchor\" href=\"#项目说明\">#</a> 项目说明</h1>\n<p>对于无源码情况下分析样本程序的行为，有多种方法。其中，基于 API HOOK 的方法是本次软件安全课程设计的任务。</p>\n<p>APIGuard 是我们设计的一款轻量级的、基于 Detours 库开发的异常行为检测软件。它的前端采用<strong> MFC</strong> 开发，后端依赖<strong> Detours</strong> 库，完成 dll 注射以及 Win API 截获的功能。</p>\n<p>其具体功能如下：</p>\n<ul>\n<li>APIGuard 能够完成对大部分<strong>弹窗、堆操作、文件操作、注册表操作、socket 操作和线程进程</strong>操作完成截获，并将调用的参数告知使用者。</li>\n<li>APIGuard 能够选择是否<strong>提示</strong>弹窗、堆操作、文件操作、注册表操作和 socket 操作的截获。</li>\n<li>APIGuard 能够告知用户程序企图创建进程并运行的程序名，并<strong>让用户选择是否运行</strong>。</li>\n<li>APIGuard 能够在截获的基础上完成一些<strong>异常行为分析</strong>，如程序自我复制、堆二次释放和创建恶意进程等。</li>\n<li>一些基本的软件信息，包括版权所有（<s>也许没用</s>）、联系作者和开源仓库跳转等。</li>\n</ul>\n<h1 id=\"环境搭建\"><a class=\"anchor\" href=\"#环境搭建\">#</a> 环境搭建</h1>\n<p>你可以在<em>发行版</em>中直接下载最新版 APIGuard，也可以搭建环境参与 APIGuard 开发：</p>\n<p>一些基本的操作流程如下：</p>\n<ul>\n<li>下载安装 Visual Studio 2022；</li>\n<li>下载 Detours 4.0.1 源码，并完成编译；</li>\n<li>打开 OurWork/Dll1/Dll1.sln 和 OurWork / 注射器 /injector/injector.sln，选择 “<em>项目</em>”-“<em>属性</em>”-“<em>VC++ 目录</em>”，修改<em>包含目录</em>和<em>库目录</em>为你的 Detours 4.0.1 编译结果路径。</li>\n<li>参与开发，丰富功能。</li>\n</ul>\n<h1 id=\"使用说明\"><a class=\"anchor\" href=\"#使用说明\">#</a> 使用说明</h1>\n<p>我们<em><strong>强烈建议</strong></em>在<strong>使用时关闭搜狗拼音</strong>，它会造成程序截获到未知原因的 “HeapFree” 等行为。</p>\n<p><img data-src=\"image.png\" alt=\"主UI\" /></p>\n<ul>\n<li>选择 “<em>文件</em>” - “<em>打开</em>” 运行可疑程序并开始截获。（如果你暂时不知道该运行什么，我们在 OurWork/app/app 中给出了一个测试程序）</li>\n<li>程序会在<em> Functions 框</em>中输出截获到的函数</li>\n<li>单击<em> Functions 框</em>，程序会在<em> Details 框</em>中显示调用参数、调用时间等详细信息</li>\n<li>当截获到一些潜在的危险行为，程序会在<em> Warnings 框</em>中输出提示信息</li>\n<li>选择 “<em>帮助 (H)</em>” 查看版权信息、联系我们。</li>\n</ul>\n<h1 id=\"开源仓库\"><a class=\"anchor\" href=\"#开源仓库\">#</a> 开源仓库</h1>\n<p>项目的开源仓库链接：</p>\n<p><div class=\"links\"><div class=\"item\" title=\"lessone\" style=\"--block-color:#9d5b8b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vbGVzcy1vbmUvaHVzdC1kZXRvdXJz\" data-background-image=\"/images/avatar.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vbGVzcy1vbmUvaHVzdC1kZXRvdXJz\">APIGuard</span>\n          <p class=\"desc\">APIGuard开源仓库</p>\n          </div></div></div></p>\n",
            "tags": [
                "HUST本科学习",
                "HUST",
                "API HOOK",
                "课程设计",
                "异常行为检测"
            ]
        },
        {
            "id": "https://less1.top/GameSecurityFinalWork/",
            "url": "https://less1.top/GameSecurityFinalWork/",
            "title": "[逆向分析]ShooterClient外挂分析",
            "date_published": "2024-02-21T07:17:54.000Z",
            "content_html": "<h1 id=\"shooterclient游戏分析\"><a class=\"anchor\" href=\"#shooterclient游戏分析\">#</a> ShooterClient 游戏分析</h1>\n<h2 id=\"查看游戏引擎\"><a class=\"anchor\" href=\"#查看游戏引擎\">#</a> 查看游戏引擎</h2>\n<ul>\n<li>ShooterClient 游戏分析部分的 UWorld、Gname 和 GObject 分析参考了：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi90aHJlYWQtMTY5NjgxNi0xLTEuaHRtbA==\">https://www.52pojie.cn/thread-1696816-1-1.html</span></li>\n</ul>\n<p>右键查看 ShooterClient.exe 属性，点击详细信息。<br />\n<img data-src=\"image.png\" alt=\"ShooterClient.exe属性详细信息截图\" /></p>\n<p>可以得知 ShooterClient 是由 Epic Games 的 Unreal Engine 4.22.2.0 开发的。</p>\n<h2 id=\"uworld分析\"><a class=\"anchor\" href=\"#uworld分析\">#</a> UWorld 分析</h2>\n<ul>\n<li>\n<p>分析查找 UWorld，用 x64dbg 附加到游戏，右键 “搜索”—“所有模块”—“字符串”。</p>\n</li>\n<li>\n<p>按下 “Ctrl+F”，搜索字符串<strong> SeamlessTravel FlushLevelStreaming</strong>。<br />\n<img data-src=\"image-1.png\" alt=\"查找字符串结果图\" /></p>\n</li>\n<li>\n<p>双击跳转到该地址，向上翻，找到语句‘btr edx,0x7’，再向上翻找到第一个基地址，即语句 'mov qword ptr ds:[7FF76DFC1060]' 中的地址即为 UWorld。<br />\n<img data-src=\"image-2.png\" alt=\"UWorld分析结果图\" /></p>\n</li>\n<li>\n<p>分析可知，UWorld 的地址为：<br />\n<strong>UWorld = ShooterClient.exe + 0x2F71060</strong></p>\n</li>\n</ul>\n<h2 id=\"gname分析\"><a class=\"anchor\" href=\"#gname分析\">#</a> Gname 分析</h2>\n<p>下面开始分析 GName。</p>\n<ul>\n<li>\n<p>将 Cheat Engine 附加到游戏，搜索字符串<strong> ByteProperty</strong>。<br />\n<img data-src=\"image-3.png\" alt=\"查找字符串结果图\" /></p>\n</li>\n<li>\n<p>依次选择每个地址，查看附近内存，选择附近内存包含 “None”“IntProperty” 等字符串的地址，最终锁定为地址‘1F32E080024’。<br />\n<img data-src=\"image-4.png\" alt=\"ByteProperty附近内存截图\" /></p>\n</li>\n<li>\n<p>分析字符串之间的间隔，选择该片内存地址的第一个地址，即 1F32E080000，在 CE 中搜索这个地址。<br />\n<img data-src=\"image-5.png\" alt=\"搜索地址1F32E080000结果图\" /></p>\n</li>\n<li>\n<p>继续选择地址 1F32E040000 作为新的扫描值，搜索地址。<br />\n<img data-src=\"image-6.png\" alt=\"搜索地址1F32E040000结果图\" /></p>\n</li>\n<li>\n<p>继续选择地址 1F32E030080 作为新的扫描值，搜索地址。<br />\n<img data-src=\"image-7.png\" alt=\"GName分析结果图\" /></p>\n</li>\n<li>\n<p>此时得到两个偏移地址，先暂存，后续代码验证发现 “ShooterClient.exe+2E6E0C0” 为 GName 偏移结果。故 GName 地址为：<strong>GName = ShooterClient.exe + 2E6E0C0</strong></p>\n</li>\n</ul>\n<h2 id=\"gobject分析\"><a class=\"anchor\" href=\"#gobject分析\">#</a> GObject 分析</h2>\n<p>下面开始分析 Gobject。</p>\n<ul>\n<li>\n<p>用 x64dbg 附加到游戏，搜索字符串 “CanvasObject”。<br />\n<img data-src=\"image-8.png\" alt=\"字符串搜索结果图\" /></p>\n</li>\n<li>\n<p>双击跳转到该地址，向上翻，找到语句‘sar eax,10’。这一条下面的基地址就是 GObject。<br />\n<img data-src=\"image-9.png\" alt=\"GObject分析结果图\" /></p>\n</li>\n</ul>\n<p>故 GObject 结果为：<strong>GObject = ShooterClient.exe + 2B8CA70</strong></p>\n<h2 id=\"分析实现\"><a class=\"anchor\" href=\"#分析实现\">#</a> 分析实现</h2>\n<h3 id=\"sdk-dump\"><a class=\"anchor\" href=\"#sdk-dump\">#</a> sdk dump</h3>\n<p>采用工具：UnrealEngineSDKGenerator 进行 dump 生成 sdk。工具如图所示。<br />\n<img data-src=\"image-10.png\" alt=\"dump工具截图\" /></p>\n<ul>\n<li>在游戏配置文件中修改 Gnames、GObjects 等参数后进行生成。<br />\n<img data-src=\"image-11.png\" alt=\"工具dump部分结果截图\" /></li>\n</ul>\n<h3 id=\"代码验证\"><a class=\"anchor\" href=\"#代码验证\">#</a> 代码验证</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdint></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;tlhelp32.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">GameProcessName</span> <span class=\"token string\">\"ShooterClient.exe\"</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Memory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string processName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    HANDLE processHandle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">Memory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">processHandle</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">SetProcessName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    \tprocessName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    \tHANDLE hSnapshot <span class=\"token operator\">=</span> <span class=\"token function\">CreateToolhelp32Snapshot</span><span class=\"token punctuation\">(</span>TH32CS_SNAPPROCESS<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    \t    PROCESSENTRY32 pe32<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    \t    pe32<span class=\"token punctuation\">.</span>dwSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PROCESSENTRY32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    \t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Process32First</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pe32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    \t        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    \t            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>pe32<span class=\"token punctuation\">.</span>szExeFile<span class=\"token punctuation\">,</span> processName<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    \t                processHandle <span class=\"token operator\">=</span> <span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> pe32<span class=\"token punctuation\">.</span>th32ProcessID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    \t                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    \t            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    \t        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Process32Next</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pe32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    \t    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    \t    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    \t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    T <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint64_t</span> address<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    \tT value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>processHandle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    \t    SIZE_T bytesRead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    \t    <span class=\"token function\">ReadProcessMemory</span><span class=\"token punctuation\">(</span>processHandle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCVOID<span class=\"token punctuation\">)</span>address<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>bytesRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    \t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    \t<span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">uint64_t</span> <span class=\"token function\">GetProcessBaseAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    \t<span class=\"token keyword\">uint64_t</span> baseAddress <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    \tHANDLE hSnapshot <span class=\"token operator\">=</span> <span class=\"token function\">CreateToolhelp32Snapshot</span><span class=\"token punctuation\">(</span>TH32CS_SNAPMODULE <span class=\"token operator\">|</span> TH32CS_SNAPMODULE32<span class=\"token punctuation\">,</span> <span class=\"token function\">GetProcessId</span><span class=\"token punctuation\">(</span>processHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hSnapshot <span class=\"token operator\">!=</span> INVALID_HANDLE_VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    \t    MODULEENTRY32 moduleEntry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    \t    moduleEntry<span class=\"token punctuation\">.</span>dwSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MODULEENTRY32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    \t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Module32First</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>moduleEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    \t        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    \t            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>moduleEntry<span class=\"token punctuation\">.</span>szModule<span class=\"token punctuation\">,</span> processName<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    \t                baseAddress <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">uint64_t</span><span class=\"token punctuation\">)</span>moduleEntry<span class=\"token punctuation\">.</span>modBaseAddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    \t                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    \t            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    \t        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Module32Next</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>moduleEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    \t    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    \t    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    \t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    \t<span class=\"token keyword\">return</span> baseAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token keyword\">bool</span> <span class=\"token function\">ReadBuffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint64_t</span> address<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> SIZE_T bufferSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>processHandle <span class=\"token operator\">&amp;&amp;</span> buffer <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    \t    SIZE_T bytesRead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    \t    <span class=\"token keyword\">return</span> <span class=\"token function\">ReadProcessMemory</span><span class=\"token punctuation\">(</span>processHandle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCVOID<span class=\"token punctuation\">)</span>address<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">,</span> bufferSize<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>bytesRead<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    \t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    \t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">Memory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>processHandle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>processHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>Memory<span class=\"token operator\">*</span> pMemory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">GlobalAddress</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">uint64_t</span> BaseAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">uint64_t</span> GNames<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token keyword\">uint64_t</span> GlobalAddress<span class=\"token double-colon punctuation\">::</span>BaseAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token keyword\">uint64_t</span> GlobalAddress<span class=\"token double-colon punctuation\">::</span>GNames<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ShooterClient_Loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">GetNameFormId_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token keyword\">int</span> ChunkIndex <span class=\"token operator\">=</span> Id <span class=\"token operator\">/</span> <span class=\"token number\">0x4000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token keyword\">int</span> WithinChunkIndex <span class=\"token operator\">=</span> Id <span class=\"token operator\">%</span> <span class=\"token number\">0x4000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token keyword\">uint64_t</span> NamePtr <span class=\"token operator\">=</span> pMemory<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">Read</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">uint64_t</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>GlobalAddress<span class=\"token double-colon punctuation\">::</span>GNames <span class=\"token operator\">+</span> <span class=\"token number\">0x8</span> <span class=\"token operator\">*</span> ChunkIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token keyword\">uint64_t</span> FName <span class=\"token operator\">=</span> pMemory<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">Read</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">uint64_t</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>NamePtr <span class=\"token operator\">+</span> <span class=\"token number\">0x8</span> <span class=\"token operator\">*</span> WithinChunkIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\tCHAR name<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\tpMemory<span class=\"token operator\">-></span><span class=\"token function\">ReadBuffer</span><span class=\"token punctuation\">(</span>FName<span class=\"token operator\">+</span><span class=\"token number\">0xc</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ShooterClient_Loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t<span class=\"token keyword\">uint64_t</span> UWorld <span class=\"token operator\">=</span> pMemory<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">Read</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">uint64_t</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>GlobalAddress<span class=\"token double-colon punctuation\">::</span>BaseAddress <span class=\"token operator\">+</span> <span class=\"token number\">0x2F71060</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t<span class=\"token keyword\">uint64_t</span> ULeval <span class=\"token operator\">=</span> pMemory<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">Read</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">uint64_t</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>UWorld <span class=\"token operator\">+</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token keyword\">uint64_t</span> Actor <span class=\"token operator\">=</span> pMemory<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">Read</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">uint64_t</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>ULeval <span class=\"token operator\">+</span> <span class=\"token number\">0x98</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token keyword\">uint32_t</span> Actor_Count <span class=\"token operator\">=</span> pMemory<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">Read</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">uint32_t</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>ULeval <span class=\"token operator\">+</span> <span class=\"token number\">0x98</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>Actor_Count<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t<span class=\"token keyword\">uint64_t</span> pObject <span class=\"token operator\">=</span> pMemory<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">Read</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">uint64_t</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>Actor <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> <span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t<span class=\"token keyword\">uint32_t</span> ObjectId <span class=\"token operator\">=</span> pMemory<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">Read</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">uint32_t</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>pObject <span class=\"token operator\">+</span> <span class=\"token number\">0x18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token comment\">//\t\tstd::cout&lt;&lt;\"pObject: \"&lt;&lt;pObject&lt;&lt;'\\n';</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>string ObjectName <span class=\"token operator\">=</span> <span class=\"token function\">GetNameFormId_</span><span class=\"token punctuation\">(</span>ObjectId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token comment\">//\t\tstd::cout&lt;&lt;\"ObjectName: \"&lt;&lt;ObjectName&lt;&lt;'\\n';</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ObjectName<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BotPawn_C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    \t\t<span class=\"token keyword\">uint64_t</span> botPositionAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    \t\tFLOAT bot<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    \t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pMemory<span class=\"token operator\">-></span><span class=\"token function\">ReadBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint64_t</span><span class=\"token punctuation\">)</span>pObject <span class=\"token operator\">+</span> <span class=\"token number\">0x3A0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>botPositionAddress<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>botPositionAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        \t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pMemory<span class=\"token operator\">-></span><span class=\"token function\">ReadBuffer</span><span class=\"token punctuation\">(</span>botPositionAddress <span class=\"token operator\">+</span> <span class=\"token number\">0x1A0</span><span class=\"token punctuation\">,</span> bot<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>bot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            \t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bot location: [x:%f, y:%f, z:%f]\\n\"</span><span class=\"token punctuation\">,</span> bot<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bot<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bot<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        \t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    \t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\tpMemory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Memory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\tpMemory<span class=\"token operator\">-></span><span class=\"token function\">SetProcessName</span><span class=\"token punctuation\">(</span>GameProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\tGlobalAddress<span class=\"token double-colon punctuation\">::</span>BaseAddress <span class=\"token operator\">=</span> pMemory<span class=\"token operator\">-></span><span class=\"token function\">GetProcessBaseAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\tGlobalAddress<span class=\"token double-colon punctuation\">::</span>GNames <span class=\"token operator\">=</span> pMemory<span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">Read</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">uint64_t</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>GlobalAddress<span class=\"token double-colon punctuation\">::</span>BaseAddress <span class=\"token operator\">+</span> <span class=\"token number\">0x2e6e0c0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t<span class=\"token function\">ShooterClient_Loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t\t<span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>ShooterClient_Loop () 遍历游戏对象的列表，检查它们的名称是否与 &quot;BotPawn_C&quot; 匹配，如果是，则提取并打印它们的位置。</li>\n<li>Memory 类负责处理与内存相关的操作。其中：\n<ul>\n<li>SetProcessName 函数设置进程名称，并尝试使用 Windows ToolHelp 函数打开对指定进程的句柄；</li>\n<li>Read 函数从指定地址的进程内存中读取指定类型的值；</li>\n<li>GetProcessBaseAddress 函数通过列举模块来检索进程的基址；</li>\n<li>ReadBuffer 函数从进程内存中读取数据缓冲区。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"实现结果\"><a class=\"anchor\" href=\"#实现结果\">#</a> 实现结果</h3>\n<ul>\n<li>\n<p>首先打印所有 Object。<br />\n<img data-src=\"image-12.png\" alt=\"编写程序打印Object结果图\" /></p>\n</li>\n<li>\n<p>尝试每隔 1 秒打印机器人位置坐标。</p>\n</li>\n</ul>\n<p><div id=\"dplayer0\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer0\"),\"loop\":\"yes\",\"screenshot\":\"yes\",\"video\":{\"url\":\"/cheat.mkv\"},\"danmaku\":{\"id\":\"someid\",\"api\":\"https://api.prprpr.me/dplayer/\",\"addition\":[\"/some.json\"]}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);player.on(\"loadstart\",function(){console.log(\"loadstart\")})})()</script></p>\n<h1 id=\"hack分析\"><a class=\"anchor\" href=\"#hack分析\">#</a> hack 分析</h1>\n<h2 id=\"detect-it-easy查壳\"><a class=\"anchor\" href=\"#detect-it-easy查壳\">#</a> Detect it easy 查壳</h2>\n<ul>\n<li>用 Detect It Easy 查看 hack.exe 文件加壳情况。如图 1 所示。<br />\n<img data-src=\"image-13.png\" alt=\"查壳\" /></li>\n<li>可知，hack.exe 通过 VMProtect 加壳。</li>\n</ul>\n<h2 id=\"导入函数分析\"><a class=\"anchor\" href=\"#导入函数分析\">#</a> 导入函数分析</h2>\n<ul>\n<li>用 ida64 查看 imports 导入函数，分析可能对调试有帮助的函数。<br />\n<img data-src=\"image-14.png\" alt=\"Ida部分导入函数截图\" /></li>\n<li>可以看到，导入函数中包括了：\n<ul>\n<li>反调试：\n<ul>\n<li>IsDebuggerPresent\t 检测是否在调试器下运行</li>\n</ul>\n</li>\n<li>进程和线程操作：\n<ul>\n<li>GetCurrentProcess, GetCurrentProcessId: 获取当前进程及其 ID。</li>\n<li>CreateToolhelp32Snapshot, Process32First, Process32Next: 进程遍历函数。</li>\n<li>OpenProcess, TerminateProcess: 打开或终止进程。</li>\n<li>CreateEventW, SetEvent, WaitForSingleObject: 事件操作函数。</li>\n<li>GetThreadLocale, GetUserDefaultLCID, GetSystemDefaultLCID: 处理地区和语言信息。</li>\n</ul>\n</li>\n<li>内存和堆操作：\n<ul>\n<li>GlobalAlloc, GlobalFree, GlobalLock, GlobalUnlock: 全局内存操作函数。</li>\n<li>HeapAlloc, HeapFree: 堆内存操作函数。</li>\n<li>LocalAlloc, LocalFree: 本地内存操作函数。</li>\n</ul>\n</li>\n<li>鼠标操作：\n<ul>\n<li>SetCursorPos, GetCursorPos, SetCapture, ReleaseCapture: 鼠标操作。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>通过导入函数，猜测 hack.exe 主要通过：</p>\n<ul>\n<li>使用 CreateToolhelp32Snapshot、Process32First 和 Process32Next 等函数<em>遍历系统进程，找到游戏进程</em>；</li>\n<li>使用 ReadProcessMemory 函数<em>读取游戏进程的内存，包括机器人的位置信息</em>；</li>\n<li>使用 GetAsyncKeyState <em>获取按键状态，判断是否按下鼠标右键</em>；</li>\n<li>如果获取鼠标按下右键，则调用 SetCursorPos <em>设置鼠标位置，用于自动瞄准</em>。</li>\n</ul>\n<h2 id=\"x64dbg调试查找oep\"><a class=\"anchor\" href=\"#x64dbg调试查找oep\">#</a> x64dbg 调试查找 OEP</h2>\n<h3 id=\"方法一\"><a class=\"anchor\" href=\"#方法一\">#</a> 方法一</h3>\n<ul>\n<li>使用 x64dbg 调试 hack.exe，使用 ScyllaHide 插件绕过反调试，将 Loaded 选项设置为 VMProtect x86/x64。</li>\n<li><img data-src=\"image-15.png\" alt=\"ScyllaHide插件绕过反调试设置\" /></li>\n</ul>\n<ol>\n<li>一次‘运行’后，hack.exe 来到 Entrypoint，紧接着三次‘运行’，hack.exe 在三次‘nop’指令后正常运行。<br />\n<img data-src=\"image-16.png\" alt=\"三次nop后正常运行\" /></li>\n<li>从 Entrypoint 处重新开始调试，一直单步步过，直到语句‘pushfq’，如所示。<br />\n<img data-src=\"image-17.png\" alt=\"步过到pushfq语句\" /></li>\n<li>发现只有 RSP 寄存器发生变化，符合 ESP 脱壳定律，右键点击 RSP，选择 “在内存窗口中转到”，对此时的 RSP 值 “14FF00” 下硬件访问断点。<br />\n<img data-src=\"image-18.png\" alt=\"对栈顶下断点截图\" /></li>\n<li>一直 F9，经过三次 nop 和多次无关指令后停留在下图所示处。<br />\n<img data-src=\"image-19.png\" alt=\"多次F9后停留位置\" /></li>\n<li>发现此时 RSP（14FF08）接近 pushfq 时的（14FF00），且在当前代码上方找到 popfq。</li>\n<li>继续单步步入，程序 jmp 到图 8 所示位置，观察这部分代码：<br />\n<strong>sub rsp 28” + call + “add rsp 28，为 Visual Studio 程序的常见脱壳入口点，故得到 OEP，即 140052188。</strong><br />\n<img data-src=\"image-20.png\" alt=\"方法一程序OEP位置截图\" /><br />\n常见脱壳入口点：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC85NmE2ZGQ2YTBjZTUlRTMlODAlODI=\">https://www.jianshu.com/p/96a6dd6a0ce5。</span><br />\n<img data-src=\"image-21.png\" alt=\"脱壳入口特征\" /></li>\n</ol>\n<h3 id=\"方法二\"><a class=\"anchor\" href=\"#方法二\">#</a> 方法二</h3>\n<ol>\n<li>\n<p>根据 2.2 导入函数分析的结果，选择‘CreateToolhelp32Snapshot’作为断点进行调试最合适。在 x64dbg 中按下‘Ctrl + G’，输入‘CreateToolhelp32Snapshot’，转到地址，设置断点，结果如下图所示。<br />\n<img data-src=\"image-22.png\" alt=\"为‘CreateToolhelp32Snapshot’创建断点\" /></p>\n</li>\n<li>\n<p>继续调试，发现程序会两次停留在‘CreateToolhelp32Snapshot’处的断点，其中第二次断下时，RAX 的值为 “ShooterClient.exe”，故猜测此次为查找游戏进程。<br />\n<img data-src=\"image-24.png\" alt=\"根据第二次断下时RAX的值判断为查找游戏进程\" /></p>\n</li>\n<li>\n<p>查看此时的调用堆栈，如下图所示。<br />\n<img data-src=\"image-25.png\" alt=\"第二次断下时的堆栈调用截图\" /></p>\n</li>\n<li>\n<p>根据此时的断点位置（kernel32.00007FF88C856AF0），锁定在 33956 线程，如图 13 所示。<br />\n<img data-src=\"image-26.png\" alt=\"33956线程堆栈调用截图\" /></p>\n</li>\n<li>\n<p>从下往上查找第一个以 hack 为基地址的地址，锁定在 hack.0000000140052118，双击跳转到该地址。<br />\n<img data-src=\"image-27.png\" alt=\"主程序进调用的地址截图\" /></p>\n</li>\n<li>\n<p>向上找到程序入口，找到该片段的第一条指令，地址为 14005200C，如下图所示。<br />\n<img data-src=\"image-28.png\" alt=\"该片段第一条指令截图\" /></p>\n</li>\n<li>\n<p>单击右键，查找引用 — 选中的地址。<br />\n<img data-src=\"image-29.png\" alt=\"查找引用截图\" /><br />\n<img data-src=\"image-30.png\" alt=\"查找引用结果截图\" /></p>\n</li>\n<li>\n<p>找到地址，双击进入查看，同样能找到 OEP。<br />\n<img data-src=\"image-31.png\" alt=\"方法二查找OEP结果截图\" /></p>\n</li>\n</ol>\n<h2 id=\"脱壳\"><a class=\"anchor\" href=\"#脱壳\">#</a> 脱壳</h2>\n<ul>\n<li>使用 x64dbg 自带的 scylla 插件 dump 脱壳。点击‘dump’，再点击 IAT Autosearch，最后点击 Get Imports，结果如下图所示。<br />\n<img data-src=\"image-32.png\" alt=\"Scylla dump截图\" /></li>\n<li>点击‘Fix Dump’，得到脱壳后的程序 hack_dump_SCY.exe。</li>\n<li>使用 DIE 查看脱壳结果，如下图所示。<br />\n<img data-src=\"image-33.png\" alt=\"DIE查看hack_dump_SCY.exe\" /></li>\n<li>说明脱壳成功，打开 hack_dump_SCY.exe，文件能正常运行。</li>\n</ul>\n<p><img data-src=\"image-34.png\" alt=\"hack_dump_SCY.exe正常运行截图\" /></p>\n<h2 id=\"ida分析脱壳后的文件\"><a class=\"anchor\" href=\"#ida分析脱壳后的文件\">#</a> IDA 分析脱壳后的文件</h2>\n<h3 id=\"main函数分析\"><a class=\"anchor\" href=\"#main函数分析\">#</a> main 函数分析</h3>\n<ol>\n<li>\n<p>用 IDA 打开脱壳后的 hack_dump_SCY.exe，“Ctrl + F” 查找 main 函数，分析 main 函数逻辑。<br />\n<img data-src=\"image-35.png\" alt=\"hack_dump_SCY.exe main函数\" /></p>\n</li>\n<li>\n<p>依次分析 main 中的主要代码，主要函数逻辑用注释标出。</p>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  __int64 v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  __int64 v8<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v9<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  __int64 v10<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">char</span> v12<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+21h] [rbp-C7h] BYREF</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">char</span> v13<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+22h] [rbp-C6h] BYREF</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">char</span> v14<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+23h] [rbp-C5h] BYREF</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">char</span> v15<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+24h] [rbp-C4h] BYREF</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">char</span> v16<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+25h] [rbp-C3h] BYREF</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v17<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+28h] [rbp-C0h]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  __int64 v18<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+30h] [rbp-B8h]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  LPCSTR lpWindowName<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+38h] [rbp-B0h]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  LPCSTR lpClassName<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+40h] [rbp-A8h]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  HWND hWnd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+48h] [rbp-A0h]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  __int64 v22<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+50h] [rbp-98h]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>v23<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+58h] [rbp-90h]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  __int64 v24<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+60h] [rbp-88h]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  __int64 v25<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+68h] [rbp-80h]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">char</span> v26<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+70h] [rbp-78h] BYREF</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">char</span> v27<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+7Bh] [rbp-6Dh] BYREF</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">char</span> v28<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+88h] [rbp-60h] BYREF</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">char</span> v29<span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+96h] [rbp-52h] BYREF</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">char</span> v30<span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+A8h] [rbp-40h] BYREF</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">char</span> v31<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+C0h] [rbp-28h] BYREF</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  v3 <span class=\"token operator\">=</span> <span class=\"token function\">sub_1400036B0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v12<span class=\"token punctuation\">,</span> v29<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 读取 th32ProcessID 解混淆前的数据</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  v4 <span class=\"token operator\">=</span> <span class=\"token function\">sub_140003920</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 解混淆得到 \"ShooterClient.exe\"</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  th32ProcessID <span class=\"token operator\">=</span> <span class=\"token function\">sub_140001920</span><span class=\"token punctuation\">(</span>v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 获取游戏进程的 ID</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int8<span class=\"token punctuation\">)</span><span class=\"token function\">sub_1400019C0</span><span class=\"token punctuation\">(</span>th32ProcessID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token comment\">// 检查游戏进程是否存在</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    v5 <span class=\"token operator\">=</span> <span class=\"token function\">sub_1400037F0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v13<span class=\"token punctuation\">,</span> v28<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 读取 lpWindowName 解混淆前的数据</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    lpWindowName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LPCSTR<span class=\"token punctuation\">)</span><span class=\"token function\">sub_1400038E0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 解混淆得到 \"ShooterGame\"</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    v6 <span class=\"token operator\">=</span> <span class=\"token function\">sub_140003750</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v14<span class=\"token punctuation\">,</span> v27<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 读取 lpClassName 解混淆前的数据</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    lpClassName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LPCSTR<span class=\"token punctuation\">)</span><span class=\"token function\">sub_140003900</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 解混淆得到 \"UnrealWindow\"</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    hWnd <span class=\"token operator\">=</span> <span class=\"token function\">FindWindowA</span><span class=\"token punctuation\">(</span>lpClassName<span class=\"token punctuation\">,</span> lpWindowName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 根据窗口类名和窗口标题查找游戏窗口的句柄</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">GetClientRect</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 获取游戏窗口的坐标</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    v7 <span class=\"token operator\">=</span> <span class=\"token function\">sub_1400036B0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v15<span class=\"token punctuation\">,</span> v30<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 读取数据</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    v8 <span class=\"token operator\">=</span> <span class=\"token function\">sub_140003920</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>v7<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 解混淆得到 \"ShooterClient.exe\"</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    qword_1400C12E0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span><span class=\"token function\">sub_140001AA0</span><span class=\"token punctuation\">(</span>v8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 遍历进程，找到游戏模块的基址</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    v17 <span class=\"token operator\">=</span> <span class=\"token function\">sub_140051874</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0u</span>i64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 申请一块内存</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v17 <span class=\"token punctuation\">)</span>                                  <span class=\"token comment\">// 申请内存成功</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      v18 <span class=\"token operator\">=</span> <span class=\"token function\">sub_14004C570</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>v17<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 初始化内存</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      v18 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>i64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    v22 <span class=\"token operator\">=</span> v18<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    qword_1400C12A8 <span class=\"token operator\">=</span> v18<span class=\"token punctuation\">;</span>                      <span class=\"token comment\">// 将初始化的内存地址保存到全局变量中</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v18 <span class=\"token operator\">+</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> Rect<span class=\"token punctuation\">.</span>right <span class=\"token operator\">-</span> Rect<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span><span class=\"token comment\">// 将窗口的宽度保存到内存中</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>qword_1400C12A8 <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> Rect<span class=\"token punctuation\">.</span>bottom <span class=\"token operator\">-</span> Rect<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">;</span><span class=\"token comment\">// 将窗口的高度保存到内存中</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    v23 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>v31<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    v9 <span class=\"token operator\">=</span> <span class=\"token function\">sub_140003890</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>v16<span class=\"token punctuation\">,</span> v26<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 读取混淆前数据</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    v10 <span class=\"token operator\">=</span> <span class=\"token function\">sub_1400038C0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>v9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 解混淆得到 \"simhei.ttf\"(一种字体)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    v24 <span class=\"token operator\">=</span> <span class=\"token function\">sub_140003B10</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>v23<span class=\"token punctuation\">,</span> v10<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 设置字体为 simhei.ttf</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    v25 <span class=\"token operator\">=</span> v24<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token function\">sub_14004CD10</span><span class=\"token punctuation\">(</span>qword_1400C12A8<span class=\"token punctuation\">,</span> v24<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>sub_140003460<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 根据初始化的内存，以 simhei.ttf 为字体，创建一个窗口，实现作弊逻辑</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token function\">sub_1400581EC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"读取数据解混淆\"><a class=\"anchor\" href=\"#读取数据解混淆\">#</a> 读取数据解混淆</h3>\n<ul>\n<li>Hack.exe 对 th32ProcessID、lpWindowName 和 lpClassName 都做了混淆处理。且混淆方法相同，下面以 th32ProcessID 为例进行解混淆。</li>\n</ul>\n<h3 id=\"sub_1400036b0函数\"><a class=\"anchor\" href=\"#sub_1400036b0函数\">#</a> sub_1400036B0 函数</h3>\n<ul>\n<li>sub_1400036B0 函数用于读取混淆后的数据，sub_140003920 函数用于解混淆。<br />\n<img data-src=\"image-36.png\" alt=\"sub_1400036B0函数读取数据\" /></li>\n<li>查看 aKquthxl0kI 的值，如下图所示。<br />\n<img data-src=\"image-37.png\" alt=\"aKquthxl0kI的值\" /></li>\n</ul>\n<h3 id=\"sub_140003920函数\"><a class=\"anchor\" href=\"#sub_140003920函数\">#</a> sub_140003920 函数</h3>\n<p><img data-src=\"image-38.png\" alt=\"sub_140003920函数调用sub_140003C40函数\" /><br />\n<img data-src=\"image-39.png\" alt=\"sub_140003C40函数调用sub_140003640函数\" /><br />\n<img data-src=\"image-40.png\" alt=\"sub_140003640函数截图\" /></p>\n<ul>\n<li>sub_140003640 函数中包含解混淆关键代码。</li>\n<li>结合 sub_1400036B0 函数读取的数据，编写代码验证结果，结果如下图所示。<br />\n<img data-src=\"image-41.png\" alt=\"th32ProcessID解混淆结果截图\" /></li>\n<li>分析可知，程序加密了读取的游戏进程名称，并在程序开始时通过解混淆得到该名称，加大了分析难度。</li>\n<li>其他解混淆结果如下图所示。<br />\n<img data-src=\"image-42.png\" alt=\"其他解混淆结果截图\" /></li>\n</ul>\n<h3 id=\"作弊逻辑实现\"><a class=\"anchor\" href=\"#作弊逻辑实现\">#</a> 作弊逻辑实现</h3>\n<ul>\n<li>根据 main 函数分析，不难得出，程序解混淆、找到游戏进程、获取偏移后会开始实现主要作弊逻辑。并且，根据对 hack.exe 的使用，作弊会在弹窗、根据用户选择作弊功能后开始进行。因此，依次查看弹窗后的调用的函数，寻找作弊代码，最终锁定在 sub_140003460 () 函数。<br />\n<img data-src=\"image-43.png\" alt=\"作弊函数\" /></li>\n<li>分别查看 sub_140001B50 () 和 sub_140003430 () 的代码。</li>\n</ul>\n<h3 id=\"sub_140001b50函数\"><a class=\"anchor\" href=\"#sub_140001b50函数\">#</a> sub_140001B50 () 函数</h3>\n<p><img data-src=\"image-44.png\" alt=\"sub_140001B50()函数代码截图\" /></p>\n<ul>\n<li>第 21 行程序调用 GetAsyncKeyState 函数，查看键码表可知，36 对应的是 HOME 键，打开 hack.exe，可以发现，HOME 键可以切换菜单的开关，故猜测该部分代码是实现菜单窗口逻辑。</li>\n<li>依次分析 if 中的函数，其主要逻辑和之前分析的解混淆相似，有两个取解混淆后的数据的函数，猜测是为了生成 UI。</li>\n</ul>\n<h3 id=\"sub_140003430函数\"><a class=\"anchor\" href=\"#sub_140003430函数\">#</a> sub_140003430 () 函数</h3>\n<p><img data-src=\"image-45.png\" alt=\"sub_140003430()函数代码截图\" /></p>\n<ul>\n<li>依次查看这几个函数，在 sub_140002D70 () 中找到熟悉的代码片段。<br />\n<img data-src=\"image-46.png\" alt=\"sub_140002D70()函数部分代码截图\" /></li>\n<li>55 行至 57 行的代码与 1.5.2 代码验证中的遍历对象代码形式相同，且偏移量 8*i 也相同，引起注意。仔细分析，可以发现该部分主要用于遍历所有的 Object 读取 name，与解混淆后的字符串比对，判断是否为机器人，若是机器人，则跳转执行后续操作。</li>\n<li>通过第 97 行 sub_140004350 () 中的 ReadProcessMemory 函数读取机器人坐标。</li>\n<li>外挂通过调用 ReadProcessMemory 函数，遍历所有 Actor 对象并过滤得到机器人的地址，再通过偏移得到各数据信息。</li>\n<li>再通过对将世界坐标系到视图坐标系的转换，将机器人坐标显示在屏幕上。<br />\n<img data-src=\"image-48.png\" alt=\"自瞄部分代码\" /></li>\n<li>第 136 行检查鼠标右键状态，并在第 145 行再次读取坐标，说明该部分代码主要实现自瞄逻辑。读取到机器人坐标，映射在屏幕上，再转换玩家视角，实现自瞄功能。</li>\n</ul>\n",
            "tags": [
                "HUST本科学习",
                "HUST",
                "游戏设计与安全",
                "shooterclient",
                "期末作业",
                "逆向分析"
            ]
        },
        {
            "id": "https://less1.top/SoftwareSecurity/",
            "url": "https://less1.top/SoftwareSecurity/",
            "title": "[课程复习]华中科技大学软件安全期末复习整理",
            "date_published": "2024-01-29T02:28:03.000Z",
            "content_html": "<h1 id=\"第一章\"><a class=\"anchor\" href=\"#第一章\">#</a> 第一章</h1>\n<p>网络空间的两个子空间：代码子空间、数据子空间</p>\n<h2 id=\"为什么软件测试无法保证软件的安全性\"><a class=\"anchor\" href=\"#为什么软件测试无法保证软件的安全性\">#</a> 为什么软件测试无法保证软件的安全性？</h2>\n<ol>\n<li>\n<p>由于软件系统规模越来越大，软件开发的进度要求越来越高，不可能在有限的时间内考虑所有安全方面的问题，即使进行了全方位的测试，也只能对所有的测试案例进行很小范围的覆盖。</p>\n</li>\n<li>\n<p>关于测试，另一个问题是，全面的测试，一般情况下是针对所有可能出现的隐患进行测试，但是这需要对软件的隐患具有全方位的预见性。而在有些情况下，很多隐患是在运行期间才显露出来的，软件的开发者很难在开发阶段预见到所有可能出现的隐患，容易让测试陷入盲目。</p>\n</li>\n</ol>\n<h2 id=\"存在问题的代码案例\"><a class=\"anchor\" href=\"#存在问题的代码案例\">#</a> 存在问题的代码案例</h2>\n<h2 id=\"软件缺陷和错误\"><a class=\"anchor\" href=\"#软件缺陷和错误\">#</a> 软件缺陷和错误</h2>\n<ul>\n<li>\n<p>错误是指软件实现过程出现的问题，大多数的错误可以很容易发现并修复，缓冲区溢出、死锁、不安全的系统调用、不完整的输入检测机制和不完善的数据保护措施等；</p>\n</li>\n<li>\n<p>缺陷是一个更深层次的问题，它往往产生于设计阶段并在代码中实例化且难于发现，如设计期间的功能划分问题等，这种问题带来的危害更大，但是不属于编程的范畴。</p>\n</li>\n</ul>\n<h2 id=\"软件安全问题产生的基本原因从软件工程客观角度\"><a class=\"anchor\" href=\"#软件安全问题产生的基本原因从软件工程客观角度\">#</a> 软件安全问题产生的基本原因（从软件工程客观角度）</h2>\n<p>从软件工程客观角度讲，软件的安全性隐患又来源于以下几个方面：</p>\n<ol>\n<li>\n<p>软件复杂性和工程进度的平衡（为什么软件测试无法保证软件的安全性 1）；</p>\n</li>\n<li>\n<p>安全问题的不可预见性（为什么软件测试无法保证软件的安全性 2）；</p>\n</li>\n<li>\n<p>由于软件需求的变动；</p>\n</li>\n<li>\n<p>软件组件之间的交互的不可预见性。</p>\n</li>\n</ol>\n<h2 id=\"软件安全防护手段理解基本原理\"><a class=\"anchor\" href=\"#软件安全防护手段理解基本原理\">#</a> 软件安全防护手段（理解基本原理）</h2>\n<ul>\n<li>安全设计与开发：在软件开发阶段尽量减少软件缺陷和漏洞的数量。微软：SDL 开发模式</li>\n<li>保障运行环境：软件完整性校验 &amp;&amp; 系统完整性校验（代表：可信计算）</li>\n<li>加强软件自身行为认证：向着预期的方式运行。信任链传递（静态可信 -&gt; 动态可信）</li>\n<li>恶意软件检测与查杀：反病毒软件</li>\n<li>黑客攻击防护：防火墙、入侵检测系统 IDS、入侵防护系统 IPS</li>\n<li>系统还原</li>\n<li>虚拟隔离：虚拟机、沙箱</li>\n</ul>\n<h1 id=\"第二章\"><a class=\"anchor\" href=\"#第二章\">#</a> 第二章</h1>\n<p>操作系统引导过程：BIOS→硬盘主引导（MBR）→活动分区主引导（DBR）→（操作系统引导程序）NTLDR/bootmgr→系统内核加载……</p>\n<p>恶意软件可以在哪些阶段重新获取控制权：系统引导、操作系统启动、应用程序执行。</p>\n<h2 id=\"程序在内存中的映像即程序地址空间分布\"><a class=\"anchor\" href=\"#程序在内存中的映像即程序地址空间分布\">#</a> 程序在内存中的映像，即程序地址空间分布</h2>\n<p><img data-src=\"image.png\" alt=\"Alt text\" /></p>\n<p><img data-src=\"image-1.png\" alt=\"Alt text\" /></p>\n<h2 id=\"两个进程的可执行程序映像加载地址都是00400000h但同一地址对应的的代码却不一样为什么\"><a class=\"anchor\" href=\"#两个进程的可执行程序映像加载地址都是00400000h但同一地址对应的的代码却不一样为什么\">#</a> 两个进程的可执行程序映像加载地址都是 00400000H，但同一地址对应的的代码却不一样，为什么？</h2>\n<p>虚拟地址经过不同的页表转换到不同的物理地址</p>\n<h2 id=\"有关malloc的三个思考题\"><a class=\"anchor\" href=\"#有关malloc的三个思考题\">#</a> 有关 malloc 的三个思考题</h2>\n<ol>\n<li>\n<p>windows 编程中 malloc 实际上能够支持多大的内存呢？</p>\n<p>Windows 下 32 位程序如果单纯看地址空间能有 4G 左右的内存可用，不过实际上系统会把其中 2G 的地址留给内核使用，所以你的程序最大能用 2G 的内存。 除去其他开销，你能用 malloc 申请到的内存只有 1.9G 左右。</p>\n</li>\n<li>\n<p>不断增加物理内存，能够增加 malloc 的内存大小吗？</p>\n<p>不断增加物理内存，并不能增加 malloc 的内存大小。</p>\n<p>首先需要明确的是：malloc 所申请到的内存大小并不是实际物理内存，而是虚拟内存。为什么 malloc 申请的是虚拟内存，不是物理内存呢？ 第一，由用户直接申请物理内存的方法提供给了用户直接访问物理地址的权力，而这样直接访问物理内存的方式过于危险；第二，只有物理内存才能运行和处理数据，但物理内存大小有限，如果将一个进程直接加载进物理内存太浪费空间。基于这两个原因，产生了使用虚拟内存的方法，让用户只能访问虚拟内存地址（如 malloc 申请内存），而由系统调配虚拟内存中的信息到物理内存中；避免了直接访问物理内存也避免了物理内存空间的浪费。</p>\n<p>其次，虚拟内存又是什么呢？ 物理内存指的就是我们电脑上的内存条，那虚拟内存既然不同于物理内存，且具有存储、读写数据的功能，那么很自然的我们就想到，虚拟内存的实际载体应该就是我们硬盘中没有被使用的部分。</p>\n<p>那么，虚拟内存又有多大呢？ 看到这里你可能认为，那既然虚拟内存的实际载体是硬盘，那它的大小应该和硬盘大小一样。但其实并不是这样的。为保证程序的组织、访问和载入的有序性，虚拟内存的大小被限定在一定范围内。对现有 32 位系统而言，虚拟内存的大小被设定为 2^32Byte=4GB。由此可见，虚拟内存的大小其实是由系统位数所决定的，和物理内存大小没有直接关系。</p>\n<p>这时我们便会思考，虚拟内存又是如何与物理内存联系的呢？ 实际上，系统为每个进程都分配了一个独立的 4GB 大小的虚拟内存空间。而这 4GB 大小的空间管理起来是很麻烦的，也不能直接把这些空间的内容加载进物理内存，因此，操作系统会自动对这个虚拟内存空间进行分页管理，将 4GB 划分成很多小页，并通过一个函数计算出当前虚拟内存地址在加载到物理内存时应该放在哪个物理地址，这些函数形成的表便是页表，通过这个页表就能将虚拟内存和物理内存联系起来。</p>\n<p>实际上，每个进程中只有很少一部分页加载并运行在物理内存上，绝大部分都处于虚拟内存中，正在等待被加载或者不需要被加载。当物理内存中的页被运行完成后，便通过页表信息将需要的页从虚拟内存加载进入物理内存进行运行。这样便完成了虚拟内存到物理内存的过程。</p>\n<p>综上可以得知，malloc 所能占用的大小就是一个进程的虚拟大小，而该大小由系统位数决定，和物理内存大小并没有实际关系。</p>\n</li>\n<li>\n<p>为什么增加物理内存，能够使得系统跑得更流畅呢？</p>\n<p>根据上面的理论，一部分进程在物理内存中运行完后，将进行下一部分的加载和运行，而增加物理内存后，可以使得加载的速度更快，等待的进程更少，从而使系统运行得更流畅。</p>\n<p>举个例子：假如物理内存跑 10 个就满了，不能再加了，那得等其中一个跑完再加载，这时候可能有 3 个还在等；但是扩大物理内存后，一个页还是那么大，所以同时能跑的个数就增加了，比如现在可能最多能跑 20 个，那系统原来运行了 13 个，有 3 个在等，而现在可以直接全跑上，不用等了，所以就快了。</p>\n</li>\n</ol>\n<h2 id=\"簇-fat\"><a class=\"anchor\" href=\"#簇-fat\">#</a> 簇 &amp;&amp; FAT</h2>\n<p>FAT 表是用于磁盘数据 (文件) 索引和定位引进的一种单向链式结构，表示簇的占用情况，表项的个数 = 簇的个数。</p>\n<p>簇大小 = 扇区大小（512B） * 2^n，簇是进行文件空间分配的最小单位。簇太大→浪费空间；簇太小→产生磁盘碎片。</p>\n<p>簇链：一个文件所占用的簇的序号形成的单向链表</p>\n<h2 id=\"为什么一般删除的文件可以恢复如何彻底删除文件\"><a class=\"anchor\" href=\"#为什么一般删除的文件可以恢复如何彻底删除文件\">#</a> 为什么一般删除的文件可以恢复 / 如何彻底删除文件？</h2>\n<p><img data-src=\"image-2.png\" alt=\"Alt text\" /></p>\n<p>清空回收站执行的操作就是删除该文件在 FAT 表中的记录。也就是说你执行彻底删除也就是删除并清空回收站后或者直接 shift+delete 删除，系统完成的操作就是在 FAT 表中标记这个文件已被移除，然后把红框框从磁盘上拿掉了，你的文件本质上还是存在的。</p>\n<p>删除文件并不是真正的 &quot;删除&quot; 文件，而是将被删除文件占用的磁盘位置标记为 &quot;可用空间&quot;，被删除文件只是被隐藏起来了。 当有新的文件要使用磁盘中这个位置时，系统就会直接覆盖原来的 &quot;被删除文件&quot;，这时才是真正意义上让文件消失。 这也是为什么删除文件的速度比复制文件的速度快的原因。 所以，如果执行删除操作后，文件的位置没有被覆盖，就能够轻松恢复，与删除时间无关。</p>\n<h2 id=\"peelf-具体文件格式及常用节头部\"><a class=\"anchor\" href=\"#peelf-具体文件格式及常用节头部\">#</a> PE/ELF 具体文件格式及常用节头部</h2>\n<p>常见的 exe、dll、ocx、sys、com 都是 PE 文件。</p>\n<p><img data-src=\"image-3.png\" alt=\"Alt text\" /></p>\n<p><img data-src=\"image-4.png\" alt=\"Alt text\" /></p>\n<h2 id=\"pe-文件与内存之间的映射\"><a class=\"anchor\" href=\"#pe-文件与内存之间的映射\">#</a> PE 文件与内存之间的映射</h2>\n<ul>\n<li>\n<p>文件偏移地址 FO/RA/Roffset：PE 文件在硬盘上存放时相对于文件头的偏移。</p>\n</li>\n<li>\n<p>装载地址 IB/Image Base：PE 装入内存时的基地址</p>\n</li>\n<li>\n<p>虚拟内存地址 VA：PE 文件中的指令被装入内存后的地址</p>\n</li>\n<li>\n<p>相对虚拟地址 RVA：指令的虚拟内存地址相对于装载基址的偏移量</p>\n</li>\n<li>\n<p>VA = Image Base + RVA</p>\n</li>\n<li>\n<p>磁盘：0x200 字节，内存 0x1000 字节。</p>\n</li>\n<li>\n<p>节偏移：由于磁盘和内存存储分配单位的差异引起的节基址之差；节偏移 = Voffset (该节在内存中的偏移量) - Roffset (该节在文件中的偏移量)</p>\n</li>\n<li>\n<p>文件偏移地址 FOA = VA − Image Base − VSO (虚拟内存节偏移)+FSO (文件节偏移) = RVA − VSO (虚拟内存节偏移 ) + FSO (文件节偏移)</p>\n</li>\n</ul>\n<p><img data-src=\"image-5.png\" alt=\"Alt text\" /></p>\n<h1 id=\"第三章\"><a class=\"anchor\" href=\"#第三章\">#</a> 第三章</h1>\n<p>恶意代码：设计目的是用来实现恶意功能的代码或程序。</p>\n<h2 id=\"恶意代码攻击目标\"><a class=\"anchor\" href=\"#恶意代码攻击目标\">#</a> 恶意代码攻击目标</h2>\n<ul>\n<li>\n<p>定点攻击：邮件、IP、域名、QQ、服务器列表、特定人员名单等</p>\n</li>\n<li>\n<p>群体性攻击：挂马攻击（在目标服务器或网站中植入恶意程序）、钓鱼攻击、病毒蠕虫自动扩散</p>\n</li>\n</ul>\n<p>注意：定点攻击和群体攻击的区分不是通过攻击的个体数量来区分，而是通过被攻击的个体是否能够被提前确定来区分。群体攻击中，无论是会传播的病毒木马还是钓鱼攻击，黑客在病毒、木马等被制作出来时不知道被攻击的对象是谁。</p>\n<h2 id=\"恶意代码功能静态-动态\"><a class=\"anchor\" href=\"#恶意代码功能静态-动态\">#</a> 恶意代码功能（静态、动态）</h2>\n<p>恶意代码功能：</p>\n<ol>\n<li>获取数据：静态数据（文件、数据库等）、动态数据（口令、内存、计算机网络流量、通信网络数据、可移动存储介质、隔离电脑等）</li>\n</ol>\n<p>静态数据和动态数据的区别：静态数据是指在运行过程中主要作为控制或参考用的数据，它们在很长的一段时间内不会变化，一般不随运行而变。动态数据包括所有在运行中发生变化的数据以及在运行中需要输入、输出的数据及在联机操作中要改变的数据。（来源：百度百科）</p>\n<ol start=\"2\">\n<li>\n<p>动态控制与渗透扩展攻击路径：中间系统、相关人员</p>\n</li>\n<li>\n<p>破坏系统：数据、系统服务、支撑设备</p>\n</li>\n</ol>\n<h2 id=\"计算机病毒与蠕虫定义\"><a class=\"anchor\" href=\"#计算机病毒与蠕虫定义\">#</a> 计算机病毒与蠕虫定义</h2>\n<ul>\n<li>\n<p>典型例子</p>\n<ul>\n<li>\n<p>病毒：熊猫烧香、CIH</p>\n</li>\n<li>\n<p>蠕虫：1988 年 Morris 莫里斯蠕虫、SQL 蠕虫王、震网、飞客、Stuxnet、flame；</p>\n</li>\n</ul>\n</li>\n<li>\n<p>各自特点及差异</p>\n<ul>\n<li>\n<p>病毒：病毒是通过感染计算机文件进行传播，以破坏或篡改用户数据，影响信息系统正常运行为主要目的恶意程序；是一段代码，能把自身加到程序其他程序包括操作系统上；它不能独立运行，需要由它的宿主运行来激活它</p>\n</li>\n<li>\n<p>蠕虫：蠕虫是指能自我复制和广泛传播，以占用系统和网络资源为主要目的的恶意序；可以独立运行，并能把自身的一个包含所有功能的版本传播到另外的计算机上。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"木马与后门定义\"><a class=\"anchor\" href=\"#木马与后门定义\">#</a> 木马与后门定义</h2>\n<ul>\n<li>木马：是指一类看起来具有正常功能，但实际上隐藏着很多用户不希望功能的程序。通常由控制端和被控制端两端组成。</li>\n</ul>\n<p>典型例子：上兴、冰河、网络神偷、灰鸽子</p>\n<ul>\n<li>后门：使得攻击者可以对系统进行非授权访问的一类程序。</li>\n</ul>\n<p>典型例子：sunburst 后门</p>\n<h2 id=\"刑法285-286修正案七的司法解释情节严重的情形\"><a class=\"anchor\" href=\"#刑法285-286修正案七的司法解释情节严重的情形\">#</a> 刑法 285、286 修正案（七）的司法解释（情节严重的情形）</h2>\n<p>第二百八十五条 违反国家规定，侵入国家事务、国防建设、尖端科学技术领域的计算机信息系统的，处三年以下有期徒刑或者拘役……</p>\n<p>具有下列情形之一的，应当认为刑法 <strong>第二百八十五条</strong> 第二款规定的 &quot;情节严重&quot;：</p>\n<p>（一）获取支付结算、证券交易、期货交易等网络金融服务的身份认证信息 <strong>十组</strong> 以上的；</p>\n<p>（二）获取第（一）项以外的身份认证信息 <strong>五百组</strong> 以上的；</p>\n<p>（三）非法控制计算机信息系统 <strong>二十台</strong> 以上的；</p>\n<p>（四）违法所得 <strong>五千元</strong> 以上或者造成经济损失 <strong>一万元</strong> 以上的；</p>\n<p>（五）其他情节严重的情形。</p>\n<p>实施前款规定行为，具有下列情形之一的，应当认定为刑法第二百八十五条第二款规定的 &quot;情节特别严重&quot;：</p>\n<p>（一）数量或者数额达到前款第（一）项至第（四）项规定标准 <strong>五倍以上</strong> 的；</p>\n<p>（二）其他情节特别严重的情形。</p>\n<p>情节严重：三年以下有期徒刑或者拘役，并处或者单处罚金；</p>\n<p>情节特别严重：三年以上七年以下有期徒刑，并处罚金</p>\n<p>第二百八十六条 违反国家规定，对计算机信息系统功能进行删除、修改、增加、干扰，造成计算机信息系统不能正常运行，后果严重的，处五年以下有期徒刑或者拘役；后果特别严重的，处五年以上有期徒刑……</p>\n<h1 id=\"第四章\"><a class=\"anchor\" href=\"#第四章\">#</a> 第四章</h1>\n<p>根据导出函数表定位函数内存地址的方法：</p>\n<ol>\n<li>\n<p>从 AddressOfNames 中获取到需要定位的函数的名字（记下函数名的索引）</p>\n</li>\n<li>\n<p>从 AddressOfNameOrdinals 中获取到该函数的编号（以索引定位）</p>\n</li>\n<li>\n<p>从 AddressOfFunctions 中获取该编号对应函数的地址（编号值就是数组索引值）</p>\n</li>\n</ol>\n<p>exe 文件本身也属于文件，要想找到一个 exe 文件的某个导入函数的内存地址，首先应该在 exe 文件中找到可选头中存放的_______________，通过这个来定位到_________的地址，在这里可以通过遍历所有结构的________________字段来获取到这个函数的索引，接着在_____________________中找到这个索引下的地址值，即为目标函数在内存中的地址。</p>\n<p>IDT 的 RVA；IDT；OriginalFirstThunk；IAT</p>\n<h1 id=\"第五章\"><a class=\"anchor\" href=\"#第五章\">#</a> 第五章</h1>\n<p>感染：在尽量不影响目标程序（系统）正常功能的前提下，使其具有病毒自己的功能。</p>\n<p>感染目标类型：文件感染、系统感染；</p>\n<h2 id=\"关键技术重定位-api函数获取-目标检索-感染\"><a class=\"anchor\" href=\"#关键技术重定位-api函数获取-目标检索-感染\">#</a> 关键技术（重定位、API 函数获取、目标检索、感染）</h2>\n<h4 id=\"1-重定位病毒代码目标寄生位置不固定\"><a class=\"anchor\" href=\"#1-重定位病毒代码目标寄生位置不固定\">#</a> (1) 重定位：病毒代码目标寄生位置不固定</h4>\n<p><strong>原因解释</strong> ：在编译时，有些基于 Image Base 的指令会将地址固定写死在指令之中，如 push 0x401215，这时修改 Image Base 会使得这条指令的意义丢失，因此需要重定位。在病毒代码编译后而没有植入时，其起始地址很可能不是我们想要病毒代码在 HOST 文件中的起始地址，需要进行移动。</p>\n<p><strong>本质</strong> ：其本质是修正实际地址与预期地址的差异</p>\n<p><strong>解决方案</strong> ：</p>\n<ol>\n<li>\n<p>逐一硬编码（较为繁琐）</p>\n</li>\n<li>\n<p>病毒代码运行过程中自我重定位</p>\n</li>\n</ol>\n<p>call 指令可以将下一条要执行的指令的地址压入栈，配合 pop 即可得到下一条指令的地址，以此病毒就可以知道自己的地址是什么。</p>\n<h4 id=\"2-api函数自获取需要使用api函数但无引入函数节支撑\"><a class=\"anchor\" href=\"#2-api函数自获取需要使用api函数但无引入函数节支撑\">#</a> (2) API 函数自获取：需要使用 API 函数，但无引入函数节支撑</h4>\n<p><strong>解决方法：</strong></p>\n<ol>\n<li>首先获得 kernel32 模块中的任何一个地址；</li>\n<li>然后按照模块首地址特征（对齐于 10000H，PE 文件开始标志 MZ），向低地址遍历定位 PE 文件头，得到 kernel32.dll 的模块加载基地址；</li>\n<li>然后通过 kernel32.dll 的引出目录表结构定位具体函数的函数地址。</li>\n</ol>\n<p><strong>实现 1 的方法：</strong></p>\n<p><strong>a.</strong>  <strong>利用程序的返回地址（程序入口代码执行时，</strong> stack <strong>顶端存储的地址）</strong></p>\n<p>原理：系统打开一个可执行文件时，它会调用 Kernel32.dll 中的 CreateProcess 函数，CreateProcess 函数在完成应用程序装载后，会先将返回地址压入到堆栈顶端。当该应用程序结束后，会将返回地址弹出放到 EIP 中，继续执行。</p>\n<p>而这个返回地址正处于 KERNEL32.DLL 的地址空间之中。这样，利用 PE 文件格式的相关特征（如 03C 偏移处内容存放着 &quot;PE&quot; 标志的内存地址等），在此地址的基础上往低地址方向逐渐搜索，必然可以找到 KERNEL32.DLL 模块的首地址。不过这种暴力搜索方法比较费时，并且可能会碰到一些异常情况。</p>\n<p><strong>b.</strong> <strong>通过</strong> SEH<strong> 链获得 KERNEL32 模块内地址</strong></p>\n<p>原理：遍历 SEH 链，在链中查找 prev 成员等于 0xFFFFFFFF 的 EXCEPTION_REGISTER 结构，该结构中 handler 值指向系统异常处理例程，它总是位于 KERNEL32 模块中。根据这一特性，然后进行向前搜索就可以查找 KERNEL32.DLL 在内存中的基地址。</p>\n<p><strong>c.</strong>  <strong>通过</strong> PEB <strong>相关数据结构获取</strong></p>\n<ul>\n<li>\n<p>fs:[0] 指向 TEB 结构，首先从 fs:[30h] 获得 PEB 地址，</p>\n</li>\n<li>\n<p>然后通过 PEB [0x0c] 获得 PEB_LDR_DATA 数据结构地址，</p>\n</li>\n<li>\n<p>然后通过从 PEB_LDR_DATA [0x1c] 获取 InInitializationOrderModuleList.Flink 地址，</p>\n</li>\n<li>\n<p>最后在 Flink [0x08] 中得到 KERNEL32.DLL 模块的基地址。</p>\n</li>\n<li>\n<p>这种方法比较通用，适用于 2K/XP/2003。</p>\n</li>\n<li>\n<p>在 Exploit 的编写中，也通常采用这种方式。</p>\n</li>\n</ul>\n<p><strong>d.</strong> <strong>Stack 特定高端地址的数据</strong></p>\n<p>这种方法只适用于 Windows NT 操作系统，但这种方法的代码量是最小的，只有 25B。</p>\n<p>每个执行的线程都有它自己的 TEB (线程环境块)，该块中存储着线程的栈顶的地址，从该地址向下偏移 0X1C 处的地址肯定位于 Kernel32.dll 中。则可以通过该地址向低地址以 64KB 为单位来查找 Kernel32.dll 的基地址。</p>\n<p><strong>获取指定函数内存地址的方法：</strong></p>\n<p>通过 Address of Names 数组查找函数名，记录索引值</p>\n<p>在 Address of Name Ordinals 编号数组中找到这个索引值对应的编号</p>\n<p>在 Address of Functions 数组中以编号为索引即可找到指定函数的内存地址</p>\n<h4 id=\"3-目标检索目标程序遍历搜索全盘查找或者部分盘符查找\"><a class=\"anchor\" href=\"#3-目标检索目标程序遍历搜索全盘查找或者部分盘符查找\">#</a> (3) 目标检索（目标程序遍历搜索）：全盘查找，或者部分盘符查找</h4>\n<ol>\n<li>\n<p>指定找到的目录为当前工作目录</p>\n</li>\n<li>\n<p>开始搜索文件 (*.*)</p>\n</li>\n<li>\n<p>该目录搜索完毕？是则返回，否则继续</p>\n</li>\n<li>\n<p>找到文件还是目录？是目录则调用自身函数 FindFile，否则继续</p>\n</li>\n<li>\n<p>是文件，如符合感染条件，则调用感染模块，否则继续</p>\n</li>\n<li>\n<p>搜索下一个文件 (FindNextFile)，转到 3 继续</p>\n</li>\n</ol>\n<h4 id=\"4-感染模块病毒代码插入位置选择与写入控制权返回机制\"><a class=\"anchor\" href=\"#4-感染模块病毒代码插入位置选择与写入控制权返回机制\">#</a> (4) 感染模块：病毒代码插入位置选择与写入，控制权返回机制</h4>\n<p>关键：病毒代码能够得到运行；程序的正常功能不能被破坏</p>\n<p>代码插入位置：添加新节；碎片式感染；插入式感染；伴随式感染。</p>\n<h2 id=\"重定位方法简单汇编语言理解\"><a class=\"anchor\" href=\"#重定位方法简单汇编语言理解\">#</a> 重定位方法（简单汇编语言理解）</h2>\n<p>计算正确地址与错误地址的偏差，并保存到全局寄存器中；当使用病毒变量时，与该值进行加运算，完成修正。</p>\n<p><img data-src=\"image-6.png\" alt=\"Alt text\" /></p>\n<p><img data-src=\"image-7.png\" alt=\"Alt text\" /></p>\n<p><img data-src=\"image-8.png\" alt=\"Alt text\" /></p>\n<p>校正值 = 真实地址（call 的） – 预期地址（offset）</p>\n<p>使用时用变量的预期地址（offset） + 校正值</p>\n<h2 id=\"增加新节感染的步骤\"><a class=\"anchor\" href=\"#增加新节感染的步骤\">#</a> 增加新节感染的步骤</h2>\n<p>感染文件的基本步骤：</p>\n<ol>\n<li>\n<p>判断目标文件开始的两个字节是否为 &quot;MZ&quot;。</p>\n</li>\n<li>\n<p>判断 PE 文件标记 &quot;PE&quot;。</p>\n</li>\n<li>\n<p>判断感染标记，如果已被感染过则跳出继续执行 HOST 程序，否则继续。</p>\n</li>\n<li>\n<p>获得 Directory（数据目录）的个数，（每个数据目录信息占 8 个字节）。</p>\n</li>\n<li>\n<p>得到节表起始位置。(Directory 的偏移地址 + 数据目录占用的字节数 = 节表起始位置)</p>\n</li>\n<li>\n<p>得到目前最后节表的末尾偏移（紧接其后用于写入一个新的病毒节）节表起始位置 + 节的个数 * 28H (每个节表占用的字节数 28H)= 目前最后节表的末尾偏移。</p>\n</li>\n<li>\n<p>开始写入节表和病毒节</p>\n</li>\n<li>\n<p>修正文件头信息</p>\n</li>\n</ol>\n<h2 id=\"捆绑式感染优缺点\"><a class=\"anchor\" href=\"#捆绑式感染优缺点\">#</a> 捆绑式感染（优缺点）</h2>\n<p>定义：将 HOST 作为数据存储在病毒体内，当执行病毒程序时，还原并执行 HOST 文件。</p>\n<p>例子：熊猫烧香病毒</p>\n<p>优点：编写简单、效率高。可感染自校验程序。</p>\n<p>缺点：被感染后的程序主体是病毒程序，易被发现（程序叠加＋释放执行），程序图标问题。</p>\n<h2 id=\"汇编病毒实验-kernel32dll基地址定位代码\"><a class=\"anchor\" href=\"#汇编病毒实验-kernel32dll基地址定位代码\">#</a> 汇编病毒实验 - kernel32.dll 基地址定位代码</h2>\n<p>实验采用的是利用程序的返回地址遍历（？）的方法。</p>\n<figure class=\"highlight armasm\"><figcaption data-lang=\"armasm\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>GetKernelBase proc dwKernelRet:     <span class=\"token comment\">; 定义一个过程（函数）名为 GetKernelBase，接受一个参数 dwKernelRet。  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token instruction keyword\">LOCAL</span> dwReturn:                     <span class=\"token comment\">; 定义一个局部变量 dwReturn。  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pushad:                             <span class=\"token comment\">; 将所有通用寄存器的值压入堆栈。  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>call Relocate:                      <span class=\"token comment\">; 调用 Relocate 过程。这可能是一个子过程，但是在提供的代码中并没有给出具体的实现。  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>assume fs:nothing:                  <span class=\"token comment\">; 指定 FS 段寄存器的偏移为 0。  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>push ebp:                           <span class=\"token comment\">; 将 EBP 寄存器的值压入堆栈。  </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>lea eax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>ebx <span class=\"token operator\">+</span> offset PageError<span class=\"token punctuation\">]</span>:   <span class=\"token comment\">; 计算 PageError 标签的地址并将其存储在 EAX 寄存器中。  </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>push eax:                           <span class=\"token comment\">; 将 EAX 寄存器的值压入堆栈。  </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>lea eax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>ebx <span class=\"token operator\">+</span> offset SEHHandler<span class=\"token punctuation\">]</span>:  <span class=\"token comment\">; 计算 SEHHandler 标签的地址并将其存储在 EAX 寄存器中。  </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>push eax:                           <span class=\"token comment\">; 将 EAX 寄存器的值压入堆栈。  </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>push fs:<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>:                        <span class=\"token comment\">; 将 FS 段寄存器的值（之前通过 assume fs:nothing 指定为 0）压入堆栈。  </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>mov fs:<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> esp:                    <span class=\"token comment\">; 将堆栈指针的值存储到 FS 段寄存器的偏移 0 处。  </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>mov edi<span class=\"token punctuation\">,</span> dwKernelRet:               <span class=\"token comment\">; 将传入的参数 dwKernelRet 的值存储到 EDI 寄存器。  </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>and edi<span class=\"token punctuation\">,</span> 0ffff0000h:                <span class=\"token comment\">; 将 EDI 寄存器的值按位与 0xffff0000，保留高 16 位，清零低 16 位。这样做可能是为了获得模块的基地址，因为模块基地址通常在 PE 头中的高 16 位。  </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>@@::                                <span class=\"token comment\">; 定义一个标签。  </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>cmp word ptr <span class=\"token punctuation\">[</span>edi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> IMAGE_DOS_SIGNATURE: <span class=\"token comment\">; 比较 edi 指向的地址处的 16 位值与 IMAGE_DOS_SIGNATURE（表示 DOS 头的标志）是否相等。  </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>jne PageError:                      <span class=\"token comment\">; 如果不相等，跳转到 PageError 标签。  </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>mov esi<span class=\"token punctuation\">,</span> edi:                       <span class=\"token comment\">; 将 edi 的值复制到 esi 寄存器。  </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>add esi<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>esi<span class=\"token operator\">+</span>003ch<span class=\"token punctuation\">]</span>:               <span class=\"token comment\">; 计算 esi 寄存器指向的地址处的值（PE 头中的 e_lfanew 字段）加上 esi 的值，得到 PE 头的地址。  </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>cmp word ptr <span class=\"token punctuation\">[</span>esi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> IMAGE_NT_SIGNATURE: <span class=\"token comment\">; 比较 esi 指向的地址处的 16 位值与 IMAGE_NT_SIGNATURE（表示 NT 头的标志）是否相等。  </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>jne PageError:                      <span class=\"token comment\">; 如果不相等，跳转到 PageError 标签。  </span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>mov dwReturn<span class=\"token punctuation\">,</span> edi:                  <span class=\"token comment\">; 将 edi 的值存储到 dwReturn 局部变量中。  </span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>jmp @@:                             <span class=\"token comment\">; 无条件跳转到 @@标签。  </span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>PageError::                         <span class=\"token comment\">; 定义 PageError 标签。  </span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>sub edi<span class=\"token punctuation\">,</span> 010000h:                   <span class=\"token comment\">; 将 edi 的值减去 0x10000。  </span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>cmp edi<span class=\"token punctuation\">,</span> 070000000h:                <span class=\"token comment\">; 比较 edi 的值与 0x70000000。  </span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>jb @@:                              <span class=\"token comment\">; 如果 edi 的值小于 0x70000000，无条件跳转到 @@标签。  </span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>jmp @b:                             <span class=\"token comment\">; 无条件跳转到上一个标签 @b。  </span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>@@::                                <span class=\"token comment\">; 定义一个标签。  </span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>pop fs:<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>:                         <span class=\"token comment\">; 弹出堆栈中的值并存储到 FS 段寄存器的偏移 0 处。  </span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>add esp<span class=\"token punctuation\">,</span> 0ch:                       <span class=\"token comment\">; 调整堆栈指针，相当于释放 12 字节的空间。  </span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>popad:                              <span class=\"token comment\">; 弹出之前压入堆栈的所有通用寄存器的值。  </span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>mov eax<span class=\"token punctuation\">,</span> dwReturn:                  <span class=\"token comment\">; 将 dwReturn 的值存储到 EAX 寄存器。  </span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>ret:                                <span class=\"token comment\">; 返回，结束过程。  </span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">; 总体来说，该函数的目的是通过对模块的 DOS 头和 NT 头的签名进行验证，获取 Kernel.dll 模块的加载基地址，并将其存储在 dwReturn 变量中返回。</span></pre></td></tr></table></figure><h2 id=\"汇编病毒实验-得到kernel基地址后根据函数名获取函数地址的流程\"><a class=\"anchor\" href=\"#汇编病毒实验-得到kernel基地址后根据函数名获取函数地址的流程\">#</a> 汇编病毒实验 - 得到 kernel 基地址后，根据函数名获取函数地址的流程</h2>\n<figure class=\"highlight armasm\"><figcaption data-lang=\"armasm\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mov     esi<span class=\"token punctuation\">,</span> hModule              <span class=\"token comment\">; 设置 esi 为模块句柄</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>add     esi<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>esi <span class=\"token operator\">+</span> 3ch<span class=\"token punctuation\">]</span>          <span class=\"token comment\">; 获取 IMAGE\\_NT\\_HEADERS 结构的地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>assume  esi:ptr IMAGE\\_NT\\_HEADERS  <span class=\"token comment\">; 假设 esi 指向 IMAGE\\_NT\\_HEADERS 结构</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mov     esi<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>esi<span class=\"token punctuation\">]</span>.OptionalHeader.DataDirectory.VirtualAddress <span class=\"token comment\">; 获取导出表的 RVA</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>add     esi<span class=\"token punctuation\">,</span> hModule              <span class=\"token comment\">; 计算导出表的地址</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>assume  esi:ptr IMAGE\\_EXPORT\\_DIRECTORY <span class=\"token comment\">; 假设 esi 指向 IMAGE\\_EXPORT\\_DIRECTORY 结构</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>mov     ebx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>esi<span class=\"token punctuation\">]</span>.AddressOfNames <span class=\"token comment\">; 获取导出函数名称表的 RVA</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>add     ebx<span class=\"token punctuation\">,</span> hModule              <span class=\"token comment\">; 计算导出函数名称表的地址</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>xor     edx<span class=\"token punctuation\">,</span> edx                  <span class=\"token comment\">; 清零 edx，用于计数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>@@:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>push    esi                       <span class=\"token comment\">; 保存 esi 的值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>mov     edi<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>ebx<span class=\"token punctuation\">]</span>                <span class=\"token comment\">; 获取当前导出函数的名称 RVA</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>add     edi<span class=\"token punctuation\">,</span> hModule              <span class=\"token comment\">; 计算当前导出函数的地址</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>mov     esi<span class=\"token punctuation\">,</span> lpszApi              <span class=\"token comment\">; 设置 esi 为要查找的函数名</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>mov     ecx<span class=\"token punctuation\">,</span> dwStringLength       <span class=\"token comment\">; 设置 ecx 为字符串长度</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>repz    cmpsb                      <span class=\"token comment\">; 逐字节比较当前导出函数名和目标函数名</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>jnz     skip                       <span class=\"token comment\">; 如果不相等，则跳转到 skip 标签</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>pop     esi                       <span class=\"token comment\">; 恢复 esi 的值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>jmp     @f                        <span class=\"token comment\">; 跳转到结束标签</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>skip:</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>pop     esi                       <span class=\"token comment\">; 恢复 esi 的值</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>add     ebx<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span>                    <span class=\"token comment\">; 移到下一个导出函数的名称</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>inc     edx                       <span class=\"token comment\">; 增加计数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>cmp     edx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>esi<span class=\"token punctuation\">]</span>.NumberOfNames  <span class=\"token comment\">; 比较计数和导出函数的总数</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>jl      @@b                       <span class=\"token comment\">; 如果计数小于总数，继续循环</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>jmp     Error                      <span class=\"token comment\">; 如果没有找到匹配的函数名，跳转到错误处理</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>@@:</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>sub     ebx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>esi<span class=\"token punctuation\">]</span>.AddressOfNames <span class=\"token comment\">; 计算当前导出函数名表的偏移量</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>sub     ebx<span class=\"token punctuation\">,</span> hModule               <span class=\"token comment\">; 计算当前导出函数名表的 RVA</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>shr     ebx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>                     <span class=\"token comment\">; 将偏移量右移一位（除以 2）</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>add     ebx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>esi<span class=\"token punctuation\">]</span>.AddressOfNameOrdinals <span class=\"token comment\">; 获取当前导出函数名的序数表的 RVA</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>add     ebx<span class=\"token punctuation\">,</span> hModule               <span class=\"token comment\">; 计算当前导出函数名的序数表的地址</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>movzx   eax<span class=\"token punctuation\">,</span> word ptr <span class=\"token punctuation\">[</span>ebx<span class=\"token punctuation\">]</span>       <span class=\"token comment\">; 获取当前导出函数的序数</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>shl     eax<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span>                     <span class=\"token comment\">; 将序数左移两位（乘以 4）</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>add     eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>esi<span class=\"token punctuation\">]</span>.AddressOfFunctions <span class=\"token comment\">; 获取当前导出函数地址表的 RVA</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>add     eax<span class=\"token punctuation\">,</span> hModule               <span class=\"token comment\">; 计算当前导出函数的 RVA</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>mov     eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span>                 <span class=\"token comment\">; 获取当前导出函数的地址</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>add     eax<span class=\"token punctuation\">,</span> hModule               <span class=\"token comment\">; 计算当前导出函数的地址</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>mov     dwReturn<span class=\"token punctuation\">,</span> eax              <span class=\"token comment\">; 保存当前导出函数的地址</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>Error:</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>pop     fs:<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>                     <span class=\"token comment\">; 恢复异常处理程序</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>add     esp<span class=\"token punctuation\">,</span> 0ch                   <span class=\"token comment\">; 调整堆栈</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>assume  esi:nothing                <span class=\"token comment\">; 取消 esi 的假设</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>popad                             <span class=\"token comment\">; 恢复寄存器的值</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>mov     eax<span class=\"token punctuation\">,</span> dwReturn              <span class=\"token comment\">; 返回当前导出函数的地址</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>ret</pre></td></tr></table></figure><p>以上是函数地址计算的过程。代码首先获取导出表的地址，然后通过遍历导出函数名称表找到目标函数名的序数，再通过序数找到导出函数地址表，最终获取目标函数的地址。如果找到匹配的函数名，就会跳转到结束标签，否则跳转到错误处理。在错误处理中，异常处理程序被恢复，堆栈被调整，最终返回找到的函数地址或错误状态。</p>\n<h1 id=\"第六章\"><a class=\"anchor\" href=\"#第六章\">#</a> 第六章</h1>\n<h2 id=\"宏病毒如何获得控制权\"><a class=\"anchor\" href=\"#宏病毒如何获得控制权\">#</a> 宏病毒如何获得控制权</h2>\n<p>利用自动执行宏，将病毒代码写入，从而获取控制权。</p>\n<p>当打开文档，其中的宏就会被执行，宏病毒就会被激活，并驻留在 Normal 模板上。</p>\n<p>所有自动保存的文档都会 &quot;感染&quot; 上这种宏病毒，而且如果其他用户打开了感染病毒的文档，宏病毒又会转移到他的计算机上。</p>\n<h2 id=\"宏-自我保护\"><a class=\"anchor\" href=\"#宏-自我保护\">#</a> 宏 - 自我保护</h2>\n<ul>\n<li>禁止提示信息</li>\n<li>屏蔽命令菜单，不允许查看宏</li>\n<li>隐藏宏的真实病毒代码</li>\n</ul>\n<h2 id=\"宏-导出导入\"><a class=\"anchor\" href=\"#宏-导出导入\">#</a> 宏 - 导出导入</h2>\n<p><img data-src=\"image-9.png\" alt=\"Alt text\" /></p>\n<h2 id=\"脚本病毒感染的方法\"><a class=\"anchor\" href=\"#脚本病毒感染的方法\">#</a> 脚本病毒感染的方法</h2>\n<p>VBS 脚本病毒：用 VBScript 编写，能够进行自我传播的破坏性程序，其需要人工干预触发执行。</p>\n<p>方法：VBS 脚本病毒是直接通过自我复制来感染文件的，病毒中的绝大部分代码都可以直接附加在其他同类程序的中间。</p>\n<h2 id=\"vbs脚本病毒对抗反病毒软件的几种技巧\"><a class=\"anchor\" href=\"#vbs脚本病毒对抗反病毒软件的几种技巧\">#</a> VBS 脚本病毒对抗反病毒软件的几种技巧</h2>\n<ul>\n<li>自加密</li>\n<li>运用 Execute 函数：如果病毒将这段声明代码转化为字符串，然后通过 Execute (String) 函数执行，就可以躲避某些反病毒软件。</li>\n<li>改变对象声明方法：如 fso=createobject (&quot;script&quot;＋&quot;ing.filesyste&quot;＋&quot;mobject&quot;)</li>\n<li>关闭反病毒软件</li>\n</ul>\n<h1 id=\"第七章\"><a class=\"anchor\" href=\"#第七章\">#</a> 第七章</h1>\n<h1 id=\"第八章\"><a class=\"anchor\" href=\"#第八章\">#</a> 第八章</h1>\n<h1 id=\"第九章\"><a class=\"anchor\" href=\"#第九章\">#</a> 第九章</h1>\n<p>检测对象：引导扇区、文件系统中可能带毒的文件、内存空间、主板 BIOS、网络流量和系统行为等。</p>\n<p>检测策略：专用检查技术（如文本特征值检测技术）、通用检查技术（如启发式扫描技术、主动防御技术）</p>\n<h2 id=\"bm算法\"><a class=\"anchor\" href=\"#bm算法\">#</a> BM 算法</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYxNjI4NS9hcnRpY2xlL2RldGFpbHMvMTI4MTk4NzYyP29wc19yZXF1ZXN0X21pc2M9JTI1N0IlMjUyMnJlcXVlc3QlMjU1RmlkJTI1MjIlMjUzQSUyNTIyMTcwNTA2MDYwMzE2ODAwMTg4NTExNzg0JTI1MjIlMjUyQyUyNTIyc2NtJTI1MjIlMjUzQSUyNTIyMjAxNDA3MTMuMTMwMTAyMzM0Li4lMjUyMiUyNTdEJmFtcDtyZXF1ZXN0X2lkPTE3MDUwNjA2MDMxNjgwMDE4ODUxMTc4NCZhbXA7Yml6X2lkPTAmYW1wO3V0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19zZWFyY2hfcmVzdWx0Lm5vbmUtdGFzay1ibG9nLTJ+YWxsfnRvcF9jbGlja35kZWZhdWx0LTItMTI4MTk4NzYyLW51bGwtbnVsbC4xNDIlNUV2OTklNUVwY19zZWFyY2hfcmVzdWx0X2Jhc2UxJmFtcDt1dG1fdGVybT1CTSVFNyVBRSU5NyVFNiVCMyU5NSZhbXA7c3BtPTEwMTguMjIyNi4zMDAxLjQxODc=\">BM (Boyer-Moore) 算法详解_bm 算法 - CSDN 博客</span></p>\n<h2 id=\"ac算法\"><a class=\"anchor\" href=\"#ac算法\">#</a> AC 算法</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0NjEzOS9hcnRpY2xlL2RldGFpbHMvMTA1MDc1Njc2P29wc19yZXF1ZXN0X21pc2M9JmFtcDtyZXF1ZXN0X2lkPSZhbXA7Yml6X2lkPTEwMiZhbXA7dXRtX3Rlcm09QUMlRTclQUUlOTclRTYlQjMlOTUmYW1wO3V0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19zZWFyY2hfcmVzdWx0Lm5vbmUtdGFzay1ibG9nLTJ+YWxsfnNvYmFpZHV3ZWJ+ZGVmYXVsdC05LTEwNTA3NTY3Ni4xNDIlNUV2OTklNUVwY19zZWFyY2hfcmVzdWx0X2Jhc2UxJmFtcDtzcG09MTAxOC4yMjI2LjMwMDEuNDE4Nw==\">AC 自动机 算法详解 (图解) 及模板_ac 算法图解 - CSDN 博客</span></p>\n<h2 id=\"wu-manber算法\"><a class=\"anchor\" href=\"#wu-manber算法\">#</a> Wu-Manber 算法</h2>\n<p>建表：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BpOW5jL2FydGljbGUvZGV0YWlscy85MTI0NjIz\">Wu-Manber 经典多模式匹配算法_wumanber-CSDN 博客</span></p>\n<p>匹配：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGFkYXduL3AvOTI4MTUwOS5odG1s\">浅谈</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGFkYXduL3AvOTI4MTUwOS5odG1s\"> WM 算法 - IvanB.G.Liu - 博客园 (cnblogs.com)</span></p>\n<h2 id=\"校验和检测\"><a class=\"anchor\" href=\"#校验和检测\">#</a> 校验和检测</h2>\n<p>思路：病毒会通过更改文件来工作运行 (除了伴生病毒外不需要），可以用完整性检查器，通过监视对文件进行未经授权的更改，来利用此行为，来查找病毒。</p>\n<p>实用方法：</p>\n<ul>\n<li>脱机检测。校验和仅定期验证，例如每周一次。</li>\n<li>自检。可执行文件被修改为在运行时检查自己。</li>\n<li>完整性壳层。可执行文件的校验和在执行前立即进行验证。</li>\n</ul>\n<p>检测对象：</p>\n<ul>\n<li>文件头部：在文件很大的情况下为节省时间只对头部进行校验</li>\n<li>文件属性：检查文件长度、创建时间、读写属性、首簇号等</li>\n<li>文件内容：检查整个文件</li>\n<li>系统数据：检查引导扇区、中断向量表、驱动程序处理例程等</li>\n</ul>\n<p>优缺点：</p>\n<ul>\n<li>\n<p>优点：方法简单，能够发现未知病毒，能够发现文件的微小变化</p>\n</li>\n<li>\n<p>缺点：必须先保存正确的校验码，容易误报，效率低，不能识别病毒类别</p>\n</li>\n</ul>\n<h2 id=\"系统调用dll名称及对应功能\"><a class=\"anchor\" href=\"#系统调用dll名称及对应功能\">#</a> 系统调用 DLL 名称及对应功能</h2>\n<ul>\n<li>\n<p>Kernel32.dll 常见的核心系统功能，如访问和操作内存、文件和硬件</p>\n</li>\n<li>\n<p>Ntdll.dll Windows 内核的接口</p>\n</li>\n<li>\n<p>User32.dll 用户界面</p>\n</li>\n<li>\n<p>Advapi32.dll 服务管理器和注册表组件</p>\n</li>\n<li>\n<p>Gdi32.dll 图形显示和操作</p>\n</li>\n<li>\n<p>Wsock32.dll Ws2_32.dll 联网</p>\n</li>\n<li>\n<p>Wininet.dll 更高层次的网络函数，实现了如 FTP、HTTP 和 NTP</p>\n</li>\n</ul>\n<p><img data-src=\"image-10.png\" alt=\"Alt text\" /></p>\n<h1 id=\"第十章\"><a class=\"anchor\" href=\"#第十章\">#</a> 第十章</h1>\n<h2 id=\"软件缺陷与漏洞机理基础\"><a class=\"anchor\" href=\"#软件缺陷与漏洞机理基础\">#</a> 软件缺陷与漏洞机理基础</h2>\n<h3 id=\"软件漏洞定义及其要素\"><a class=\"anchor\" href=\"#软件漏洞定义及其要素\">#</a> 软件漏洞定义及其要素</h3>\n<ul>\n<li>\n<p>定义：漏洞 (Vulnerability)，通常也称脆弱性，RFC2828 将漏洞定义为 &quot;系统设计、实现或操作管理中存在的缺陷或者弱点，能被利用而违背系统的安全策略&quot;。攻击者利用漏洞可以获得计算机系统的额外权限。</p>\n</li>\n<li>\n<p>要素：①受影响的软件版本②POC - 验证漏洞存在的代码③漏洞触发的条件④攻击能力</p>\n</li>\n</ul>\n<h3 id=\"漏洞威胁分类\"><a class=\"anchor\" href=\"#漏洞威胁分类\">#</a> 漏洞威胁分类</h3>\n<ul>\n<li>获取访问权限的漏洞</li>\n<li>权限提升的漏洞</li>\n<li>拒绝服务的漏洞</li>\n<li>恶意软件植入漏洞</li>\n<li>数据丢失或者泄露漏洞</li>\n</ul>\n<h3 id=\"软件漏洞生命周期\"><a class=\"anchor\" href=\"#软件漏洞生命周期\">#</a> 软件漏洞生命周期</h3>\n<p>漏洞挖掘→漏洞重现→漏洞诊断→漏洞修复→补丁测试→补丁推送</p>\n<p><img data-src=\"image-11.png\" alt=\"Alt text\" /></p>\n<h3 id=\"漏洞利用对软件系统的威胁\"><a class=\"anchor\" href=\"#漏洞利用对软件系统的威胁\">#</a> 漏洞利用对软件系统的威胁</h3>\n<ul>\n<li>\n<p>非法获得访问权限：未经授权使用资源</p>\n</li>\n<li>\n<p>权限提升：用户账号从低权限提升到高权限</p>\n</li>\n<li>\n<p>拒绝服务：使得计算机软件或者系统无法正常工作、无法提供正常的服务（本地 / 远程）</p>\n</li>\n<li>\n<p>恶意软件植入：主动（不需要用户的干预）/ 被动（需要借助用户的操作）</p>\n</li>\n<li>\n<p>数据丢失或者泄露：数据被破坏、删除或者非法读取</p>\n</li>\n</ul>\n<h2 id=\"栈缓冲区溢出\"><a class=\"anchor\" href=\"#栈缓冲区溢出\">#</a> 栈缓冲区溢出</h2>\n<h3 id=\"栈区的内容\"><a class=\"anchor\" href=\"#栈区的内容\">#</a> 栈区的内容</h3>\n<ul>\n<li>函数的参数</li>\n<li>函数返回地址</li>\n<li>EBP 的值</li>\n<li>一些通用寄存器的值</li>\n<li>当前正在执行的函数的局部变量</li>\n</ul>\n<h3 id=\"栈操作\"><a class=\"anchor\" href=\"#栈操作\">#</a> 栈操作</h3>\n<p>push/pop</p>\n<h3 id=\"函数调用过程与栈分布图\"><a class=\"anchor\" href=\"#函数调用过程与栈分布图\">#</a> 函数调用过程与栈分布图</h3>\n<p>调用过程与栈分布图：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xODE0NjEz\">C++ 函数调用过程深入分析 - 腾讯云开发者社区 - 腾讯云 (tencent.com)</span></p>\n<h4 id=\"1-__cdecl-c调用规则\"><a class=\"anchor\" href=\"#1-__cdecl-c调用规则\">#</a> (1) __cdecl C 调用规则</h4>\n<p>后面的参数先进入堆栈；</p>\n<p>函数返回后调用者负责清除堆栈，因此会生成较大的可执行程序。</p>\n<h4 id=\"2-__stdcall又称为winapi调用规则\"><a class=\"anchor\" href=\"#2-__stdcall又称为winapi调用规则\">#</a> (2) __stdcall（又称为 WINAPI）调用规则</h4>\n<p>后面的参数先进入堆栈；</p>\n<p>被调用的函数在返回前自行清理堆栈，所以生成的代码比 cdecl 小。</p>\n<h4 id=\"3-fast-call\"><a class=\"anchor\" href=\"#3-fast-call\">#</a> (3) Fast call</h4>\n<p>把函数参数的前两个放入寄存器，其他参数入栈（后面参数先入）</p>\n<h4 id=\"4-pascal\"><a class=\"anchor\" href=\"#4-pascal\">#</a> (4) Pascal</h4>\n<p>参数在前的先入栈（主要用在 WIN16 函数库，现在基本不用）</p>\n<p>不支持可变参数的函数调用。</p>\n<h3 id=\"覆盖返回地址\"><a class=\"anchor\" href=\"#覆盖返回地址\">#</a> 覆盖返回地址</h3>\n<p>Nrs + jmp esp</p>\n<h3 id=\"覆盖seh中的handler\"><a class=\"anchor\" href=\"#覆盖seh中的handler\">#</a> 覆盖 SEH 中的 handler</h3>\n<p>fs:[0] 指向 SEH 的初始地址，通过获取该地址以确定溢出的长度，这个长度必须确定以保证能够正确覆盖关键函数指针。将指针覆盖为类似于 jmp esp 指令的地址，即可执行 shellcode。</p>\n<h2 id=\"堆缓冲区溢出\"><a class=\"anchor\" href=\"#堆缓冲区溢出\">#</a> 堆缓冲区溢出</h2>\n<p>既然堆是操作系统分配给进程的内存段，两个程序在动态执行中申请到的堆地址可能是一样的吗？所处物理内存上的物理地址可能是一样的吗？</p>\n<p>注意：两个程序动态申请的堆空间地址完全有可能相同。要搞清楚虚拟地址和物理地址的区别，程序中直接操作的是虚拟内存地址，由操作系统从物理地址中映射而来，并非物理内存地址。但两个程序分配的堆地址的物理地址也有可能相同。两个程序可以交错使用这块内存。</p>\n<h3 id=\"堆表空表和快表\"><a class=\"anchor\" href=\"#堆表空表和快表\">#</a> 堆表：空表和快表</h3>\n<ul>\n<li>\n<p>Freelist（空表）：双向链表</p>\n<ul>\n<li>\n<p>128 项（0&lt;=index&lt;128）</p>\n</li>\n<li 8=\"\" *=\"\" index，0=\"\" &lt;=\"\" index=\"\" &lt;=\"\" 128；1024，index=\"\">\n<p>空闲块大小 =</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Lookaside（快表）：单向链表</p>\n<ul>\n<li>\n<p>128 项 每项最多 4 个节点</p>\n</li>\n<li>\n<p>链中的堆不发生合并</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"堆块块首和块首\"><a class=\"anchor\" href=\"#堆块块首和块首\">#</a> 堆块：块首和块首</h3>\n<p>块首：头部几个字节，用来标识自身信息（如大小，空闲还是占有等）</p>\n<p>块身：数据存储区域，紧跟块首</p>\n<h3 id=\"堆溢出的利用方式\"><a class=\"anchor\" href=\"#堆溢出的利用方式\">#</a> 堆溢出的利用方式</h3>\n<h4 id=\"1-whatwhere或dword-shoot\"><a class=\"anchor\" href=\"#1-whatwhere或dword-shoot\">#</a> (1) What→where 或 Dword shoot</h4>\n<p>分配完 buf1 之后向其中拷贝内容，拷贝的内容大小超过 buf1 的大小，即 16 字节，就会发生溢出，如果覆盖掉两个 4 字节的指针，而下一次分配 buf2 之前又没有把 buf1 释放掉的话，就会把一个 4 字节的内容写入一个地址当中，而这个内容和地址都是能够控制的，这样就可以控制函数的流程转向 shellcode。</p>\n<h4 id=\"2-堆溢出能够利用成功的前提条件\"><a class=\"anchor\" href=\"#2-堆溢出能够利用成功的前提条件\">#</a> (2) 堆溢出能够利用成功的前提条件</h4>\n<h4 id=\"3-堆喷射利用原理\"><a class=\"anchor\" href=\"#3-堆喷射利用原理\">#</a> (3) 堆喷射利用原理</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MTYxOTkzL2FydGljbGUvZGV0YWlscy8xMDQ4NDY3OTI/b3BzX3JlcXVlc3RfbWlzYz0lMjU3QiUyNTIycmVxdWVzdCUyNTVGaWQlMjUyMiUyNTNBJTI1MjIxNzA1MjA4Mzc5MTY4MDAxODIxOTUxODQlMjUyMiUyNTJDJTI1MjJzY20lMjUyMiUyNTNBJTI1MjIyMDE0MDcxMy4xMzAxMDIzMzQuLiUyNTIyJTI1N0QmYW1wO3JlcXVlc3RfaWQ9MTcwNTIwODM3OTE2ODAwMTgyMTk1MTg0JmFtcDtiaXpfaWQ9MCZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3NlYXJjaF9yZXN1bHQubm9uZS10YXNrLWJsb2ctMn5hbGx+c29iYWlkdWVuZH5kZWZhdWx0LTEtMTA0ODQ2NzkyLW51bGwtbnVsbC4xNDIlNUV2OTklNUVwY19zZWFyY2hfcmVzdWx0X2Jhc2UxJmFtcDt1dG1fdGVybT0lRTUlQTAlODYlRTUlOTYlQjclRTUlQjAlODQmYW1wO3NwbT0xMDE4LjIyMjYuMzAwMS40MTg3\">Heap Spray 原理_heap spaying-CSDN 博客</span></p>\n<h3 id=\"uaf基本原理与可能的安全问题\"><a class=\"anchor\" href=\"#uaf基本原理与可能的安全问题\">#</a> UAF 基本原理与可能的安全问题</h3>\n<p>如果攻击者可以操纵 p1，则在 p1 指向的内存被释放后，程序再次申请内存，由于 p1 没有被赋值为 NULL，攻击者可向 p1 指向的内存 写入精心构造的 Shellcode 或采用其他方式改变程序控制流，从而达到攻击的目的。</p>\n<h3 id=\"格式化字符串\"><a class=\"anchor\" href=\"#格式化字符串\">#</a> 格式化字符串</h3>\n<h4 id=\"1-格式化字符串函数printf的栈结构图\"><a class=\"anchor\" href=\"#1-格式化字符串函数printf的栈结构图\">#</a> (1) 格式化字符串函数 (printf) 的栈结构图</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80NjU4OTY1NDI=\">CTFer 成长日记 11：格式化字符串漏洞的原理与利用 - 知乎 (zhihu.com)</span></p>\n<h4 id=\"2-格式化字符串的危害\"><a class=\"anchor\" href=\"#2-格式化字符串的危害\">#</a> (2) 格式化字符串的危害</h4>\n<p>printf(&quot;%s%n&quot;, &quot;01234&quot;, &amp;n); // n = 5</p>\n<ul>\n<li>\n<p>越界读操作→数据泄露</p>\n</li>\n<li>\n<p>越界写操作→数据破坏</p>\n</li>\n</ul>\n<h2 id=\"整数溢出及其他漏洞类型\"><a class=\"anchor\" href=\"#整数溢出及其他漏洞类型\">#</a> 整数溢出及其他漏洞类型</h2>\n<h3 id=\"整数溢出的概念\"><a class=\"anchor\" href=\"#整数溢出的概念\">#</a> 整数溢出的概念</h3>\n<p>当试图保存一个比它可以表示的最大值还大的数时，就会发生整数溢出</p>\n<h3 id=\"整数溢出的典型表现形式需全部掌握\"><a class=\"anchor\" href=\"#整数溢出的典型表现形式需全部掌握\">#</a> 整数溢出的典型表现形式（需全部掌握）</h3>\n<ul>\n<li>\n<p>宽度溢出（short = int）</p>\n</li>\n<li>\n<p>运算溢出（乘法加法导致）</p>\n</li>\n<li>\n<p>符号溢出（负数）</p>\n</li>\n</ul>\n<h3 id=\"整数溢出和缓冲区溢出的经典结合形式\"><a class=\"anchor\" href=\"#整数溢出和缓冲区溢出的经典结合形式\">#</a> 整数溢出和缓冲区溢出的经典结合形式</h3>\n<h2 id=\"漏洞利用与发现\"><a class=\"anchor\" href=\"#漏洞利用与发现\">#</a> 漏洞利用与发现</h2>\n<h3 id=\"漏洞利用的目标\"><a class=\"anchor\" href=\"#漏洞利用的目标\">#</a> 漏洞利用的目标</h3>\n<ul>\n<li>修改内存变量</li>\n<li>修改代码逻辑</li>\n<li>修改函数的返回地址</li>\n<li>修改函数指针（C++）</li>\n<li>修改异常处理函数指针</li>\n<li>修改线程同步的函数指针</li>\n</ul>\n<h3 id=\"理解漏洞利用的整体流程\"><a class=\"anchor\" href=\"#理解漏洞利用的整体流程\">#</a> 理解漏洞利用的整体流程</h3>\n<ul>\n<li>定位漏洞点</li>\n<li>按照利用要求，编写 shellcode</li>\n<li>溢出，覆盖代码指针，使得 shellcode 获得可执行权</li>\n</ul>\n<h3 id=\"掌握shellcode实例运行原理\"><a class=\"anchor\" href=\"#掌握shellcode实例运行原理\">#</a> 掌握 shellcode 实例运行原理</h3>\n<h3 id=\"理解为什么需要地址重定位并能够说明重定位代码含义\"><a class=\"anchor\" href=\"#理解为什么需要地址重定位并能够说明重定位代码含义\">#</a> 理解为什么需要地址重定位，并能够说明重定位代码含义</h3>\n<p>由于 shellcode 没有 PE 头，因此 shellcode 中使用的 API 和数据必须由 shellcode 自己进行搜索和重定位</p>\n<h3 id=\"ascii-armoring\"><a class=\"anchor\" href=\"#ascii-armoring\">#</a> ASCII Armoring</h3>\n<p>ASCII armoring 机制想办法让 libc 所有函数的地址都包含一个零字节，让 strcpy 拷贝函数在遇到零地址时结束拷贝，攻击失败！</p>\n<p>攻击方法：ret2plt</p>\n<p>找到 4 个地址空间，它的首字节分别是 system 地址的第一个 byte, 第二个 byte，第三个 byte 和第四个 byte，然后一个个 byte 拷贝，将这 4 个 byte 拼凑到函数调用表里面。从而绕过直接拷贝 system 地址造成失败。</p>\n<h3 id=\"掌握二进制代码重用原理与示例具备rop分析与设计能力重点考察\"><a class=\"anchor\" href=\"#掌握二进制代码重用原理与示例具备rop分析与设计能力重点考察\">#</a> 掌握二进制代码重用原理与示例，具备 ROP 分析与设计能力（重点考察）</h3>\n<h3 id=\"静态分析技术vs动态分析技术\"><a class=\"anchor\" href=\"#静态分析技术vs动态分析技术\">#</a> 静态分析技术 VS 动态分析技术</h3>\n<p>动态分析：收集程序多次执行的运行过程的状态信息，结合输入和输出，检测程序存在的缺陷或漏洞。</p>\n<h1 id=\"第十一章\"><a class=\"anchor\" href=\"#第十一章\">#</a> 第十一章</h1>\n<h2 id=\"数据执行保护-depnx-防御机理及不足\"><a class=\"anchor\" href=\"#数据执行保护-depnx-防御机理及不足\">#</a> 数据执行保护 – DEP/NX 防御机理及不足</h2>\n<ul>\n<li>\n<p>防御机理：禁用 stack/heap 中的代码执行</p>\n</li>\n<li>\n<p>不足：带来兼容性、灵活性问题（如用于提取其他软件窗口上文字的软件，可能需要在栈或堆中执行代码，DEP 启用后这类软件可能无法正常运行。）</p>\n</li>\n<li>\n<p>对策：Ret2Libc、ROP、JOP、COP</p>\n</li>\n</ul>\n<h2 id=\"栈溢出保护-stack-guardstack-canary防御机理及不足\"><a class=\"anchor\" href=\"#栈溢出保护-stack-guardstack-canary防御机理及不足\">#</a> 栈溢出保护 – Stack Guard/Stack Canary 防御机理及不足</h2>\n<ul>\n<li>\n<p>防御机理：在函数开始时往栈中压入一个可以检验的随机数（ESP 异或.data 节的第一个 DWORD，这个 DWORD 称为种子，异或种子的结果作为 cookie），在函数结束时验证栈中的随机数是否一致。</p>\n</li>\n<li>\n<p>不足：无法防御的部分：未被保护的函数（不应用于以下情况：函数不包含缓冲区；函数被定义为具有变量参数列表；函数使用无保护的关键字标记；函数在第一个语句中包含内嵌汇编代码；缓冲区不是 8 字节类型且大小不大于 4 个字节），针对基于改写函数指针的攻击，如 C++ 虚函数攻击；针对异常处理机制的攻击；堆溢出攻击。</p>\n</li>\n<li>\n<p>对策：利用未保护的函数；覆盖 C++ 虚函数；攻击异常处理机制；同时替换栈和 data 中的 cookie</p>\n</li>\n</ul>\n<h2 id=\"地址空间分布随机化-aslr防御机理及不足\"><a class=\"anchor\" href=\"#地址空间分布随机化-aslr防御机理及不足\">#</a> 地址空间分布随机化 – ASLR 防御机理及不足</h2>\n<p>栈和堆的基址是加载时随机确定的；程序自身和关联库的基址是加载时随机确定的。</p>\n<p>兼容性：一些老处理器不支持。</p>\n<h1 id=\"第十二章\"><a class=\"anchor\" href=\"#第十二章\">#</a> 第十二章</h1>\n<h2 id=\"威胁建模过程\"><a class=\"anchor\" href=\"#威胁建模过程\">#</a> 威胁建模过程</h2>\n<ol>\n<li>在项目组中成立一个小组；</li>\n<li>分解系统需求；</li>\n<li>确定系统可能面临哪些威胁；</li>\n<li>画出威胁树，对软件可能受到的威胁进行表达；</li>\n<li>选择应对威胁或者缓和威胁的方法；</li>\n<li>确定最终技术</li>\n</ol>\n<h2 id=\"根据威胁画建模树\"><a class=\"anchor\" href=\"#根据威胁画建模树\">#</a> 根据威胁画建模树</h2>\n<p><img data-src=\"image-12.png\" alt=\"Alt text\" /></p>\n<p><img data-src=\"image-13.png\" alt=\"Alt text\" /></p>\n",
            "tags": [
                "HUST本科学习",
                "HUST",
                "软件安全",
                "期末复习"
            ]
        },
        {
            "id": "https://less1.top/hello-world/",
            "url": "https://less1.top/hello-world/",
            "title": "Hello World",
            "date_published": "2024-01-21T11:03:14.000Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}